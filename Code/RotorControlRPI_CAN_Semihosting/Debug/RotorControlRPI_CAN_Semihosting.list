
RotorControlRPI_CAN_Semihosting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800327c  0800327c  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  0800327c  0800327c  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800327c  0800327c  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08003284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000130  080033b4  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  080033b4  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a8d  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000044a  00000000  00000000  00021be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a8  00000000  00000000  00022030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000080  00000000  00000000  000220d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000aebf  00000000  00000000  00022158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000e7e  00000000  00000000  0002d017  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00035a41  00000000  00000000  0002de95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000638d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c58  00000000  00000000  00063954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000130 	.word	0x20000130
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002990 	.word	0x08002990

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000134 	.word	0x20000134
 8000104:	08002990 	.word	0x08002990

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__NVIC_EnableIRQ>:
  \brief   Enable Interrupt
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn){
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	0002      	movs	r2, r0
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b7f      	cmp	r3, #127	; 0x7f
 8000242:	d809      	bhi.n	8000258 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000244:	1dfb      	adds	r3, r7, #7
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	001a      	movs	r2, r3
 800024a:	231f      	movs	r3, #31
 800024c:	401a      	ands	r2, r3
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <__NVIC_EnableIRQ+0x30>)
 8000250:	2101      	movs	r1, #1
 8000252:	4091      	lsls	r1, r2
 8000254:	000a      	movs	r2, r1
 8000256:	601a      	str	r2, [r3, #0]
  }
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b002      	add	sp, #8
 800025e:	bd80      	pop	{r7, pc}
 8000260:	e000e100 	.word	0xe000e100

08000264 <__NVIC_SetPriority>:
           or negative to specify a processor exception.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority){
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	0002      	movs	r2, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	1dfb      	adds	r3, r7, #7
 8000270:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b7f      	cmp	r3, #127	; 0x7f
 8000278:	d828      	bhi.n	80002cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)] = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800027a:	4a2f      	ldr	r2, [pc, #188]	; (8000338 <__NVIC_SetPriority+0xd4>)
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	b25b      	sxtb	r3, r3
 8000282:	089b      	lsrs	r3, r3, #2
 8000284:	33c0      	adds	r3, #192	; 0xc0
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	589b      	ldr	r3, [r3, r2]
 800028a:	1dfa      	adds	r2, r7, #7
 800028c:	7812      	ldrb	r2, [r2, #0]
 800028e:	0011      	movs	r1, r2
 8000290:	2203      	movs	r2, #3
 8000292:	400a      	ands	r2, r1
 8000294:	00d2      	lsls	r2, r2, #3
 8000296:	21ff      	movs	r1, #255	; 0xff
 8000298:	4091      	lsls	r1, r2
 800029a:	000a      	movs	r2, r1
 800029c:	43d2      	mvns	r2, r2
 800029e:	401a      	ands	r2, r3
 80002a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	019b      	lsls	r3, r3, #6
 80002a6:	22ff      	movs	r2, #255	; 0xff
 80002a8:	401a      	ands	r2, r3
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	0018      	movs	r0, r3
 80002b0:	2303      	movs	r3, #3
 80002b2:	4003      	ands	r3, r0
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)] = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	481f      	ldr	r0, [pc, #124]	; (8000338 <__NVIC_SetPriority+0xd4>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	b25b      	sxtb	r3, r3
 80002c0:	089b      	lsrs	r3, r3, #2
 80002c2:	430a      	orrs	r2, r1
 80002c4:	33c0      	adds	r3, #192	; 0xc0
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ca:	e031      	b.n	8000330 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <__NVIC_SetPriority+0xd8>)
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	0019      	movs	r1, r3
 80002d4:	230f      	movs	r3, #15
 80002d6:	400b      	ands	r3, r1
 80002d8:	3b08      	subs	r3, #8
 80002da:	089b      	lsrs	r3, r3, #2
 80002dc:	3306      	adds	r3, #6
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	18d3      	adds	r3, r2, r3
 80002e2:	3304      	adds	r3, #4
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	1dfa      	adds	r2, r7, #7
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	0011      	movs	r1, r2
 80002ec:	2203      	movs	r2, #3
 80002ee:	400a      	ands	r2, r1
 80002f0:	00d2      	lsls	r2, r2, #3
 80002f2:	21ff      	movs	r1, #255	; 0xff
 80002f4:	4091      	lsls	r1, r2
 80002f6:	000a      	movs	r2, r1
 80002f8:	43d2      	mvns	r2, r2
 80002fa:	401a      	ands	r2, r3
 80002fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	019b      	lsls	r3, r3, #6
 8000302:	22ff      	movs	r2, #255	; 0xff
 8000304:	401a      	ands	r2, r3
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	0018      	movs	r0, r3
 800030c:	2303      	movs	r3, #3
 800030e:	4003      	ands	r3, r0
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000314:	4809      	ldr	r0, [pc, #36]	; (800033c <__NVIC_SetPriority+0xd8>)
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	001c      	movs	r4, r3
 800031c:	230f      	movs	r3, #15
 800031e:	4023      	ands	r3, r4
 8000320:	3b08      	subs	r3, #8
 8000322:	089b      	lsrs	r3, r3, #2
 8000324:	430a      	orrs	r2, r1
 8000326:	3306      	adds	r3, #6
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	18c3      	adds	r3, r0, r3
 800032c:	3304      	adds	r3, #4
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b003      	add	sp, #12
 8000336:	bd90      	pop	{r4, r7, pc}
 8000338:	e000e100 	.word	0xe000e100
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <canFilterConfig>:
/*                                                                            */
/******************************************************************************/

/******************* Configure the CAN to filter the data frames from the RPI ********************/

void canFilterConfig(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0

  printf("********** CAN FILTER CONFIGURATION **********\r\n");
 8000344:	4bfd      	ldr	r3, [pc, #1012]	; (800073c <canFilterConfig+0x3fc>)
 8000346:	0018      	movs	r0, r3
 8000348:	f001 f978 	bl	800163c <puts>

  // Enter filter initialization mode
  CAN->FMR |= CAN_FMR_FINIT; // 0: Active filters mode, 1: Initialization mode for the filters
 800034c:	4afc      	ldr	r2, [pc, #1008]	; (8000740 <canFilterConfig+0x400>)
 800034e:	2380      	movs	r3, #128	; 0x80
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	58d3      	ldr	r3, [r2, r3]
 8000354:	49fa      	ldr	r1, [pc, #1000]	; (8000740 <canFilterConfig+0x400>)
 8000356:	2201      	movs	r2, #1
 8000358:	431a      	orrs	r2, r3
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	50ca      	str	r2, [r1, r3]

  // Identifier mode for the filters 0 to 5
  CAN->FM1R |= CAN_FM1R_FBM0 | CAN_FM1R_FBM1 | CAN_FM1R_FBM2 | CAN_FM1R_FBM3 | CAN_FM1R_FBM4 | CAN_FM1R_FBM5;  // 0: Mask mode, 1: Identifier mode
 8000360:	4af7      	ldr	r2, [pc, #988]	; (8000740 <canFilterConfig+0x400>)
 8000362:	2381      	movs	r3, #129	; 0x81
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	58d3      	ldr	r3, [r2, r3]
 8000368:	49f5      	ldr	r1, [pc, #980]	; (8000740 <canFilterConfig+0x400>)
 800036a:	223f      	movs	r2, #63	; 0x3f
 800036c:	431a      	orrs	r2, r3
 800036e:	2381      	movs	r3, #129	; 0x81
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	50ca      	str	r2, [r1, r3]

  // Identifier mode for the filters 6 to 11
  CAN->FM1R |= CAN_FM1R_FBM6 | CAN_FM1R_FBM7 | CAN_FM1R_FBM8 | CAN_FM1R_FBM9 | CAN_FM1R_FBM10 | CAN_FM1R_FBM11;  // 0: Mask mode, 1: Identifier mode
 8000374:	4af2      	ldr	r2, [pc, #968]	; (8000740 <canFilterConfig+0x400>)
 8000376:	2381      	movs	r3, #129	; 0x81
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	58d3      	ldr	r3, [r2, r3]
 800037c:	49f0      	ldr	r1, [pc, #960]	; (8000740 <canFilterConfig+0x400>)
 800037e:	22fc      	movs	r2, #252	; 0xfc
 8000380:	0112      	lsls	r2, r2, #4
 8000382:	431a      	orrs	r2, r3
 8000384:	2381      	movs	r3, #129	; 0x81
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	50ca      	str	r2, [r1, r3]

  // Single 32-bit scale configuration mode for the filters 0 to 5
  CAN->FS1R |= CAN_FS1R_FSC0 | CAN_FS1R_FSC1 | CAN_FS1R_FSC2 | CAN_FS1R_FSC3 | CAN_FS1R_FSC4 | CAN_FS1R_FSC5; // 0: Dual 16-bit scale configuration, 1: Single 32-bit scale configuration
 800038a:	4aed      	ldr	r2, [pc, #948]	; (8000740 <canFilterConfig+0x400>)
 800038c:	2383      	movs	r3, #131	; 0x83
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	58d3      	ldr	r3, [r2, r3]
 8000392:	49eb      	ldr	r1, [pc, #940]	; (8000740 <canFilterConfig+0x400>)
 8000394:	223f      	movs	r2, #63	; 0x3f
 8000396:	431a      	orrs	r2, r3
 8000398:	2383      	movs	r3, #131	; 0x83
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	50ca      	str	r2, [r1, r3]

  // Single 32-bit scale configuration mode for the filters 6 to 11
  CAN->FS1R |= CAN_FS1R_FSC6 | CAN_FS1R_FSC7 | CAN_FS1R_FSC8 | CAN_FS1R_FSC9 | CAN_FS1R_FSC10 | CAN_FS1R_FSC11; // 0: Dual 16-bit scale configuration, 1: Single 32-bit scale configuration
 800039e:	4ae8      	ldr	r2, [pc, #928]	; (8000740 <canFilterConfig+0x400>)
 80003a0:	2383      	movs	r3, #131	; 0x83
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	58d3      	ldr	r3, [r2, r3]
 80003a6:	49e6      	ldr	r1, [pc, #920]	; (8000740 <canFilterConfig+0x400>)
 80003a8:	22fc      	movs	r2, #252	; 0xfc
 80003aa:	0112      	lsls	r2, r2, #4
 80003ac:	431a      	orrs	r2, r3
 80003ae:	2383      	movs	r3, #131	; 0x83
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	50ca      	str	r2, [r1, r3]

  // The message passing through the filter 0 to 5 will be stored in the FIFO 0
  CAN->FFA1R &= ~CAN_FFA1R_FFA0_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 80003b4:	4ae2      	ldr	r2, [pc, #904]	; (8000740 <canFilterConfig+0x400>)
 80003b6:	2385      	movs	r3, #133	; 0x85
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	58d3      	ldr	r3, [r2, r3]
 80003bc:	49e0      	ldr	r1, [pc, #896]	; (8000740 <canFilterConfig+0x400>)
 80003be:	2201      	movs	r2, #1
 80003c0:	4393      	bics	r3, r2
 80003c2:	001a      	movs	r2, r3
 80003c4:	2385      	movs	r3, #133	; 0x85
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	50ca      	str	r2, [r1, r3]
  CAN->FFA1R &= ~CAN_FFA1R_FFA1_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 80003ca:	4add      	ldr	r2, [pc, #884]	; (8000740 <canFilterConfig+0x400>)
 80003cc:	2385      	movs	r3, #133	; 0x85
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	58d3      	ldr	r3, [r2, r3]
 80003d2:	49db      	ldr	r1, [pc, #876]	; (8000740 <canFilterConfig+0x400>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	4393      	bics	r3, r2
 80003d8:	001a      	movs	r2, r3
 80003da:	2385      	movs	r3, #133	; 0x85
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	50ca      	str	r2, [r1, r3]
  CAN->FFA1R &= ~CAN_FFA1R_FFA2_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 80003e0:	4ad7      	ldr	r2, [pc, #860]	; (8000740 <canFilterConfig+0x400>)
 80003e2:	2385      	movs	r3, #133	; 0x85
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	58d3      	ldr	r3, [r2, r3]
 80003e8:	49d5      	ldr	r1, [pc, #852]	; (8000740 <canFilterConfig+0x400>)
 80003ea:	2204      	movs	r2, #4
 80003ec:	4393      	bics	r3, r2
 80003ee:	001a      	movs	r2, r3
 80003f0:	2385      	movs	r3, #133	; 0x85
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	50ca      	str	r2, [r1, r3]
  CAN->FFA1R &= ~CAN_FFA1R_FFA3_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 80003f6:	4ad2      	ldr	r2, [pc, #840]	; (8000740 <canFilterConfig+0x400>)
 80003f8:	2385      	movs	r3, #133	; 0x85
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	58d3      	ldr	r3, [r2, r3]
 80003fe:	49d0      	ldr	r1, [pc, #832]	; (8000740 <canFilterConfig+0x400>)
 8000400:	2208      	movs	r2, #8
 8000402:	4393      	bics	r3, r2
 8000404:	001a      	movs	r2, r3
 8000406:	2385      	movs	r3, #133	; 0x85
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	50ca      	str	r2, [r1, r3]
  CAN->FFA1R &= ~CAN_FFA1R_FFA4_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 800040c:	4acc      	ldr	r2, [pc, #816]	; (8000740 <canFilterConfig+0x400>)
 800040e:	2385      	movs	r3, #133	; 0x85
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	58d3      	ldr	r3, [r2, r3]
 8000414:	49ca      	ldr	r1, [pc, #808]	; (8000740 <canFilterConfig+0x400>)
 8000416:	2210      	movs	r2, #16
 8000418:	4393      	bics	r3, r2
 800041a:	001a      	movs	r2, r3
 800041c:	2385      	movs	r3, #133	; 0x85
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	50ca      	str	r2, [r1, r3]
  CAN->FFA1R &= ~CAN_FFA1R_FFA5_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 8000422:	4ac7      	ldr	r2, [pc, #796]	; (8000740 <canFilterConfig+0x400>)
 8000424:	2385      	movs	r3, #133	; 0x85
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	58d3      	ldr	r3, [r2, r3]
 800042a:	49c5      	ldr	r1, [pc, #788]	; (8000740 <canFilterConfig+0x400>)
 800042c:	2220      	movs	r2, #32
 800042e:	4393      	bics	r3, r2
 8000430:	001a      	movs	r2, r3
 8000432:	2385      	movs	r3, #133	; 0x85
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	50ca      	str	r2, [r1, r3]

  CAN->FFA1R |= CAN_FFA1R_FFA6_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 8000438:	4ac1      	ldr	r2, [pc, #772]	; (8000740 <canFilterConfig+0x400>)
 800043a:	2385      	movs	r3, #133	; 0x85
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	58d3      	ldr	r3, [r2, r3]
 8000440:	49bf      	ldr	r1, [pc, #764]	; (8000740 <canFilterConfig+0x400>)
 8000442:	2240      	movs	r2, #64	; 0x40
 8000444:	431a      	orrs	r2, r3
 8000446:	2385      	movs	r3, #133	; 0x85
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	50ca      	str	r2, [r1, r3]
  CAN->FFA1R |= CAN_FFA1R_FFA7_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 800044c:	4abc      	ldr	r2, [pc, #752]	; (8000740 <canFilterConfig+0x400>)
 800044e:	2385      	movs	r3, #133	; 0x85
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	58d3      	ldr	r3, [r2, r3]
 8000454:	49ba      	ldr	r1, [pc, #744]	; (8000740 <canFilterConfig+0x400>)
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	431a      	orrs	r2, r3
 800045a:	2385      	movs	r3, #133	; 0x85
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	50ca      	str	r2, [r1, r3]
  CAN->FFA1R |= CAN_FFA1R_FFA8_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 8000460:	4ab7      	ldr	r2, [pc, #732]	; (8000740 <canFilterConfig+0x400>)
 8000462:	2385      	movs	r3, #133	; 0x85
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	58d3      	ldr	r3, [r2, r3]
 8000468:	49b5      	ldr	r1, [pc, #724]	; (8000740 <canFilterConfig+0x400>)
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	0052      	lsls	r2, r2, #1
 800046e:	431a      	orrs	r2, r3
 8000470:	2385      	movs	r3, #133	; 0x85
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	50ca      	str	r2, [r1, r3]
  CAN->FFA1R |= CAN_FFA1R_FFA9_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 8000476:	4ab2      	ldr	r2, [pc, #712]	; (8000740 <canFilterConfig+0x400>)
 8000478:	2385      	movs	r3, #133	; 0x85
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	58d3      	ldr	r3, [r2, r3]
 800047e:	49b0      	ldr	r1, [pc, #704]	; (8000740 <canFilterConfig+0x400>)
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	0092      	lsls	r2, r2, #2
 8000484:	431a      	orrs	r2, r3
 8000486:	2385      	movs	r3, #133	; 0x85
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	50ca      	str	r2, [r1, r3]
  CAN->FFA1R |= CAN_FFA1R_FFA10_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 800048c:	4aac      	ldr	r2, [pc, #688]	; (8000740 <canFilterConfig+0x400>)
 800048e:	2385      	movs	r3, #133	; 0x85
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	58d3      	ldr	r3, [r2, r3]
 8000494:	49aa      	ldr	r1, [pc, #680]	; (8000740 <canFilterConfig+0x400>)
 8000496:	2280      	movs	r2, #128	; 0x80
 8000498:	00d2      	lsls	r2, r2, #3
 800049a:	431a      	orrs	r2, r3
 800049c:	2385      	movs	r3, #133	; 0x85
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	50ca      	str	r2, [r1, r3]
  CAN->FFA1R |= CAN_FFA1R_FFA11_Msk; // 0: Filter assigned to FIFO 0, 1: Filter assigned to FIFO 1
 80004a2:	4aa7      	ldr	r2, [pc, #668]	; (8000740 <canFilterConfig+0x400>)
 80004a4:	2385      	movs	r3, #133	; 0x85
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	58d3      	ldr	r3, [r2, r3]
 80004aa:	49a5      	ldr	r1, [pc, #660]	; (8000740 <canFilterConfig+0x400>)
 80004ac:	2280      	movs	r2, #128	; 0x80
 80004ae:	0112      	lsls	r2, r2, #4
 80004b0:	431a      	orrs	r2, r3
 80004b2:	2385      	movs	r3, #133	; 0x85
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	50ca      	str	r2, [r1, r3]

  // Activate filter 0 to 5
  CAN->FA1R |= CAN_FA1R_FACT0 | CAN_FA1R_FACT1 | CAN_FA1R_FACT2 | CAN_FA1R_FACT3 | CAN_FA1R_FACT4 | CAN_FA1R_FACT5;
 80004b8:	4aa1      	ldr	r2, [pc, #644]	; (8000740 <canFilterConfig+0x400>)
 80004ba:	2387      	movs	r3, #135	; 0x87
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	58d3      	ldr	r3, [r2, r3]
 80004c0:	499f      	ldr	r1, [pc, #636]	; (8000740 <canFilterConfig+0x400>)
 80004c2:	223f      	movs	r2, #63	; 0x3f
 80004c4:	431a      	orrs	r2, r3
 80004c6:	2387      	movs	r3, #135	; 0x87
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	50ca      	str	r2, [r1, r3]

  // Activate filter 6 to 11
  CAN->FA1R |= CAN_FA1R_FACT6 | CAN_FA1R_FACT7 | CAN_FA1R_FACT8 | CAN_FA1R_FACT9 | CAN_FA1R_FACT10 | CAN_FA1R_FACT11;
 80004cc:	4a9c      	ldr	r2, [pc, #624]	; (8000740 <canFilterConfig+0x400>)
 80004ce:	2387      	movs	r3, #135	; 0x87
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	58d3      	ldr	r3, [r2, r3]
 80004d4:	499a      	ldr	r1, [pc, #616]	; (8000740 <canFilterConfig+0x400>)
 80004d6:	22fc      	movs	r2, #252	; 0xfc
 80004d8:	0112      	lsls	r2, r2, #4
 80004da:	431a      	orrs	r2, r3
 80004dc:	2387      	movs	r3, #135	; 0x87
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	50ca      	str	r2, [r1, r3]
  /********** FIFO 0 **********/
  /* Filter bank 0 register 1 and filter bank 0 register 2 are both identifier registers */
  /* The data frames will be accepted only if the ID is between 0x01 and 0x06 */

  // Filter bank 0 register 1
  CAN->sFilterRegister[0].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 80004e2:	4a97      	ldr	r2, [pc, #604]	; (8000740 <canFilterConfig+0x400>)
 80004e4:	2390      	movs	r3, #144	; 0x90
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	58d3      	ldr	r3, [r2, r3]
 80004ea:	4a95      	ldr	r2, [pc, #596]	; (8000740 <canFilterConfig+0x400>)
 80004ec:	2390      	movs	r3, #144	; 0x90
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	2100      	movs	r1, #0
 80004f2:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[0].FR1 |= (0x01 << CAN_F0R1_FB21_Pos);
 80004f4:	4a92      	ldr	r2, [pc, #584]	; (8000740 <canFilterConfig+0x400>)
 80004f6:	2390      	movs	r3, #144	; 0x90
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	58d3      	ldr	r3, [r2, r3]
 80004fc:	4990      	ldr	r1, [pc, #576]	; (8000740 <canFilterConfig+0x400>)
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	0392      	lsls	r2, r2, #14
 8000502:	431a      	orrs	r2, r3
 8000504:	2390      	movs	r3, #144	; 0x90
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	50ca      	str	r2, [r1, r3]

  // Filter bank 0 register 2
  CAN->sFilterRegister[0].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 800050a:	4a8d      	ldr	r2, [pc, #564]	; (8000740 <canFilterConfig+0x400>)
 800050c:	2391      	movs	r3, #145	; 0x91
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	58d3      	ldr	r3, [r2, r3]
 8000512:	4a8b      	ldr	r2, [pc, #556]	; (8000740 <canFilterConfig+0x400>)
 8000514:	2391      	movs	r3, #145	; 0x91
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	2100      	movs	r1, #0
 800051a:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[0].FR2 |= (0x01 << CAN_F0R2_FB21_Pos); // Identifier is 0x01
 800051c:	4a88      	ldr	r2, [pc, #544]	; (8000740 <canFilterConfig+0x400>)
 800051e:	2391      	movs	r3, #145	; 0x91
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	58d3      	ldr	r3, [r2, r3]
 8000524:	4986      	ldr	r1, [pc, #536]	; (8000740 <canFilterConfig+0x400>)
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	0392      	lsls	r2, r2, #14
 800052a:	431a      	orrs	r2, r3
 800052c:	2391      	movs	r3, #145	; 0x91
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	50ca      	str	r2, [r1, r3]

  // Filter bank 1 register 1
  CAN->sFilterRegister[1].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 8000532:	4a83      	ldr	r2, [pc, #524]	; (8000740 <canFilterConfig+0x400>)
 8000534:	2392      	movs	r3, #146	; 0x92
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	58d3      	ldr	r3, [r2, r3]
 800053a:	4a81      	ldr	r2, [pc, #516]	; (8000740 <canFilterConfig+0x400>)
 800053c:	2392      	movs	r3, #146	; 0x92
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	2100      	movs	r1, #0
 8000542:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[1].FR1 |= (0x02 << CAN_F0R1_FB21_Pos); // Identifier is 0x02
 8000544:	4a7e      	ldr	r2, [pc, #504]	; (8000740 <canFilterConfig+0x400>)
 8000546:	2392      	movs	r3, #146	; 0x92
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	58d3      	ldr	r3, [r2, r3]
 800054c:	497c      	ldr	r1, [pc, #496]	; (8000740 <canFilterConfig+0x400>)
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	03d2      	lsls	r2, r2, #15
 8000552:	431a      	orrs	r2, r3
 8000554:	2392      	movs	r3, #146	; 0x92
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	50ca      	str	r2, [r1, r3]

  // Filter bank 1 register 2
  CAN->sFilterRegister[1].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 800055a:	4a79      	ldr	r2, [pc, #484]	; (8000740 <canFilterConfig+0x400>)
 800055c:	2393      	movs	r3, #147	; 0x93
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	58d3      	ldr	r3, [r2, r3]
 8000562:	4a77      	ldr	r2, [pc, #476]	; (8000740 <canFilterConfig+0x400>)
 8000564:	2393      	movs	r3, #147	; 0x93
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	2100      	movs	r1, #0
 800056a:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[1].FR2 |= (0x02 << CAN_F0R2_FB21_Pos); // Identifier is 0x02
 800056c:	4a74      	ldr	r2, [pc, #464]	; (8000740 <canFilterConfig+0x400>)
 800056e:	2393      	movs	r3, #147	; 0x93
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	58d3      	ldr	r3, [r2, r3]
 8000574:	4972      	ldr	r1, [pc, #456]	; (8000740 <canFilterConfig+0x400>)
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	03d2      	lsls	r2, r2, #15
 800057a:	431a      	orrs	r2, r3
 800057c:	2393      	movs	r3, #147	; 0x93
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	50ca      	str	r2, [r1, r3]

  // Filter bank 2 register 1
  CAN->sFilterRegister[2].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 8000582:	4a6f      	ldr	r2, [pc, #444]	; (8000740 <canFilterConfig+0x400>)
 8000584:	2394      	movs	r3, #148	; 0x94
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	58d3      	ldr	r3, [r2, r3]
 800058a:	4a6d      	ldr	r2, [pc, #436]	; (8000740 <canFilterConfig+0x400>)
 800058c:	2394      	movs	r3, #148	; 0x94
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	2100      	movs	r1, #0
 8000592:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[2].FR1 |= (0x03 << CAN_F0R1_FB21_Pos); // Identifier is 0x03
 8000594:	4a6a      	ldr	r2, [pc, #424]	; (8000740 <canFilterConfig+0x400>)
 8000596:	2394      	movs	r3, #148	; 0x94
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	58d3      	ldr	r3, [r2, r3]
 800059c:	4968      	ldr	r1, [pc, #416]	; (8000740 <canFilterConfig+0x400>)
 800059e:	22c0      	movs	r2, #192	; 0xc0
 80005a0:	03d2      	lsls	r2, r2, #15
 80005a2:	431a      	orrs	r2, r3
 80005a4:	2394      	movs	r3, #148	; 0x94
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	50ca      	str	r2, [r1, r3]

  // Filter bank 2 register 2
  CAN->sFilterRegister[2].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 80005aa:	4a65      	ldr	r2, [pc, #404]	; (8000740 <canFilterConfig+0x400>)
 80005ac:	2395      	movs	r3, #149	; 0x95
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	58d3      	ldr	r3, [r2, r3]
 80005b2:	4a63      	ldr	r2, [pc, #396]	; (8000740 <canFilterConfig+0x400>)
 80005b4:	2395      	movs	r3, #149	; 0x95
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	2100      	movs	r1, #0
 80005ba:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[2].FR2 |= (0x03 << CAN_F0R2_FB21_Pos); // Identifier is 0x03
 80005bc:	4a60      	ldr	r2, [pc, #384]	; (8000740 <canFilterConfig+0x400>)
 80005be:	2395      	movs	r3, #149	; 0x95
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	58d3      	ldr	r3, [r2, r3]
 80005c4:	495e      	ldr	r1, [pc, #376]	; (8000740 <canFilterConfig+0x400>)
 80005c6:	22c0      	movs	r2, #192	; 0xc0
 80005c8:	03d2      	lsls	r2, r2, #15
 80005ca:	431a      	orrs	r2, r3
 80005cc:	2395      	movs	r3, #149	; 0x95
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	50ca      	str	r2, [r1, r3]

  // Filter bank 3 register 1
  CAN->sFilterRegister[3].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 80005d2:	4a5b      	ldr	r2, [pc, #364]	; (8000740 <canFilterConfig+0x400>)
 80005d4:	2396      	movs	r3, #150	; 0x96
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	58d3      	ldr	r3, [r2, r3]
 80005da:	4a59      	ldr	r2, [pc, #356]	; (8000740 <canFilterConfig+0x400>)
 80005dc:	2396      	movs	r3, #150	; 0x96
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	2100      	movs	r1, #0
 80005e2:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[3].FR1 |= (0x04 << CAN_F0R1_FB21_Pos); // Identifier is 0x04
 80005e4:	4a56      	ldr	r2, [pc, #344]	; (8000740 <canFilterConfig+0x400>)
 80005e6:	2396      	movs	r3, #150	; 0x96
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	58d3      	ldr	r3, [r2, r3]
 80005ec:	4954      	ldr	r1, [pc, #336]	; (8000740 <canFilterConfig+0x400>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	0412      	lsls	r2, r2, #16
 80005f2:	431a      	orrs	r2, r3
 80005f4:	2396      	movs	r3, #150	; 0x96
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	50ca      	str	r2, [r1, r3]

  // Filter bank 3 register 2
  CAN->sFilterRegister[3].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 80005fa:	4a51      	ldr	r2, [pc, #324]	; (8000740 <canFilterConfig+0x400>)
 80005fc:	2397      	movs	r3, #151	; 0x97
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	58d3      	ldr	r3, [r2, r3]
 8000602:	4a4f      	ldr	r2, [pc, #316]	; (8000740 <canFilterConfig+0x400>)
 8000604:	2397      	movs	r3, #151	; 0x97
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	2100      	movs	r1, #0
 800060a:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[3].FR2 |= (0x04 << CAN_F0R2_FB21_Pos); // Identifier is 0x04
 800060c:	4a4c      	ldr	r2, [pc, #304]	; (8000740 <canFilterConfig+0x400>)
 800060e:	2397      	movs	r3, #151	; 0x97
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	58d3      	ldr	r3, [r2, r3]
 8000614:	494a      	ldr	r1, [pc, #296]	; (8000740 <canFilterConfig+0x400>)
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	0412      	lsls	r2, r2, #16
 800061a:	431a      	orrs	r2, r3
 800061c:	2397      	movs	r3, #151	; 0x97
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	50ca      	str	r2, [r1, r3]

  // Filter bank 4 register 1
  CAN->sFilterRegister[4].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 8000622:	4a47      	ldr	r2, [pc, #284]	; (8000740 <canFilterConfig+0x400>)
 8000624:	2398      	movs	r3, #152	; 0x98
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	58d3      	ldr	r3, [r2, r3]
 800062a:	4a45      	ldr	r2, [pc, #276]	; (8000740 <canFilterConfig+0x400>)
 800062c:	2398      	movs	r3, #152	; 0x98
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	2100      	movs	r1, #0
 8000632:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[4].FR1 |= (0x05 << CAN_F0R1_FB21_Pos); // Identifier is 0x05
 8000634:	4a42      	ldr	r2, [pc, #264]	; (8000740 <canFilterConfig+0x400>)
 8000636:	2398      	movs	r3, #152	; 0x98
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	58d3      	ldr	r3, [r2, r3]
 800063c:	4940      	ldr	r1, [pc, #256]	; (8000740 <canFilterConfig+0x400>)
 800063e:	22a0      	movs	r2, #160	; 0xa0
 8000640:	0412      	lsls	r2, r2, #16
 8000642:	431a      	orrs	r2, r3
 8000644:	2398      	movs	r3, #152	; 0x98
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	50ca      	str	r2, [r1, r3]

  // Filter bank 4 register 2
  CAN->sFilterRegister[4].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 800064a:	4a3d      	ldr	r2, [pc, #244]	; (8000740 <canFilterConfig+0x400>)
 800064c:	2399      	movs	r3, #153	; 0x99
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	58d3      	ldr	r3, [r2, r3]
 8000652:	4a3b      	ldr	r2, [pc, #236]	; (8000740 <canFilterConfig+0x400>)
 8000654:	2399      	movs	r3, #153	; 0x99
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	2100      	movs	r1, #0
 800065a:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[4].FR2 |= (0x05 << CAN_F0R2_FB21_Pos); // Identifier is 0x05
 800065c:	4a38      	ldr	r2, [pc, #224]	; (8000740 <canFilterConfig+0x400>)
 800065e:	2399      	movs	r3, #153	; 0x99
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	58d3      	ldr	r3, [r2, r3]
 8000664:	4936      	ldr	r1, [pc, #216]	; (8000740 <canFilterConfig+0x400>)
 8000666:	22a0      	movs	r2, #160	; 0xa0
 8000668:	0412      	lsls	r2, r2, #16
 800066a:	431a      	orrs	r2, r3
 800066c:	2399      	movs	r3, #153	; 0x99
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	50ca      	str	r2, [r1, r3]

  // Filter bank 5 register 1
  CAN->sFilterRegister[5].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 8000672:	4a33      	ldr	r2, [pc, #204]	; (8000740 <canFilterConfig+0x400>)
 8000674:	239a      	movs	r3, #154	; 0x9a
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	58d3      	ldr	r3, [r2, r3]
 800067a:	4a31      	ldr	r2, [pc, #196]	; (8000740 <canFilterConfig+0x400>)
 800067c:	239a      	movs	r3, #154	; 0x9a
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	2100      	movs	r1, #0
 8000682:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[5].FR1 |= (0x06 << CAN_F0R1_FB21_Pos); // Identifier is 0x06
 8000684:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <canFilterConfig+0x400>)
 8000686:	239a      	movs	r3, #154	; 0x9a
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	58d3      	ldr	r3, [r2, r3]
 800068c:	492c      	ldr	r1, [pc, #176]	; (8000740 <canFilterConfig+0x400>)
 800068e:	22c0      	movs	r2, #192	; 0xc0
 8000690:	0412      	lsls	r2, r2, #16
 8000692:	431a      	orrs	r2, r3
 8000694:	239a      	movs	r3, #154	; 0x9a
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	50ca      	str	r2, [r1, r3]

  // Filter bank 5 register 2
  CAN->sFilterRegister[5].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 800069a:	4a29      	ldr	r2, [pc, #164]	; (8000740 <canFilterConfig+0x400>)
 800069c:	239b      	movs	r3, #155	; 0x9b
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	58d3      	ldr	r3, [r2, r3]
 80006a2:	4a27      	ldr	r2, [pc, #156]	; (8000740 <canFilterConfig+0x400>)
 80006a4:	239b      	movs	r3, #155	; 0x9b
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	2100      	movs	r1, #0
 80006aa:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[5].FR2 |= (0x06 << CAN_F0R2_FB21_Pos); // Identifier is 0x06
 80006ac:	4a24      	ldr	r2, [pc, #144]	; (8000740 <canFilterConfig+0x400>)
 80006ae:	239b      	movs	r3, #155	; 0x9b
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	58d3      	ldr	r3, [r2, r3]
 80006b4:	4922      	ldr	r1, [pc, #136]	; (8000740 <canFilterConfig+0x400>)
 80006b6:	22c0      	movs	r2, #192	; 0xc0
 80006b8:	0412      	lsls	r2, r2, #16
 80006ba:	431a      	orrs	r2, r3
 80006bc:	239b      	movs	r3, #155	; 0x9b
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	50ca      	str	r2, [r1, r3]

  /* Filter bank 0 register 1 and filter bank 0 register 2 are both identifier registers */
  /* The data frames will be accepted only if the ID is between 0x01 and 0x06 */

  // Filter bank 6 register 1
  CAN->sFilterRegister[6].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <canFilterConfig+0x400>)
 80006c4:	239c      	movs	r3, #156	; 0x9c
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	58d3      	ldr	r3, [r2, r3]
 80006ca:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <canFilterConfig+0x400>)
 80006cc:	239c      	movs	r3, #156	; 0x9c
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	2100      	movs	r1, #0
 80006d2:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[6].FR1 |= (0x01 << CAN_F0R1_FB21_Pos); // Identifier is 0x01
 80006d4:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <canFilterConfig+0x400>)
 80006d6:	239c      	movs	r3, #156	; 0x9c
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	58d3      	ldr	r3, [r2, r3]
 80006dc:	4918      	ldr	r1, [pc, #96]	; (8000740 <canFilterConfig+0x400>)
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0392      	lsls	r2, r2, #14
 80006e2:	431a      	orrs	r2, r3
 80006e4:	239c      	movs	r3, #156	; 0x9c
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	50ca      	str	r2, [r1, r3]

  // Filter bank 6 register 2
  CAN->sFilterRegister[6].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <canFilterConfig+0x400>)
 80006ec:	239d      	movs	r3, #157	; 0x9d
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	58d3      	ldr	r3, [r2, r3]
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <canFilterConfig+0x400>)
 80006f4:	239d      	movs	r3, #157	; 0x9d
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	2100      	movs	r1, #0
 80006fa:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[6].FR2 |= (0x01 << CAN_F0R2_FB21_Pos); // Identifier is 0x01
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <canFilterConfig+0x400>)
 80006fe:	239d      	movs	r3, #157	; 0x9d
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	58d3      	ldr	r3, [r2, r3]
 8000704:	490e      	ldr	r1, [pc, #56]	; (8000740 <canFilterConfig+0x400>)
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0392      	lsls	r2, r2, #14
 800070a:	431a      	orrs	r2, r3
 800070c:	239d      	movs	r3, #157	; 0x9d
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	50ca      	str	r2, [r1, r3]

  // Filter bank 7 register 1
  CAN->sFilterRegister[7].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <canFilterConfig+0x400>)
 8000714:	239e      	movs	r3, #158	; 0x9e
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	58d3      	ldr	r3, [r2, r3]
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <canFilterConfig+0x400>)
 800071c:	239e      	movs	r3, #158	; 0x9e
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	2100      	movs	r1, #0
 8000722:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[7].FR1 |= (0x02 << CAN_F0R1_FB21_Pos); // Identifier is 0x02
 8000724:	4a06      	ldr	r2, [pc, #24]	; (8000740 <canFilterConfig+0x400>)
 8000726:	239e      	movs	r3, #158	; 0x9e
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	58d3      	ldr	r3, [r2, r3]
 800072c:	4904      	ldr	r1, [pc, #16]	; (8000740 <canFilterConfig+0x400>)
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	03d2      	lsls	r2, r2, #15
 8000732:	431a      	orrs	r2, r3
 8000734:	239e      	movs	r3, #158	; 0x9e
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	50ca      	str	r2, [r1, r3]
 800073a:	e003      	b.n	8000744 <canFilterConfig+0x404>
 800073c:	08002a6c 	.word	0x08002a6c
 8000740:	40006400 	.word	0x40006400

  // Filter bank 7 register 2
  CAN->sFilterRegister[7].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 8000744:	4a62      	ldr	r2, [pc, #392]	; (80008d0 <canFilterConfig+0x590>)
 8000746:	239f      	movs	r3, #159	; 0x9f
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	58d3      	ldr	r3, [r2, r3]
 800074c:	4a60      	ldr	r2, [pc, #384]	; (80008d0 <canFilterConfig+0x590>)
 800074e:	239f      	movs	r3, #159	; 0x9f
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	2100      	movs	r1, #0
 8000754:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[7].FR2 |= (0x02 << CAN_F0R2_FB21_Pos); // Identifier is 0x02
 8000756:	4a5e      	ldr	r2, [pc, #376]	; (80008d0 <canFilterConfig+0x590>)
 8000758:	239f      	movs	r3, #159	; 0x9f
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	58d3      	ldr	r3, [r2, r3]
 800075e:	495c      	ldr	r1, [pc, #368]	; (80008d0 <canFilterConfig+0x590>)
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	03d2      	lsls	r2, r2, #15
 8000764:	431a      	orrs	r2, r3
 8000766:	239f      	movs	r3, #159	; 0x9f
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	50ca      	str	r2, [r1, r3]

  // Filter bank 8 register 1
  CAN->sFilterRegister[8].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 800076c:	4a58      	ldr	r2, [pc, #352]	; (80008d0 <canFilterConfig+0x590>)
 800076e:	23a0      	movs	r3, #160	; 0xa0
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	58d3      	ldr	r3, [r2, r3]
 8000774:	4a56      	ldr	r2, [pc, #344]	; (80008d0 <canFilterConfig+0x590>)
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	2100      	movs	r1, #0
 800077c:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[8].FR1 |= (0x03 << CAN_F0R1_FB21_Pos); // Identifier is 0x03
 800077e:	4a54      	ldr	r2, [pc, #336]	; (80008d0 <canFilterConfig+0x590>)
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	58d3      	ldr	r3, [r2, r3]
 8000786:	4952      	ldr	r1, [pc, #328]	; (80008d0 <canFilterConfig+0x590>)
 8000788:	22c0      	movs	r2, #192	; 0xc0
 800078a:	03d2      	lsls	r2, r2, #15
 800078c:	431a      	orrs	r2, r3
 800078e:	23a0      	movs	r3, #160	; 0xa0
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	50ca      	str	r2, [r1, r3]

  // Filter bank 8 register 2
  CAN->sFilterRegister[8].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 8000794:	4a4e      	ldr	r2, [pc, #312]	; (80008d0 <canFilterConfig+0x590>)
 8000796:	23a1      	movs	r3, #161	; 0xa1
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	58d3      	ldr	r3, [r2, r3]
 800079c:	4a4c      	ldr	r2, [pc, #304]	; (80008d0 <canFilterConfig+0x590>)
 800079e:	23a1      	movs	r3, #161	; 0xa1
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	2100      	movs	r1, #0
 80007a4:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[8].FR2 |= (0x03 << CAN_F0R2_FB21_Pos); // Identifier is 0x03
 80007a6:	4a4a      	ldr	r2, [pc, #296]	; (80008d0 <canFilterConfig+0x590>)
 80007a8:	23a1      	movs	r3, #161	; 0xa1
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	58d3      	ldr	r3, [r2, r3]
 80007ae:	4948      	ldr	r1, [pc, #288]	; (80008d0 <canFilterConfig+0x590>)
 80007b0:	22c0      	movs	r2, #192	; 0xc0
 80007b2:	03d2      	lsls	r2, r2, #15
 80007b4:	431a      	orrs	r2, r3
 80007b6:	23a1      	movs	r3, #161	; 0xa1
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	50ca      	str	r2, [r1, r3]

  // Filter bank 9 register 1
  CAN->sFilterRegister[9].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 80007bc:	4a44      	ldr	r2, [pc, #272]	; (80008d0 <canFilterConfig+0x590>)
 80007be:	23a2      	movs	r3, #162	; 0xa2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	58d3      	ldr	r3, [r2, r3]
 80007c4:	4a42      	ldr	r2, [pc, #264]	; (80008d0 <canFilterConfig+0x590>)
 80007c6:	23a2      	movs	r3, #162	; 0xa2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	2100      	movs	r1, #0
 80007cc:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[9].FR1 |= (0x04 << CAN_F0R1_FB21_Pos); // Identifier is 0x04
 80007ce:	4a40      	ldr	r2, [pc, #256]	; (80008d0 <canFilterConfig+0x590>)
 80007d0:	23a2      	movs	r3, #162	; 0xa2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	58d3      	ldr	r3, [r2, r3]
 80007d6:	493e      	ldr	r1, [pc, #248]	; (80008d0 <canFilterConfig+0x590>)
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	0412      	lsls	r2, r2, #16
 80007dc:	431a      	orrs	r2, r3
 80007de:	23a2      	movs	r3, #162	; 0xa2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	50ca      	str	r2, [r1, r3]

  // Filter bank 9 register 2
  CAN->sFilterRegister[9].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 80007e4:	4a3a      	ldr	r2, [pc, #232]	; (80008d0 <canFilterConfig+0x590>)
 80007e6:	23a3      	movs	r3, #163	; 0xa3
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	58d3      	ldr	r3, [r2, r3]
 80007ec:	4a38      	ldr	r2, [pc, #224]	; (80008d0 <canFilterConfig+0x590>)
 80007ee:	23a3      	movs	r3, #163	; 0xa3
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	2100      	movs	r1, #0
 80007f4:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[9].FR2 |= (0x04 << CAN_F0R2_FB21_Pos); // Identifier is 0x04
 80007f6:	4a36      	ldr	r2, [pc, #216]	; (80008d0 <canFilterConfig+0x590>)
 80007f8:	23a3      	movs	r3, #163	; 0xa3
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	58d3      	ldr	r3, [r2, r3]
 80007fe:	4934      	ldr	r1, [pc, #208]	; (80008d0 <canFilterConfig+0x590>)
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	0412      	lsls	r2, r2, #16
 8000804:	431a      	orrs	r2, r3
 8000806:	23a3      	movs	r3, #163	; 0xa3
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	50ca      	str	r2, [r1, r3]

  // Filter bank 10 register 1
  CAN->sFilterRegister[10].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 800080c:	4a30      	ldr	r2, [pc, #192]	; (80008d0 <canFilterConfig+0x590>)
 800080e:	23a4      	movs	r3, #164	; 0xa4
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	58d3      	ldr	r3, [r2, r3]
 8000814:	4a2e      	ldr	r2, [pc, #184]	; (80008d0 <canFilterConfig+0x590>)
 8000816:	23a4      	movs	r3, #164	; 0xa4
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	2100      	movs	r1, #0
 800081c:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[10].FR1 |= (0x05 << CAN_F0R1_FB21_Pos); // Identifier is 0x05
 800081e:	4a2c      	ldr	r2, [pc, #176]	; (80008d0 <canFilterConfig+0x590>)
 8000820:	23a4      	movs	r3, #164	; 0xa4
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	58d3      	ldr	r3, [r2, r3]
 8000826:	492a      	ldr	r1, [pc, #168]	; (80008d0 <canFilterConfig+0x590>)
 8000828:	22a0      	movs	r2, #160	; 0xa0
 800082a:	0412      	lsls	r2, r2, #16
 800082c:	431a      	orrs	r2, r3
 800082e:	23a4      	movs	r3, #164	; 0xa4
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	50ca      	str	r2, [r1, r3]

  // Filter bank 10 register 2
  CAN->sFilterRegister[10].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 8000834:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <canFilterConfig+0x590>)
 8000836:	23a5      	movs	r3, #165	; 0xa5
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	58d3      	ldr	r3, [r2, r3]
 800083c:	4a24      	ldr	r2, [pc, #144]	; (80008d0 <canFilterConfig+0x590>)
 800083e:	23a5      	movs	r3, #165	; 0xa5
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	2100      	movs	r1, #0
 8000844:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[10].FR2 |= (0x05 << CAN_F0R2_FB21_Pos); // Identifier is 0x05
 8000846:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <canFilterConfig+0x590>)
 8000848:	23a5      	movs	r3, #165	; 0xa5
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	58d3      	ldr	r3, [r2, r3]
 800084e:	4920      	ldr	r1, [pc, #128]	; (80008d0 <canFilterConfig+0x590>)
 8000850:	22a0      	movs	r2, #160	; 0xa0
 8000852:	0412      	lsls	r2, r2, #16
 8000854:	431a      	orrs	r2, r3
 8000856:	23a5      	movs	r3, #165	; 0xa5
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	50ca      	str	r2, [r1, r3]

  // Filter bank 11 register 1
  CAN->sFilterRegister[11].FR1 &= ~(0xFFFFFFFF << CAN_F0R1_FB0_Pos); // Clear
 800085c:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <canFilterConfig+0x590>)
 800085e:	23a6      	movs	r3, #166	; 0xa6
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	58d3      	ldr	r3, [r2, r3]
 8000864:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <canFilterConfig+0x590>)
 8000866:	23a6      	movs	r3, #166	; 0xa6
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	2100      	movs	r1, #0
 800086c:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[11].FR1 |= (0x06 << CAN_F0R1_FB21_Pos); // Identifier is 0x06
 800086e:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <canFilterConfig+0x590>)
 8000870:	23a6      	movs	r3, #166	; 0xa6
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	58d3      	ldr	r3, [r2, r3]
 8000876:	4916      	ldr	r1, [pc, #88]	; (80008d0 <canFilterConfig+0x590>)
 8000878:	22c0      	movs	r2, #192	; 0xc0
 800087a:	0412      	lsls	r2, r2, #16
 800087c:	431a      	orrs	r2, r3
 800087e:	23a6      	movs	r3, #166	; 0xa6
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	50ca      	str	r2, [r1, r3]

  // Filter bank 5 register 2
  CAN->sFilterRegister[11].FR2 &= ~(0xFFFFFFFF << CAN_F0R2_FB0_Pos); // Clear
 8000884:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <canFilterConfig+0x590>)
 8000886:	23a7      	movs	r3, #167	; 0xa7
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	58d3      	ldr	r3, [r2, r3]
 800088c:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <canFilterConfig+0x590>)
 800088e:	23a7      	movs	r3, #167	; 0xa7
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	2100      	movs	r1, #0
 8000894:	50d1      	str	r1, [r2, r3]
  CAN->sFilterRegister[11].FR2 |= (0x06 << CAN_F0R2_FB21_Pos); // Identifier is 0x06
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <canFilterConfig+0x590>)
 8000898:	23a7      	movs	r3, #167	; 0xa7
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	58d3      	ldr	r3, [r2, r3]
 800089e:	490c      	ldr	r1, [pc, #48]	; (80008d0 <canFilterConfig+0x590>)
 80008a0:	22c0      	movs	r2, #192	; 0xc0
 80008a2:	0412      	lsls	r2, r2, #16
 80008a4:	431a      	orrs	r2, r3
 80008a6:	23a7      	movs	r3, #167	; 0xa7
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	50ca      	str	r2, [r1, r3]

  // Leave filter initialization mode
  CAN->FMR &=~ CAN_FMR_FINIT;
 80008ac:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <canFilterConfig+0x590>)
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	58d3      	ldr	r3, [r2, r3]
 80008b4:	4906      	ldr	r1, [pc, #24]	; (80008d0 <canFilterConfig+0x590>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	4393      	bics	r3, r2
 80008ba:	001a      	movs	r2, r3
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	50ca      	str	r2, [r1, r3]

  printf("CAN FILTER CONFIGURATION OK\r\n");
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <canFilterConfig+0x594>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 feb9 	bl	800163c <puts>

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40006400 	.word	0x40006400
 80008d4:	08002a9c 	.word	0x08002a9c

080008d8 <canInit>:

/******************* Initialize the CAN peripheral ********************/

void canInit(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  printf("********** CAN INITIALIZATION **********\r\n");
 80008dc:	4b9b      	ldr	r3, [pc, #620]	; (8000b4c <canInit+0x274>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 feac 	bl	800163c <puts>

  // Enable the clock for the GPIOA at 8 Mhz
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80008e4:	4b9a      	ldr	r3, [pc, #616]	; (8000b50 <canInit+0x278>)
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	4b99      	ldr	r3, [pc, #612]	; (8000b50 <canInit+0x278>)
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	0289      	lsls	r1, r1, #10
 80008ee:	430a      	orrs	r2, r1
 80008f0:	615a      	str	r2, [r3, #20]

  // Enable the clock for the CAN at 8 Mhz
  RCC->APB1ENR |= RCC_APB1ENR_CANEN;
 80008f2:	4b97      	ldr	r3, [pc, #604]	; (8000b50 <canInit+0x278>)
 80008f4:	69da      	ldr	r2, [r3, #28]
 80008f6:	4b96      	ldr	r3, [pc, #600]	; (8000b50 <canInit+0x278>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0489      	lsls	r1, r1, #18
 80008fc:	430a      	orrs	r2, r1
 80008fe:	61da      	str	r2, [r3, #28]

  /* PA12 is the TX pin and PA11 is the RX pin */

  // Activate PA12 mode to alternate function
  GPIOA->MODER &= ~GPIO_MODER_MODER12_Msk; // Clear
 8000900:	2390      	movs	r3, #144	; 0x90
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	2390      	movs	r3, #144	; 0x90
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	4992      	ldr	r1, [pc, #584]	; (8000b54 <canInit+0x27c>)
 800090c:	400a      	ands	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER12_Pos); // 00: Input mode (reset state), 01: General purpose output mode, 10 : Alternate function mode, 11: Analog mode
 8000910:	2390      	movs	r3, #144	; 0x90
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	0489      	lsls	r1, r1, #18
 800091e:	430a      	orrs	r2, r1
 8000920:	601a      	str	r2, [r3, #0]

  // Configure PA12 as High-Speed Output
  GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR12_Msk;
 8000922:	2390      	movs	r3, #144	; 0x90
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	2390      	movs	r3, #144	; 0x90
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	4989      	ldr	r1, [pc, #548]	; (8000b54 <canInit+0x27c>)
 800092e:	400a      	ands	r2, r1
 8000930:	609a      	str	r2, [r3, #8]
  GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR12_Pos); // x0: Low speed, 01: Medium speed, 11: High speed
 8000932:	2390      	movs	r3, #144	; 0x90
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	2390      	movs	r3, #144	; 0x90
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	21c0      	movs	r1, #192	; 0xc0
 800093e:	0489      	lsls	r1, r1, #18
 8000940:	430a      	orrs	r2, r1
 8000942:	609a      	str	r2, [r3, #8]

  // Disable PA12 Pull-up/Pull-down
  GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR12_Msk; // 00: No pull-up, pull-down, 01: Pull-up, 10: Pull-down, 11: Reserved
 8000944:	2390      	movs	r3, #144	; 0x90
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	2390      	movs	r3, #144	; 0x90
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	4981      	ldr	r1, [pc, #516]	; (8000b54 <canInit+0x27c>)
 8000950:	400a      	ands	r2, r1
 8000952:	60da      	str	r2, [r3, #12]

  // Alternative mapping for PA12
  GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL12_Msk; // Clear
 8000954:	2390      	movs	r3, #144	; 0x90
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800095a:	2390      	movs	r3, #144	; 0x90
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	497e      	ldr	r1, [pc, #504]	; (8000b58 <canInit+0x280>)
 8000960:	400a      	ands	r2, r1
 8000962:	625a      	str	r2, [r3, #36]	; 0x24
  GPIOA->AFR[1] |= (0x04 << GPIO_AFRH_AFSEL12_Pos); // Alternate function as TX pin for the CAN
 8000964:	2390      	movs	r3, #144	; 0x90
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800096a:	2390      	movs	r3, #144	; 0x90
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	02c9      	lsls	r1, r1, #11
 8000972:	430a      	orrs	r2, r1
 8000974:	625a      	str	r2, [r3, #36]	; 0x24

  //Activate PA11 mode to alternate function
  GPIOA->MODER &= ~GPIO_MODER_MODER11_Msk; // Clear
 8000976:	2390      	movs	r3, #144	; 0x90
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2390      	movs	r3, #144	; 0x90
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	4976      	ldr	r1, [pc, #472]	; (8000b5c <canInit+0x284>)
 8000982:	400a      	ands	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER11_Pos); // 00: Input mode (reset state), 01: General purpose output mode, 10 : Alternate function mode, 11: Analog mode
 8000986:	2390      	movs	r3, #144	; 0x90
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2390      	movs	r3, #144	; 0x90
 800098e:	05db      	lsls	r3, r3, #23
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0409      	lsls	r1, r1, #16
 8000994:	430a      	orrs	r2, r1
 8000996:	601a      	str	r2, [r3, #0]

  // Configure PA11 as High-Speed Output
  GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR11_Msk; // Clear
 8000998:	2390      	movs	r3, #144	; 0x90
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	2390      	movs	r3, #144	; 0x90
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	496e      	ldr	r1, [pc, #440]	; (8000b5c <canInit+0x284>)
 80009a4:	400a      	ands	r2, r1
 80009a6:	609a      	str	r2, [r3, #8]
  GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR11_Pos); // x0: Low speed, 01: Medium speed, 11: High speed
 80009a8:	2390      	movs	r3, #144	; 0x90
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	2390      	movs	r3, #144	; 0x90
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	21c0      	movs	r1, #192	; 0xc0
 80009b4:	0409      	lsls	r1, r1, #16
 80009b6:	430a      	orrs	r2, r1
 80009b8:	609a      	str	r2, [r3, #8]

  // Disable PA11 Pull-up/Pull-down
  GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR11_Msk; // 00: No pull-up, pull-down, 01: Pull-up, 10: Pull-down, 11: Reserved
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	2390      	movs	r3, #144	; 0x90
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	4965      	ldr	r1, [pc, #404]	; (8000b5c <canInit+0x284>)
 80009c6:	400a      	ands	r2, r1
 80009c8:	60da      	str	r2, [r3, #12]

  // Alternative mapping for PA11
  GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL11_Msk; // Clear
 80009ca:	2390      	movs	r3, #144	; 0x90
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009d0:	2390      	movs	r3, #144	; 0x90
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	4962      	ldr	r1, [pc, #392]	; (8000b60 <canInit+0x288>)
 80009d6:	400a      	ands	r2, r1
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  GPIOA->AFR[1] |= (0x04 << GPIO_AFRH_AFSEL11_Pos); // Alternate function as RX pin for the CAN
 80009da:	2390      	movs	r3, #144	; 0x90
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009e0:	2390      	movs	r3, #144	; 0x90
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	01c9      	lsls	r1, r1, #7
 80009e8:	430a      	orrs	r2, r1
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24

  // Exit freeze mode while using DEBUG
  CAN->MCR &= ~CAN_MCR_DBF_Msk;
 80009ec:	4b5d      	ldr	r3, [pc, #372]	; (8000b64 <canInit+0x28c>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b5c      	ldr	r3, [pc, #368]	; (8000b64 <canInit+0x28c>)
 80009f2:	495d      	ldr	r1, [pc, #372]	; (8000b68 <canInit+0x290>)
 80009f4:	400a      	ands	r2, r1
 80009f6:	601a      	str	r2, [r3, #0]

  // Initialization request for the CAN
  CAN->MCR |= CAN_MCR_INRQ;
 80009f8:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <canInit+0x28c>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b59      	ldr	r3, [pc, #356]	; (8000b64 <canInit+0x28c>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	430a      	orrs	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]

  while ( (CAN->MSR & CAN_MSR_INAK) != CAN_MSR_INAK){
 8000a04:	e003      	b.n	8000a0e <canInit+0x136>

    printf("Wait until INAK bit is set to enter in can initialization mode\r\n");
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <canInit+0x294>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fe17 	bl	800163c <puts>
  while ( (CAN->MSR & CAN_MSR_INAK) != CAN_MSR_INAK){
 8000a0e:	4b55      	ldr	r3, [pc, #340]	; (8000b64 <canInit+0x28c>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	4013      	ands	r3, r2
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d1f5      	bne.n	8000a06 <canInit+0x12e>
  } // Wait until we reach initialization mode

  // Exit from sleep mode
  CAN->MCR &= ~CAN_MCR_SLEEP;
 8000a1a:	4b52      	ldr	r3, [pc, #328]	; (8000b64 <canInit+0x28c>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b51      	ldr	r3, [pc, #324]	; (8000b64 <canInit+0x28c>)
 8000a20:	2102      	movs	r1, #2
 8000a22:	438a      	bics	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]

  // Time triggered mode disable
  CAN->MCR &= ~CAN_MCR_TTCM;
 8000a26:	4b4f      	ldr	r3, [pc, #316]	; (8000b64 <canInit+0x28c>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <canInit+0x28c>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	438a      	bics	r2, r1
 8000a30:	601a      	str	r2, [r3, #0]

  // Automatic retransmission diseable
  CAN->MCR |= CAN_MCR_NART;
 8000a32:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <canInit+0x28c>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4b4b      	ldr	r3, [pc, #300]	; (8000b64 <canInit+0x28c>)
 8000a38:	2110      	movs	r1, #16
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	601a      	str	r2, [r3, #0]

  // Receive fifo locked disable
  CAN->MCR &= ~CAN_MCR_RFLM;
 8000a3e:	4b49      	ldr	r3, [pc, #292]	; (8000b64 <canInit+0x28c>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <canInit+0x28c>)
 8000a44:	2108      	movs	r1, #8
 8000a46:	438a      	bics	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]

  // Auto wake up disable
  CAN->MCR &= ~CAN_MCR_AWUM;
 8000a4a:	4b46      	ldr	r3, [pc, #280]	; (8000b64 <canInit+0x28c>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <canInit+0x28c>)
 8000a50:	2120      	movs	r1, #32
 8000a52:	438a      	bics	r2, r1
 8000a54:	601a      	str	r2, [r3, #0]

  // Transmit fifo priority disable
  CAN->MCR &= ~CAN_MCR_TXFP;
 8000a56:	4b43      	ldr	r3, [pc, #268]	; (8000b64 <canInit+0x28c>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	4b42      	ldr	r3, [pc, #264]	; (8000b64 <canInit+0x28c>)
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	438a      	bics	r2, r1
 8000a60:	601a      	str	r2, [r3, #0]

  // Normal mode
  CAN->BTR &= ~CAN_BTR_LBKM_Msk; // 0: Loop Back Mode disabled, 1: Loop Back Mode enabled
 8000a62:	4b40      	ldr	r3, [pc, #256]	; (8000b64 <canInit+0x28c>)
 8000a64:	69da      	ldr	r2, [r3, #28]
 8000a66:	4b3f      	ldr	r3, [pc, #252]	; (8000b64 <canInit+0x28c>)
 8000a68:	4941      	ldr	r1, [pc, #260]	; (8000b70 <canInit+0x298>)
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	61da      	str	r2, [r3, #28]
  CAN->BTR &= ~CAN_BTR_SILM_Msk; // 0: Normal operation, 1: Silent Mode
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <canInit+0x28c>)
 8000a70:	69da      	ldr	r2, [r3, #28]
 8000a72:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <canInit+0x28c>)
 8000a74:	0052      	lsls	r2, r2, #1
 8000a76:	0852      	lsrs	r2, r2, #1
 8000a78:	61da      	str	r2, [r3, #28]

  /* The bit timing are given from this website : http://www.bittiming.can-wiki.info */

  // Synchronization segment of 1 TQ
  CAN->BTR &= ~CAN_BTR_SJW_Msk;
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <canInit+0x28c>)
 8000a7c:	69da      	ldr	r2, [r3, #28]
 8000a7e:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <canInit+0x28c>)
 8000a80:	4934      	ldr	r1, [pc, #208]	; (8000b54 <canInit+0x27c>)
 8000a82:	400a      	ands	r2, r1
 8000a84:	61da      	str	r2, [r3, #28]
  CAN->BTR |= ( (0x01 - 0x01) << CAN_BTR_SJW_Pos );
 8000a86:	4a37      	ldr	r2, [pc, #220]	; (8000b64 <canInit+0x28c>)
 8000a88:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <canInit+0x28c>)
 8000a8a:	69d2      	ldr	r2, [r2, #28]
 8000a8c:	61da      	str	r2, [r3, #28]

  // Prescaler of 1
  CAN->BTR &= ~CAN_BTR_BRP_Msk;
 8000a8e:	4b35      	ldr	r3, [pc, #212]	; (8000b64 <canInit+0x28c>)
 8000a90:	69da      	ldr	r2, [r3, #28]
 8000a92:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <canInit+0x28c>)
 8000a94:	0a92      	lsrs	r2, r2, #10
 8000a96:	0292      	lsls	r2, r2, #10
 8000a98:	61da      	str	r2, [r3, #28]
  CAN->BTR |= ( (0x01 - 0x01) << CAN_BTR_BRP_Pos );
 8000a9a:	4a32      	ldr	r2, [pc, #200]	; (8000b64 <canInit+0x28c>)
 8000a9c:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <canInit+0x28c>)
 8000a9e:	69d2      	ldr	r2, [r2, #28]
 8000aa0:	61da      	str	r2, [r3, #28]

  // Segment 2 of 2 TQ
  CAN->BTR &= ~CAN_BTR_TS2_Msk; // Clear
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <canInit+0x28c>)
 8000aa4:	69da      	ldr	r2, [r3, #28]
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <canInit+0x28c>)
 8000aa8:	4932      	ldr	r1, [pc, #200]	; (8000b74 <canInit+0x29c>)
 8000aaa:	400a      	ands	r2, r1
 8000aac:	61da      	str	r2, [r3, #28]
  CAN->BTR |= ( (0x02 - 0x01) << CAN_BTR_TS2_Pos );
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <canInit+0x28c>)
 8000ab0:	69da      	ldr	r2, [r3, #28]
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <canInit+0x28c>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0349      	lsls	r1, r1, #13
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	61da      	str	r2, [r3, #28]

  // Segment 1 of 13 TQ
  CAN->BTR &= ~CAN_BTR_TS1_Msk; // Clear
 8000abc:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <canInit+0x28c>)
 8000abe:	69da      	ldr	r2, [r3, #28]
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <canInit+0x28c>)
 8000ac2:	4925      	ldr	r1, [pc, #148]	; (8000b58 <canInit+0x280>)
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	61da      	str	r2, [r3, #28]
  CAN->BTR |= ( (0x0D - 0x01) << CAN_BTR_TS1_Pos );
 8000ac8:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <canInit+0x28c>)
 8000aca:	69da      	ldr	r2, [r3, #28]
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <canInit+0x28c>)
 8000ace:	21c0      	movs	r1, #192	; 0xc0
 8000ad0:	0309      	lsls	r1, r1, #12
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	61da      	str	r2, [r3, #28]

  canFilterConfig();
 8000ad6:	f7ff fc33 	bl	8000340 <canFilterConfig>

  // Configure the sources of interruption
  CAN->IER |= CAN_IER_TMEIE; // Interruption on completed transmission request (ok, arbitration loss, abort and error)
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <canInit+0x28c>)
 8000adc:	695a      	ldr	r2, [r3, #20]
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <canInit+0x28c>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	615a      	str	r2, [r3, #20]
  CAN->IER |= CAN_IER_FMPIE0; // Interruption on message pending into the fifo 0
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <canInit+0x28c>)
 8000ae8:	695a      	ldr	r2, [r3, #20]
 8000aea:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <canInit+0x28c>)
 8000aec:	2102      	movs	r1, #2
 8000aee:	430a      	orrs	r2, r1
 8000af0:	615a      	str	r2, [r3, #20]
  CAN->IER |= CAN_IER_FMPIE1; // Interruption on message pending into the fifo 1
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <canInit+0x28c>)
 8000af4:	695a      	ldr	r2, [r3, #20]
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <canInit+0x28c>)
 8000af8:	2110      	movs	r1, #16
 8000afa:	430a      	orrs	r2, r1
 8000afc:	615a      	str	r2, [r3, #20]
  CAN->IER |= CAN_IER_ERRIE; // Interruption on message pending into the fifo 1CAN->IER |= CAN_IER_ERRIE; // Interruption on message pending into the fifo 1
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <canInit+0x28c>)
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <canInit+0x28c>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	0209      	lsls	r1, r1, #8
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	615a      	str	r2, [r3, #20]
  CAN->IER |= CAN_IER_LECIE; // Interruption on message pending into the fifo 1
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <canInit+0x28c>)
 8000b0e:	695a      	ldr	r2, [r3, #20]
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <canInit+0x28c>)
 8000b12:	2180      	movs	r1, #128	; 0x80
 8000b14:	0109      	lsls	r1, r1, #4
 8000b16:	430a      	orrs	r2, r1
 8000b18:	615a      	str	r2, [r3, #20]


  // Request exit from initialization mode
  CAN->MCR &= ~CAN_MCR_INRQ;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <canInit+0x28c>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <canInit+0x28c>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	438a      	bics	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]

  while ((CAN->MSR & CAN_MSR_INAK) == CAN_MSR_INAK){
 8000b26:	e003      	b.n	8000b30 <canInit+0x258>
    printf("Wait until INAK bit is clear to exit from can initialization mode\r\n");
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <canInit+0x2a0>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fd86 	bl	800163c <puts>
  while ((CAN->MSR & CAN_MSR_INAK) == CAN_MSR_INAK){
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <canInit+0x28c>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2201      	movs	r2, #1
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d0f5      	beq.n	8000b28 <canInit+0x250>
  } // Wait until we quit initialization mode

  printf("CAN INITIALIZATION OK\r\n");
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <canInit+0x2a4>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fd7c 	bl	800163c <puts>

}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	08002abc 	.word	0x08002abc
 8000b50:	40021000 	.word	0x40021000
 8000b54:	fcffffff 	.word	0xfcffffff
 8000b58:	fff0ffff 	.word	0xfff0ffff
 8000b5c:	ff3fffff 	.word	0xff3fffff
 8000b60:	ffff0fff 	.word	0xffff0fff
 8000b64:	40006400 	.word	0x40006400
 8000b68:	fffeffff 	.word	0xfffeffff
 8000b6c:	08002ae8 	.word	0x08002ae8
 8000b70:	bfffffff 	.word	0xbfffffff
 8000b74:	ff8fffff 	.word	0xff8fffff
 8000b78:	08002b28 	.word	0x08002b28
 8000b7c:	08002b6c 	.word	0x08002b6c

08000b80 <canEnableIRQ>:

void canEnableIRQ(){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0

	NVIC_SetPriority(CEC_CAN_IRQn, 1); // Set interruption priority level to 1
 8000b84:	2101      	movs	r1, #1
 8000b86:	201e      	movs	r0, #30
 8000b88:	f7ff fb6c 	bl	8000264 <__NVIC_SetPriority>
	NVIC_EnableIRQ(CEC_CAN_IRQn); // Enable interruption for the NVIC
 8000b8c:	201e      	movs	r0, #30
 8000b8e:	f7ff fb4f 	bl	8000230 <__NVIC_EnableIRQ>
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <receiveRemoteFrame>:

void receiveRemoteFrame(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0

	nextRemoteFrameId = (numberOfRemoteFrameReceived >= 6)? ( (numberOfRemoteFrameReceived % 6) + 1) : (numberOfRemoteFrameReceived + 1);
 8000b9e:	4b3e      	ldr	r3, [pc, #248]	; (8000c98 <receiveRemoteFrame+0x100>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b05      	cmp	r3, #5
 8000ba4:	d908      	bls.n	8000bb8 <receiveRemoteFrame+0x20>
 8000ba6:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <receiveRemoteFrame+0x100>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2106      	movs	r1, #6
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fb39 	bl	8000224 <__aeabi_uidivmod>
 8000bb2:	000b      	movs	r3, r1
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	e002      	b.n	8000bbe <receiveRemoteFrame+0x26>
 8000bb8:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <receiveRemoteFrame+0x100>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	1c5a      	adds	r2, r3, #1
 8000bbe:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <receiveRemoteFrame+0x104>)
 8000bc0:	601a      	str	r2, [r3, #0]

	// Get the fifo number where the remote frame is stored
	uint32_t fifoNumber = ((CAN->RF0R & CAN_RF0R_FMP0) != 0U) ? 0 : 1;
 8000bc2:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <receiveRemoteFrame+0x108>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	425a      	negs	r2, r3
 8000bcc:	4153      	adcs	r3, r2
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	60fb      	str	r3, [r7, #12]
	printf("The data frame received is store into the fifo %ld \r\n", fifoNumber);
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <receiveRemoteFrame+0x10c>)
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fcb5 	bl	8001548 <iprintf>

	// Get the id of the received remote frame
	uint32_t receivedRemoteFrameId = (CAN_RI0R_STID & CAN->sFIFOMailBox[fifoNumber].RIR) >> CAN_TI0R_STID_Pos;
 8000bde:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <receiveRemoteFrame+0x108>)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	331b      	adds	r3, #27
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	589b      	ldr	r3, [r3, r2]
 8000be8:	0d5b      	lsrs	r3, r3, #21
 8000bea:	055b      	lsls	r3, r3, #21
 8000bec:	0d5b      	lsrs	r3, r3, #21
 8000bee:	60bb      	str	r3, [r7, #8]
	printf("The id of the remote frame received is %ld\r\n", receivedRemoteFrameId);
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <receiveRemoteFrame+0x110>)
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 fca6 	bl	8001548 <iprintf>

	// Check if the header received and the supposed next id to receive are same
	if(receivedRemoteFrameId == nextRemoteFrameId){
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <receiveRemoteFrame+0x104>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d12f      	bne.n	8000c66 <receiveRemoteFrame+0xce>

		// Get the data lenght of the received remote frame
		uint32_t receivedRemoteFrameDlc = (CAN_RDT0R_DLC & CAN->sFIFOMailBox[fifoNumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <receiveRemoteFrame+0x108>)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	331b      	adds	r3, #27
 8000c0c:	011b      	lsls	r3, r3, #4
 8000c0e:	18d3      	adds	r3, r2, r3
 8000c10:	3304      	adds	r3, #4
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	220f      	movs	r2, #15
 8000c16:	4013      	ands	r3, r2
 8000c18:	607b      	str	r3, [r7, #4]
		printf("The size of the remote frame received is %ld\r\n",receivedRemoteFrameDlc);
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <receiveRemoteFrame+0x114>)
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 fc91 	bl	8001548 <iprintf>

		// Check if the data lenght received and the supposed next data lenght to receive are same
		if(receivedRemoteFrameDlc == (tabDataCanFrames[numberOfRemoteFrameReceived].size)){
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <receiveRemoteFrame+0x100>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <receiveRemoteFrame+0x118>)
 8000c2c:	00d2      	lsls	r2, r2, #3
 8000c2e:	58d3      	ldr	r3, [r2, r3]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d112      	bne.n	8000c5c <receiveRemoteFrame+0xc4>

			printf("The remote frame received is the one we are looking for\r\n");
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <receiveRemoteFrame+0x11c>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 fcff 	bl	800163c <puts>
			numberOfRemoteFrameReceived++;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <receiveRemoteFrame+0x100>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <receiveRemoteFrame+0x100>)
 8000c46:	601a      	str	r2, [r3, #0]
			printf("numberOfRemoteFrameReceived : %ld\r\n", numberOfRemoteFrameReceived);
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <receiveRemoteFrame+0x100>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <receiveRemoteFrame+0x120>)
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 fc79 	bl	8001548 <iprintf>
			sendDataFrame();
 8000c56:	f000 f835 	bl	8000cc4 <sendDataFrame>
 8000c5a:	e008      	b.n	8000c6e <receiveRemoteFrame+0xd6>
		}

		else{
			printf("The data length of the received remote frame is not the one we are looking for\r\n");
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <receiveRemoteFrame+0x124>)
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 fcec 	bl	800163c <puts>
 8000c64:	e003      	b.n	8000c6e <receiveRemoteFrame+0xd6>
		}
	}

	else{
			printf("The id of the received remote frame is not the one we are looking for\r\n");
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <receiveRemoteFrame+0x128>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 fce7 	bl	800163c <puts>
	}

	// Release the FIFO
	(fifoNumber == 0) ? (CAN->RF0R |= CAN_RF0R_RFOM0) : (CAN->RF1R |= CAN_RF1R_RFOM1);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d106      	bne.n	8000c82 <receiveRemoteFrame+0xea>
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <receiveRemoteFrame+0x108>)
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <receiveRemoteFrame+0x108>)
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	60da      	str	r2, [r3, #12]

}
 8000c80:	e005      	b.n	8000c8e <receiveRemoteFrame+0xf6>
	(fifoNumber == 0) ? (CAN->RF0R |= CAN_RF0R_RFOM0) : (CAN->RF1R |= CAN_RF1R_RFOM1);
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <receiveRemoteFrame+0x108>)
 8000c84:	691a      	ldr	r2, [r3, #16]
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <receiveRemoteFrame+0x108>)
 8000c88:	2120      	movs	r1, #32
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	611a      	str	r2, [r3, #16]
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b004      	add	sp, #16
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	2000014c 	.word	0x2000014c
 8000c9c:	20000150 	.word	0x20000150
 8000ca0:	40006400 	.word	0x40006400
 8000ca4:	08002b84 	.word	0x08002b84
 8000ca8:	08002bbc 	.word	0x08002bbc
 8000cac:	08002bec 	.word	0x08002bec
 8000cb0:	20000004 	.word	0x20000004
 8000cb4:	08002c1c 	.word	0x08002c1c
 8000cb8:	08002c58 	.word	0x08002c58
 8000cbc:	08002c7c 	.word	0x08002c7c
 8000cc0:	08002ccc 	.word	0x08002ccc

08000cc4 <sendDataFrame>:

void sendDataFrame(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

	nextDataFrameId = (numberOfRemoteFrameReceived < 6)?  numberOfRemoteFrameReceived : ( (numberOfRemoteFrameReceived % 6 == 0)? 6 : (numberOfRemoteFrameReceived % 6) );
 8000cca:	4bb7      	ldr	r3, [pc, #732]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	d911      	bls.n	8000cf6 <sendDataFrame+0x32>
 8000cd2:	4bb5      	ldr	r3, [pc, #724]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2106      	movs	r1, #6
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff faa3 	bl	8000224 <__aeabi_uidivmod>
 8000cde:	1e0b      	subs	r3, r1, #0
 8000ce0:	d007      	beq.n	8000cf2 <sendDataFrame+0x2e>
 8000ce2:	4bb1      	ldr	r3, [pc, #708]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2106      	movs	r1, #6
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fa9b 	bl	8000224 <__aeabi_uidivmod>
 8000cee:	000b      	movs	r3, r1
 8000cf0:	e003      	b.n	8000cfa <sendDataFrame+0x36>
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	e001      	b.n	8000cfa <sendDataFrame+0x36>
 8000cf6:	4bac      	ldr	r3, [pc, #688]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4aac      	ldr	r2, [pc, #688]	; (8000fac <sendDataFrame+0x2e8>)
 8000cfc:	6013      	str	r3, [r2, #0]

	uint32_t emptyMailbox;

	// Check that all the Tx mailboxes are not full */
	if ( ( (CAN->TSR & CAN_TSR_TME0) != 0U ) && ( (CAN->TSR & CAN_TSR_TME1) != 0U ) && ( (CAN->TSR & CAN_TSR_TME2) != 0U) ){
 8000cfe:	4bac      	ldr	r3, [pc, #688]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	04db      	lsls	r3, r3, #19
 8000d06:	4013      	ands	r3, r2
 8000d08:	d100      	bne.n	8000d0c <sendDataFrame+0x48>
 8000d0a:	e145      	b.n	8000f98 <sendDataFrame+0x2d4>
 8000d0c:	4ba8      	ldr	r3, [pc, #672]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	051b      	lsls	r3, r3, #20
 8000d14:	4013      	ands	r3, r2
 8000d16:	d100      	bne.n	8000d1a <sendDataFrame+0x56>
 8000d18:	e13e      	b.n	8000f98 <sendDataFrame+0x2d4>
 8000d1a:	4ba5      	ldr	r3, [pc, #660]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	055b      	lsls	r3, r3, #21
 8000d22:	4013      	ands	r3, r2
 8000d24:	d100      	bne.n	8000d28 <sendDataFrame+0x64>
 8000d26:	e137      	b.n	8000f98 <sendDataFrame+0x2d4>

		// Select an empty transmit mailbox
		emptyMailbox = (CAN->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d28:	4ba1      	ldr	r3, [pc, #644]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	0e1b      	lsrs	r3, r3, #24
 8000d2e:	2203      	movs	r2, #3
 8000d30:	4013      	ands	r3, r2
 8000d32:	607b      	str	r3, [r7, #4]

		printf("The transmit mailbox selected for the data frame with id %ld is in the mailbox %ld\r\n", nextDataFrameId , emptyMailbox);
 8000d34:	4b9d      	ldr	r3, [pc, #628]	; (8000fac <sendDataFrame+0x2e8>)
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4b9e      	ldr	r3, [pc, #632]	; (8000fb4 <sendDataFrame+0x2f0>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 fc03 	bl	8001548 <iprintf>

		// IDE bit set to 0 because we use format CAN Strandard format (2.0A)
		CAN->sTxMailBox[emptyMailbox].TIR &= ~(0x01 << 2); // Set bit 2 to 0
 8000d42:	4a9b      	ldr	r2, [pc, #620]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3318      	adds	r3, #24
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	589b      	ldr	r3, [r3, r2]
 8000d4c:	4998      	ldr	r1, [pc, #608]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d4e:	2204      	movs	r2, #4
 8000d50:	4393      	bics	r3, r2
 8000d52:	001a      	movs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3318      	adds	r3, #24
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	505a      	str	r2, [r3, r1]

		// RTR bit set to 1 because we send a data frame
		CAN->sTxMailBox[emptyMailbox].TIR |= (0x00 << 1); // Set bit 1 to 1
 8000d5c:	4a94      	ldr	r2, [pc, #592]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d5e:	4994      	ldr	r1, [pc, #592]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3318      	adds	r3, #24
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	589a      	ldr	r2, [r3, r2]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3318      	adds	r3, #24
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	505a      	str	r2, [r3, r1]

		// Set the identifier field according to the parameter "nextRemoteFrameId"
		CAN->sTxMailBox[emptyMailbox].TIR &= ~(0x00003FFFF << 3); // Clear bits 3 to 20
 8000d70:	4a8f      	ldr	r2, [pc, #572]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3318      	adds	r3, #24
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	589b      	ldr	r3, [r3, r2]
 8000d7a:	498d      	ldr	r1, [pc, #564]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d7c:	4a8e      	ldr	r2, [pc, #568]	; (8000fb8 <sendDataFrame+0x2f4>)
 8000d7e:	401a      	ands	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3318      	adds	r3, #24
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	505a      	str	r2, [r3, r1]
		CAN->sTxMailBox[emptyMailbox].TIR &= ~(0x000007FF << 21); // Clear bits 21 to 31
 8000d88:	4a89      	ldr	r2, [pc, #548]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3318      	adds	r3, #24
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	589b      	ldr	r3, [r3, r2]
 8000d92:	4987      	ldr	r1, [pc, #540]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000d94:	02db      	lsls	r3, r3, #11
 8000d96:	0ada      	lsrs	r2, r3, #11
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3318      	adds	r3, #24
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	505a      	str	r2, [r3, r1]
		CAN->sTxMailBox[emptyMailbox].TIR = ( (uint32_t) nextDataFrameId << 21);
 8000da0:	4b82      	ldr	r3, [pc, #520]	; (8000fac <sendDataFrame+0x2e8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4982      	ldr	r1, [pc, #520]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000da6:	055a      	lsls	r2, r3, #21
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3318      	adds	r3, #24
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	505a      	str	r2, [r3, r1]

		// Size of the data frame according to the parameter "canFrame->size"
		CAN->sTxMailBox[emptyMailbox].TDTR &= ~(0xFFFFFFFF << 0); // Clear bits 0 to 3
 8000db0:	4a7f      	ldr	r2, [pc, #508]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3318      	adds	r3, #24
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	18d3      	adds	r3, r2, r3
 8000dba:	3304      	adds	r3, #4
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a7c      	ldr	r2, [pc, #496]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3318      	adds	r3, #24
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	18d3      	adds	r3, r2, r3
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
		CAN->sTxMailBox[emptyMailbox].TDTR |= ( ( (uint32_t) tabDataCanFrames[(numberOfRemoteFrameReceived-1)].size ) << 0);
 8000dce:	4a78      	ldr	r2, [pc, #480]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3318      	adds	r3, #24
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	18d3      	adds	r3, r2, r3
 8000dd8:	3304      	adds	r3, #4
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b72      	ldr	r3, [pc, #456]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	1e59      	subs	r1, r3, #1
 8000de2:	4b76      	ldr	r3, [pc, #472]	; (8000fbc <sendDataFrame+0x2f8>)
 8000de4:	00c9      	lsls	r1, r1, #3
 8000de6:	58cb      	ldr	r3, [r1, r3]
 8000de8:	4971      	ldr	r1, [pc, #452]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3318      	adds	r3, #24
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	18cb      	adds	r3, r1, r3
 8000df4:	3304      	adds	r3, #4
 8000df6:	601a      	str	r2, [r3, #0]

		printf("The size of the data frame is %ld and the value is %s\r\n", tabDataCanFrames[(numberOfRemoteFrameReceived-1)].size , tabDataCanFrames[(numberOfRemoteFrameReceived-1)].message);
 8000df8:	4b6b      	ldr	r3, [pc, #428]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <sendDataFrame+0x2f8>)
 8000e00:	00d2      	lsls	r2, r2, #3
 8000e02:	58d1      	ldr	r1, [r2, r3]
 8000e04:	4b68      	ldr	r3, [pc, #416]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	4a6c      	ldr	r2, [pc, #432]	; (8000fbc <sendDataFrame+0x2f8>)
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	18d3      	adds	r3, r2, r3
 8000e10:	3304      	adds	r3, #4
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b6a      	ldr	r3, [pc, #424]	; (8000fc0 <sendDataFrame+0x2fc>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 fb96 	bl	8001548 <iprintf>

		// Fill the data
		CAN->sTxMailBox[emptyMailbox].TDHR &= ~(0xFFFFFFFF << 0); //Clear
 8000e1c:	4964      	ldr	r1, [pc, #400]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	23c6      	movs	r3, #198	; 0xc6
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	188a      	adds	r2, r1, r2
 8000e28:	18d3      	adds	r3, r2, r3
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4960      	ldr	r1, [pc, #384]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	23c6      	movs	r3, #198	; 0xc6
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	188a      	adds	r2, r1, r2
 8000e38:	18d3      	adds	r3, r2, r3
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
		CAN->sTxMailBox[emptyMailbox].TDHR |= ( ( (uint32_t) ( tabDataCanFrames[(numberOfRemoteFrameReceived-1)].message[7] ) << CAN_TDH0R_DATA7_Pos) | ( (uint32_t) ( tabDataCanFrames[(numberOfRemoteFrameReceived-1)].message[6] ) << CAN_TDH0R_DATA6_Pos) | ( (uint32_t) ( tabDataCanFrames[(numberOfRemoteFrameReceived-1)].message[5] ) << CAN_TDH0R_DATA5_Pos) | ( (uint32_t) ( tabDataCanFrames[(numberOfRemoteFrameReceived-1)].message[4] ) << CAN_TDH0R_DATA4_Pos) );
 8000e3e:	495c      	ldr	r1, [pc, #368]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	23c6      	movs	r3, #198	; 0xc6
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	188a      	adds	r2, r1, r2
 8000e4a:	18d3      	adds	r3, r2, r3
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	4959      	ldr	r1, [pc, #356]	; (8000fbc <sendDataFrame+0x2f8>)
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	18cb      	adds	r3, r1, r3
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3307      	adds	r3, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	0619      	lsls	r1, r3, #24
 8000e64:	4b50      	ldr	r3, [pc, #320]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	4854      	ldr	r0, [pc, #336]	; (8000fbc <sendDataFrame+0x2f8>)
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	18c3      	adds	r3, r0, r3
 8000e70:	3304      	adds	r3, #4
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3306      	adds	r3, #6
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	041b      	lsls	r3, r3, #16
 8000e7a:	4319      	orrs	r1, r3
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	484e      	ldr	r0, [pc, #312]	; (8000fbc <sendDataFrame+0x2f8>)
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	18c3      	adds	r3, r0, r3
 8000e88:	3304      	adds	r3, #4
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3305      	adds	r3, #5
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	4319      	orrs	r1, r3
 8000e94:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	4848      	ldr	r0, [pc, #288]	; (8000fbc <sendDataFrame+0x2f8>)
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	18c3      	adds	r3, r0, r3
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	4841      	ldr	r0, [pc, #260]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000eac:	431a      	orrs	r2, r3
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	23c6      	movs	r3, #198	; 0xc6
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	0109      	lsls	r1, r1, #4
 8000eb6:	1841      	adds	r1, r0, r1
 8000eb8:	18cb      	adds	r3, r1, r3
 8000eba:	601a      	str	r2, [r3, #0]
		CAN->sTxMailBox[emptyMailbox].TDLR &= ~(0xFFFFFFFF << 0); //Clear
 8000ebc:	493c      	ldr	r1, [pc, #240]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	23c4      	movs	r3, #196	; 0xc4
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	188a      	adds	r2, r1, r2
 8000ec8:	18d3      	adds	r3, r2, r3
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4938      	ldr	r1, [pc, #224]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	23c4      	movs	r3, #196	; 0xc4
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	188a      	adds	r2, r1, r2
 8000ed8:	18d3      	adds	r3, r2, r3
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
		CAN->sTxMailBox[emptyMailbox].TDLR |= ( ( (uint32_t) ( tabDataCanFrames[(numberOfRemoteFrameReceived-1)].message[3] ) << CAN_TDL0R_DATA3_Pos) | ( (uint32_t) ( tabDataCanFrames[(numberOfRemoteFrameReceived-1)].message[2] ) << CAN_TDL0R_DATA2_Pos) | ( (uint32_t) ( tabDataCanFrames[(numberOfRemoteFrameReceived-1)].message[1] ) << CAN_TDL0R_DATA1_Pos) | ( (uint32_t) ( tabDataCanFrames[(numberOfRemoteFrameReceived-1)].message[0] ) << CAN_TDL0R_DATA0_Pos) );
 8000ede:	4934      	ldr	r1, [pc, #208]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	23c4      	movs	r3, #196	; 0xc4
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	188a      	adds	r2, r1, r2
 8000eea:	18d3      	adds	r3, r2, r3
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	4931      	ldr	r1, [pc, #196]	; (8000fbc <sendDataFrame+0x2f8>)
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	18cb      	adds	r3, r1, r3
 8000efa:	3304      	adds	r3, #4
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3303      	adds	r3, #3
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	0619      	lsls	r1, r3, #24
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	482c      	ldr	r0, [pc, #176]	; (8000fbc <sendDataFrame+0x2f8>)
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	18c3      	adds	r3, r0, r3
 8000f10:	3304      	adds	r3, #4
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3302      	adds	r3, #2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	4319      	orrs	r1, r3
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	4826      	ldr	r0, [pc, #152]	; (8000fbc <sendDataFrame+0x2f8>)
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	18c3      	adds	r3, r0, r3
 8000f28:	3304      	adds	r3, #4
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	4319      	orrs	r1, r3
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	4820      	ldr	r0, [pc, #128]	; (8000fbc <sendDataFrame+0x2f8>)
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	18c3      	adds	r3, r0, r3
 8000f40:	3304      	adds	r3, #4
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	430b      	orrs	r3, r1
 8000f48:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	23c4      	movs	r3, #196	; 0xc4
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	0109      	lsls	r1, r1, #4
 8000f54:	1841      	adds	r1, r0, r1
 8000f56:	18cb      	adds	r3, r1, r3
 8000f58:	601a      	str	r2, [r3, #0]

		// Ask for transmission request : TXRQ = 1
		CAN->sTxMailBox[0].TIR |= CAN_TI0R_TXRQ;
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000f5c:	23c0      	movs	r3, #192	; 0xc0
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	58d3      	ldr	r3, [r2, r3]
 8000f62:	4913      	ldr	r1, [pc, #76]	; (8000fb0 <sendDataFrame+0x2ec>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	431a      	orrs	r2, r3
 8000f68:	23c0      	movs	r3, #192	; 0xc0
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	50ca      	str	r2, [r1, r3]

		if( (numberOfRemoteFrameReceived % 6) == 0){
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <sendDataFrame+0x2e4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2106      	movs	r1, #6
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff f955 	bl	8000224 <__aeabi_uidivmod>
 8000f7a:	1e0b      	subs	r3, r1, #0
 8000f7c:	d110      	bne.n	8000fa0 <sendDataFrame+0x2dc>
				printf("*************** TRANSMISSION %ld***********************\r\n", nbTransmission);
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <sendDataFrame+0x300>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <sendDataFrame+0x304>)
 8000f84:	0011      	movs	r1, r2
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 fade 	bl	8001548 <iprintf>
				nbTransmission++;
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <sendDataFrame+0x300>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <sendDataFrame+0x300>)
 8000f94:	601a      	str	r2, [r3, #0]
		if( (numberOfRemoteFrameReceived % 6) == 0){
 8000f96:	e003      	b.n	8000fa0 <sendDataFrame+0x2dc>
		}
	}

	else {
      printf("All the mailbox are full\r\n");
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <sendDataFrame+0x308>)
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 fb4e 	bl	800163c <puts>
	}
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000014c 	.word	0x2000014c
 8000fac:	20000154 	.word	0x20000154
 8000fb0:	40006400 	.word	0x40006400
 8000fb4:	08002d14 	.word	0x08002d14
 8000fb8:	ffe00007 	.word	0xffe00007
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	08002d6c 	.word	0x08002d6c
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	08002da4 	.word	0x08002da4
 8000fcc:	08002de0 	.word	0x08002de0

08000fd0 <CEC_CAN_IRQHandler>:

void CEC_CAN_IRQHandler(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0

	uint32_t interrupts = CAN->IER;
 8000fd6:	4bc1      	ldr	r3, [pc, #772]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	617b      	str	r3, [r7, #20]
	uint32_t msrflags = CAN->MSR;
 8000fdc:	4bbf      	ldr	r3, [pc, #764]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
	uint32_t tsrflags = CAN->TSR;
 8000fe2:	4bbe      	ldr	r3, [pc, #760]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	60fb      	str	r3, [r7, #12]
	uint32_t rf0rflags = CAN->RF0R;
 8000fe8:	4bbc      	ldr	r3, [pc, #752]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
	uint32_t rf1rflags = CAN->RF1R;
 8000fee:	4bbb      	ldr	r3, [pc, #748]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	607b      	str	r3, [r7, #4]
	uint32_t esrflags = CAN->ESR;
 8000ff4:	4bb9      	ldr	r3, [pc, #740]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	603b      	str	r3, [r7, #0]

	/********** TRANSMIT INTERRUPT **********/
	if ((interrupts & CAN_IER_TMEIE) != 0U){
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4013      	ands	r3, r2
 8001000:	d100      	bne.n	8001004 <CEC_CAN_IRQHandler+0x34>
 8001002:	e0bd      	b.n	8001180 <CEC_CAN_IRQHandler+0x1b0>

    	// Transmit interrupt mailbox 0
		if ((tsrflags & CAN_TSR_RQCP0) != 0U) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2201      	movs	r2, #1
 8001008:	4013      	ands	r3, r2
 800100a:	d037      	beq.n	800107c <CEC_CAN_IRQHandler+0xac>

    		// Clear RQCP0, TXOK0, ALST0 and TERR0 bits
    		CAN->TSR &= ~CAN_TSR_RQCP0_Msk;
 800100c:	4bb3      	ldr	r3, [pc, #716]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	4bb2      	ldr	r3, [pc, #712]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001012:	2101      	movs	r1, #1
 8001014:	438a      	bics	r2, r1
 8001016:	609a      	str	r2, [r3, #8]
    		CAN->TSR &= ~CAN_TSR_TXOK0_Msk;
 8001018:	4bb0      	ldr	r3, [pc, #704]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	4baf      	ldr	r3, [pc, #700]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800101e:	2102      	movs	r1, #2
 8001020:	438a      	bics	r2, r1
 8001022:	609a      	str	r2, [r3, #8]
    		CAN->TSR &= ~CAN_TSR_ALST0_Msk;
 8001024:	4bad      	ldr	r3, [pc, #692]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	4bac      	ldr	r3, [pc, #688]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800102a:	2104      	movs	r1, #4
 800102c:	438a      	bics	r2, r1
 800102e:	609a      	str	r2, [r3, #8]
    		CAN->TSR &= ~CAN_TSR_TERR0_Msk;
 8001030:	4baa      	ldr	r3, [pc, #680]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	4ba9      	ldr	r3, [pc, #676]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001036:	2108      	movs	r1, #8
 8001038:	438a      	bics	r2, r1
 800103a:	609a      	str	r2, [r3, #8]

      		// Transmission succeed
    		if ((tsrflags & CAN_TSR_TXOK0) != 0U){
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2202      	movs	r2, #2
 8001040:	4013      	ands	r3, r2
 8001042:	d003      	beq.n	800104c <CEC_CAN_IRQHandler+0x7c>

        		printf("Transmission succeed from mailbox 0 !\r\n");
 8001044:	4ba6      	ldr	r3, [pc, #664]	; (80012e0 <CEC_CAN_IRQHandler+0x310>)
 8001046:	0018      	movs	r0, r3
 8001048:	f000 faf8 	bl	800163c <puts>

    		}

    		// Transmission failed due to arbitration lost
      		if ((tsrflags & CAN_TSR_ALST0) != 0U){
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2204      	movs	r2, #4
 8001050:	4013      	ands	r3, r2
 8001052:	d003      	beq.n	800105c <CEC_CAN_IRQHandler+0x8c>

          		printf("Transmission fail due to arbitration lost from mailbox 0 !\r\n");
 8001054:	4ba3      	ldr	r3, [pc, #652]	; (80012e4 <CEC_CAN_IRQHandler+0x314>)
 8001056:	0018      	movs	r0, r3
 8001058:	f000 faf0 	bl	800163c <puts>
        	}

        	// Transmission failed due error
        	if ((tsrflags & CAN_TSR_TERR0) != 0U){
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2208      	movs	r2, #8
 8001060:	4013      	ands	r3, r2
 8001062:	d003      	beq.n	800106c <CEC_CAN_IRQHandler+0x9c>

          		printf("Transmission fail due to error from mailbox 0 !\r\n");
 8001064:	4ba0      	ldr	r3, [pc, #640]	; (80012e8 <CEC_CAN_IRQHandler+0x318>)
 8001066:	0018      	movs	r0, r3
 8001068:	f000 fae8 	bl	800163c <puts>

        	}

        	// Transmission aborted
        	if ((tsrflags & CAN_TSR_ABRQ0) != 0U) {
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	4013      	ands	r3, r2
 8001072:	d003      	beq.n	800107c <CEC_CAN_IRQHandler+0xac>

        		printf("Transmission aborted from mailbox 0!\r\n");
 8001074:	4b9d      	ldr	r3, [pc, #628]	; (80012ec <CEC_CAN_IRQHandler+0x31c>)
 8001076:	0018      	movs	r0, r3
 8001078:	f000 fae0 	bl	800163c <puts>
        	}
      	}

    	// Transmit interrupt mailbox 1
    	if ((tsrflags & CAN_TSR_RQCP1) != 0U) {
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4013      	ands	r3, r2
 8001084:	d03b      	beq.n	80010fe <CEC_CAN_IRQHandler+0x12e>

    		// Clear RQCP0, TXOK0, ALST0 and TERR0 bits
    		CAN->TSR &= ~CAN_TSR_RQCP1_Msk;
 8001086:	4b95      	ldr	r3, [pc, #596]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	4b94      	ldr	r3, [pc, #592]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800108c:	4998      	ldr	r1, [pc, #608]	; (80012f0 <CEC_CAN_IRQHandler+0x320>)
 800108e:	400a      	ands	r2, r1
 8001090:	609a      	str	r2, [r3, #8]
    		CAN->TSR &= ~CAN_TSR_TXOK1_Msk;
 8001092:	4b92      	ldr	r3, [pc, #584]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	4b91      	ldr	r3, [pc, #580]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001098:	4996      	ldr	r1, [pc, #600]	; (80012f4 <CEC_CAN_IRQHandler+0x324>)
 800109a:	400a      	ands	r2, r1
 800109c:	609a      	str	r2, [r3, #8]
    		CAN->TSR &= ~CAN_TSR_ALST1_Msk;
 800109e:	4b8f      	ldr	r3, [pc, #572]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	4b8e      	ldr	r3, [pc, #568]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 80010a4:	4994      	ldr	r1, [pc, #592]	; (80012f8 <CEC_CAN_IRQHandler+0x328>)
 80010a6:	400a      	ands	r2, r1
 80010a8:	609a      	str	r2, [r3, #8]
    		CAN->TSR &= ~CAN_TSR_TERR1_Msk;
 80010aa:	4b8c      	ldr	r3, [pc, #560]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	4b8b      	ldr	r3, [pc, #556]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 80010b0:	4992      	ldr	r1, [pc, #584]	; (80012fc <CEC_CAN_IRQHandler+0x32c>)
 80010b2:	400a      	ands	r2, r1
 80010b4:	609a      	str	r2, [r3, #8]

    		// Transmission succeed
    	    if ((tsrflags & CAN_TSR_TXOK1) != 0U){
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	d003      	beq.n	80010c8 <CEC_CAN_IRQHandler+0xf8>

    	        printf("Transmission succeed from mailbox 1 !\r\n");
 80010c0:	4b8f      	ldr	r3, [pc, #572]	; (8001300 <CEC_CAN_IRQHandler+0x330>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 faba 	bl	800163c <puts>

    	    }

    	    // Transmission failed due to arbitration lost
    	    if ((tsrflags & CAN_TSR_ALST1) != 0U){
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4013      	ands	r3, r2
 80010d0:	d003      	beq.n	80010da <CEC_CAN_IRQHandler+0x10a>

    	    	printf("Transmission fail due to arbitration lost from mailbox 1 !\r\n");
 80010d2:	4b8c      	ldr	r3, [pc, #560]	; (8001304 <CEC_CAN_IRQHandler+0x334>)
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fab1 	bl	800163c <puts>

    	    }

    	    // Transmission failed due error
    	    if ((tsrflags & CAN_TSR_TERR1) != 0U){
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	4013      	ands	r3, r2
 80010e2:	d003      	beq.n	80010ec <CEC_CAN_IRQHandler+0x11c>

    	    	printf("Transmission fail due to error from mailbox 1 !\r\n");
 80010e4:	4b88      	ldr	r3, [pc, #544]	; (8001308 <CEC_CAN_IRQHandler+0x338>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f000 faa8 	bl	800163c <puts>

    	    }

    	    // Transmission aborted
    	    if ((tsrflags & CAN_TSR_ABRQ1) != 0U) {
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	4013      	ands	r3, r2
 80010f4:	d003      	beq.n	80010fe <CEC_CAN_IRQHandler+0x12e>

    	        printf("Transmission aborted from mailbox 1 !\r\n");
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <CEC_CAN_IRQHandler+0x33c>)
 80010f8:	0018      	movs	r0, r3
 80010fa:	f000 fa9f 	bl	800163c <puts>

    	    }
    	}

    	// Transmit interrupt mailbox 2
    	if ((tsrflags & CAN_TSR_RQCP2) != 0U) {
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	025b      	lsls	r3, r3, #9
 8001104:	4013      	ands	r3, r2
 8001106:	d03b      	beq.n	8001180 <CEC_CAN_IRQHandler+0x1b0>

    		// Clear RQCP2, TXOK2, ALST2 and TERR2 bits
    		CAN->TSR &= ~CAN_TSR_RQCP2_Msk;
 8001108:	4b74      	ldr	r3, [pc, #464]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	4b73      	ldr	r3, [pc, #460]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800110e:	4980      	ldr	r1, [pc, #512]	; (8001310 <CEC_CAN_IRQHandler+0x340>)
 8001110:	400a      	ands	r2, r1
 8001112:	609a      	str	r2, [r3, #8]
    	    CAN->TSR &= ~CAN_TSR_TXOK2_Msk;
 8001114:	4b71      	ldr	r3, [pc, #452]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	4b70      	ldr	r3, [pc, #448]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800111a:	497e      	ldr	r1, [pc, #504]	; (8001314 <CEC_CAN_IRQHandler+0x344>)
 800111c:	400a      	ands	r2, r1
 800111e:	609a      	str	r2, [r3, #8]
    	    CAN->TSR &= ~CAN_TSR_ALST2_Msk;
 8001120:	4b6e      	ldr	r3, [pc, #440]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	4b6d      	ldr	r3, [pc, #436]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001126:	497c      	ldr	r1, [pc, #496]	; (8001318 <CEC_CAN_IRQHandler+0x348>)
 8001128:	400a      	ands	r2, r1
 800112a:	609a      	str	r2, [r3, #8]
    	    CAN->TSR &= ~CAN_TSR_TERR2_Msk;
 800112c:	4b6b      	ldr	r3, [pc, #428]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	4b6a      	ldr	r3, [pc, #424]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001132:	497a      	ldr	r1, [pc, #488]	; (800131c <CEC_CAN_IRQHandler+0x34c>)
 8001134:	400a      	ands	r2, r1
 8001136:	609a      	str	r2, [r3, #8]

    	    // Transmission succeed
    	    if ((tsrflags & CAN_TSR_TXOK2) != 0U){
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	029b      	lsls	r3, r3, #10
 800113e:	4013      	ands	r3, r2
 8001140:	d003      	beq.n	800114a <CEC_CAN_IRQHandler+0x17a>

    	    	printf("Transmission succeed from mailbox 2 !\r\n");
 8001142:	4b77      	ldr	r3, [pc, #476]	; (8001320 <CEC_CAN_IRQHandler+0x350>)
 8001144:	0018      	movs	r0, r3
 8001146:	f000 fa79 	bl	800163c <puts>

    	    }

    	    // Transmission failed due to arbitration lost
    	    if ((tsrflags & CAN_TSR_ALST2) != 0U){
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	02db      	lsls	r3, r3, #11
 8001150:	4013      	ands	r3, r2
 8001152:	d003      	beq.n	800115c <CEC_CAN_IRQHandler+0x18c>

    	    	printf("Transmission fail due to arbitration lost from mailbox 2 !\r\n");
 8001154:	4b73      	ldr	r3, [pc, #460]	; (8001324 <CEC_CAN_IRQHandler+0x354>)
 8001156:	0018      	movs	r0, r3
 8001158:	f000 fa70 	bl	800163c <puts>
    	    }

    	    // Transmission failed due error
    	    if ((tsrflags & CAN_TSR_TERR2) != 0U){
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	031b      	lsls	r3, r3, #12
 8001162:	4013      	ands	r3, r2
 8001164:	d003      	beq.n	800116e <CEC_CAN_IRQHandler+0x19e>

    	    	printf("Transmission fail due to error from mailbox 2 !\r\n");
 8001166:	4b70      	ldr	r3, [pc, #448]	; (8001328 <CEC_CAN_IRQHandler+0x358>)
 8001168:	0018      	movs	r0, r3
 800116a:	f000 fa67 	bl	800163c <puts>

    	    }

    	    // Transmission aborted
    	    if ((tsrflags & CAN_TSR_ABRQ2) != 0U) {
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	041b      	lsls	r3, r3, #16
 8001174:	4013      	ands	r3, r2
 8001176:	d003      	beq.n	8001180 <CEC_CAN_IRQHandler+0x1b0>

    	    	printf("Transmission aborted from mailbox 2 !\r\n");
 8001178:	4b6c      	ldr	r3, [pc, #432]	; (800132c <CEC_CAN_IRQHandler+0x35c>)
 800117a:	0018      	movs	r0, r3
 800117c:	f000 fa5e 	bl	800163c <puts>
	}

	/********** FIFO 0 INTERRUPT **********/

	// Fifo 0 overrun
  	if ((interrupts & CAN_IER_FOVIE0) != 0U){
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2208      	movs	r2, #8
 8001184:	4013      	ands	r3, r2
 8001186:	d00d      	beq.n	80011a4 <CEC_CAN_IRQHandler+0x1d4>

    	if ((rf0rflags & CAN_RF0R_FOVR0) != 0U) {
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2210      	movs	r2, #16
 800118c:	4013      	ands	r3, r2
 800118e:	d009      	beq.n	80011a4 <CEC_CAN_IRQHandler+0x1d4>

      		printf("Fifo 0 overrun ! \r\n");
 8001190:	4b67      	ldr	r3, [pc, #412]	; (8001330 <CEC_CAN_IRQHandler+0x360>)
 8001192:	0018      	movs	r0, r3
 8001194:	f000 fa52 	bl	800163c <puts>

      		// Clear fifo 0 overrun flag
      		CAN->RF0R &= ~CAN_RF0R_FOVR0_Msk;
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	4b4f      	ldr	r3, [pc, #316]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800119e:	2110      	movs	r1, #16
 80011a0:	438a      	bics	r2, r1
 80011a2:	60da      	str	r2, [r3, #12]
    	}
  	}

  	// Fifo 0 full
  	if ((interrupts & CAN_IER_FFIE0) != 0U)	{
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2204      	movs	r2, #4
 80011a8:	4013      	ands	r3, r2
 80011aa:	d00d      	beq.n	80011c8 <CEC_CAN_IRQHandler+0x1f8>

    	if ((rf0rflags & CAN_RF0R_FULL0) != 0U)	{
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2208      	movs	r2, #8
 80011b0:	4013      	ands	r3, r2
 80011b2:	d009      	beq.n	80011c8 <CEC_CAN_IRQHandler+0x1f8>

      		printf("Fifo 0 full ! \r\n");
 80011b4:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <CEC_CAN_IRQHandler+0x364>)
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 fa40 	bl	800163c <puts>

      		// Clear fifo 0 full flag
      		CAN->RF0R &= ~CAN_RF0R_FULL0_Msk;
 80011bc:	4b47      	ldr	r3, [pc, #284]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 80011c2:	2108      	movs	r1, #8
 80011c4:	438a      	bics	r2, r1
 80011c6:	60da      	str	r2, [r3, #12]
    	}
  	}

  	// Fifo 0 message pending
  	if ((interrupts & CAN_IER_FMPIE0) != 0U) {
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2202      	movs	r2, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d00a      	beq.n	80011e6 <CEC_CAN_IRQHandler+0x216>

    	// Check if message is still pending
    	if ((CAN->RF0R & CAN_RF0R_FMP0) != 0U) {
 80011d0:	4b42      	ldr	r3, [pc, #264]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2203      	movs	r2, #3
 80011d6:	4013      	ands	r3, r2
 80011d8:	d005      	beq.n	80011e6 <CEC_CAN_IRQHandler+0x216>

    		printf("Fifo 0 message pending ! \r\n");
 80011da:	4b57      	ldr	r3, [pc, #348]	; (8001338 <CEC_CAN_IRQHandler+0x368>)
 80011dc:	0018      	movs	r0, r3
 80011de:	f000 fa2d 	bl	800163c <puts>
    		receiveRemoteFrame();
 80011e2:	f7ff fcd9 	bl	8000b98 <receiveRemoteFrame>
  	}

  	/********** FIFO 1 INTERRUPT **********/

  		// Fifo 1 overrun
  	  	if ((interrupts & CAN_IER_FOVIE1) != 0U){
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2240      	movs	r2, #64	; 0x40
 80011ea:	4013      	ands	r3, r2
 80011ec:	d00d      	beq.n	800120a <CEC_CAN_IRQHandler+0x23a>

  	    	if ((rf1rflags & CAN_RF1R_FOVR1) != 0U) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2210      	movs	r2, #16
 80011f2:	4013      	ands	r3, r2
 80011f4:	d009      	beq.n	800120a <CEC_CAN_IRQHandler+0x23a>

  	      		printf("Fifo 1 overrun ! \r\n");
 80011f6:	4b51      	ldr	r3, [pc, #324]	; (800133c <CEC_CAN_IRQHandler+0x36c>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f000 fa1f 	bl	800163c <puts>

  	      		// Clear fifo 0 overrun flag
  	      		CAN->RF1R &= ~CAN_RF1R_FOVR1_Msk;
 80011fe:	4b37      	ldr	r3, [pc, #220]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001204:	2110      	movs	r1, #16
 8001206:	438a      	bics	r2, r1
 8001208:	611a      	str	r2, [r3, #16]
  	    	}
  	  	}

  	  	// Fifo 1 full
  	  	if ((interrupts & CAN_IER_FFIE1) != 0U)	{
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2220      	movs	r2, #32
 800120e:	4013      	ands	r3, r2
 8001210:	d00d      	beq.n	800122e <CEC_CAN_IRQHandler+0x25e>

  	    	if ((rf1rflags & CAN_RF1R_FULL1) != 0U)	{
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2208      	movs	r2, #8
 8001216:	4013      	ands	r3, r2
 8001218:	d009      	beq.n	800122e <CEC_CAN_IRQHandler+0x25e>

  	      		printf("Fifo 1 full ! \r\n");
 800121a:	4b49      	ldr	r3, [pc, #292]	; (8001340 <CEC_CAN_IRQHandler+0x370>)
 800121c:	0018      	movs	r0, r3
 800121e:	f000 fa0d 	bl	800163c <puts>

  	      		// Clear fifo 0 full flag
  	      		CAN->RF1R &= ~CAN_RF1R_FULL1_Msk;
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001228:	2108      	movs	r1, #8
 800122a:	438a      	bics	r2, r1
 800122c:	611a      	str	r2, [r3, #16]
  	    	}
  	  	}

  	  	// Fifo 0 message pending
  	  	if ((interrupts & CAN_IER_FMPIE1) != 0U) {
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2210      	movs	r2, #16
 8001232:	4013      	ands	r3, r2
 8001234:	d00a      	beq.n	800124c <CEC_CAN_IRQHandler+0x27c>

  	    	// Check if message is still pending
  	    	if ((CAN->RF1R & CAN_RF1R_FMP1) != 0U) {
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2203      	movs	r2, #3
 800123c:	4013      	ands	r3, r2
 800123e:	d005      	beq.n	800124c <CEC_CAN_IRQHandler+0x27c>

  	    		printf("Fifo 1 message pending ! \r\n");
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <CEC_CAN_IRQHandler+0x374>)
 8001242:	0018      	movs	r0, r3
 8001244:	f000 f9fa 	bl	800163c <puts>
  	    		receiveRemoteFrame();
 8001248:	f7ff fca6 	bl	8000b98 <receiveRemoteFrame>
  	  	}

  	/********** STATUS CHANGE ERROR INTERRUPT **********/

	// Sleep aknowledge
	if ((interrupts & CAN_IER_SLKIE) != 0U) {
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	029b      	lsls	r3, r3, #10
 8001252:	4013      	ands	r3, r2
 8001254:	d00d      	beq.n	8001272 <CEC_CAN_IRQHandler+0x2a2>

    	if ((msrflags & CAN_MSR_SLAKI) != 0U) {
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2210      	movs	r2, #16
 800125a:	4013      	ands	r3, r2
 800125c:	d009      	beq.n	8001272 <CEC_CAN_IRQHandler+0x2a2>

    		printf("Sleep aknowledge for the can ! \r\n");
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <CEC_CAN_IRQHandler+0x378>)
 8001260:	0018      	movs	r0, r3
 8001262:	f000 f9eb 	bl	800163c <puts>

    		// Clear Sleep interrupt Flag
    		CAN->MSR &= ~CAN_MSR_SLAKI_Msk;
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800126c:	2110      	movs	r1, #16
 800126e:	438a      	bics	r2, r1
 8001270:	605a      	str	r2, [r3, #4]
    	}
  	}

	// WakeUp aknowledge
  	if ((interrupts & CAN_IER_WKUIE) != 0U){
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	025b      	lsls	r3, r3, #9
 8001278:	4013      	ands	r3, r2
 800127a:	d00d      	beq.n	8001298 <CEC_CAN_IRQHandler+0x2c8>

    	if ((msrflags & CAN_MSR_WKUI) != 0U){
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	2208      	movs	r2, #8
 8001280:	4013      	ands	r3, r2
 8001282:	d009      	beq.n	8001298 <CEC_CAN_IRQHandler+0x2c8>


      	printf("Wakeup aknowledge for the can ! \r\n");
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <CEC_CAN_IRQHandler+0x37c>)
 8001286:	0018      	movs	r0, r3
 8001288:	f000 f9d8 	bl	800163c <puts>

      	// Clear WakeUp Flag
     	CAN->MSR &= ~CAN_MSR_WKUI_Msk;
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <CEC_CAN_IRQHandler+0x30c>)
 8001292:	2108      	movs	r1, #8
 8001294:	438a      	bics	r2, r1
 8001296:	605a      	str	r2, [r3, #4]

    	}
  	}

  	// Error
	if ((interrupts & CAN_IER_ERRIE) != 0U){
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	4013      	ands	r3, r2
 80012a0:	d100      	bne.n	80012a4 <CEC_CAN_IRQHandler+0x2d4>
 80012a2:	e0ab      	b.n	80013fc <CEC_CAN_IRQHandler+0x42c>

    	if ((msrflags & CAN_MSR_ERRI) != 0U){
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2204      	movs	r2, #4
 80012a8:	4013      	ands	r3, r2
 80012aa:	d100      	bne.n	80012ae <CEC_CAN_IRQHandler+0x2de>
 80012ac:	e0a0      	b.n	80013f0 <CEC_CAN_IRQHandler+0x420>

      		// Error Warning Flag
      		if (((interrupts & CAN_IER_EWGIE) != 0U) && ((esrflags & CAN_ESR_EWGF) != 0U)){
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4013      	ands	r3, r2
 80012b6:	d007      	beq.n	80012c8 <CEC_CAN_IRQHandler+0x2f8>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <CEC_CAN_IRQHandler+0x2f8>

        		printf("Error warning flag ! \r\n");
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <CEC_CAN_IRQHandler+0x380>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f000 f9ba 	bl	800163c <puts>

      		}

      		// Error Passive Flag
      		if (((CAN_IER_EPVIE) != 0U) && ((esrflags & CAN_ESR_EPVF) != 0U)) {
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2202      	movs	r2, #2
 80012cc:	4013      	ands	r3, r2
 80012ce:	d043      	beq.n	8001358 <CEC_CAN_IRQHandler+0x388>


        		printf("Error passive flag ! \r\n");
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <CEC_CAN_IRQHandler+0x384>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 f9b2 	bl	800163c <puts>
 80012d8:	e03e      	b.n	8001358 <CEC_CAN_IRQHandler+0x388>
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	40006400 	.word	0x40006400
 80012e0:	08002dfc 	.word	0x08002dfc
 80012e4:	08002e24 	.word	0x08002e24
 80012e8:	08002e60 	.word	0x08002e60
 80012ec:	08002e94 	.word	0x08002e94
 80012f0:	fffffeff 	.word	0xfffffeff
 80012f4:	fffffdff 	.word	0xfffffdff
 80012f8:	fffffbff 	.word	0xfffffbff
 80012fc:	fffff7ff 	.word	0xfffff7ff
 8001300:	08002ebc 	.word	0x08002ebc
 8001304:	08002ee4 	.word	0x08002ee4
 8001308:	08002f20 	.word	0x08002f20
 800130c:	08002f54 	.word	0x08002f54
 8001310:	fffeffff 	.word	0xfffeffff
 8001314:	fffdffff 	.word	0xfffdffff
 8001318:	fffbffff 	.word	0xfffbffff
 800131c:	fff7ffff 	.word	0xfff7ffff
 8001320:	08002f7c 	.word	0x08002f7c
 8001324:	08002fa4 	.word	0x08002fa4
 8001328:	08002fe0 	.word	0x08002fe0
 800132c:	08003014 	.word	0x08003014
 8001330:	0800303c 	.word	0x0800303c
 8001334:	08003050 	.word	0x08003050
 8001338:	08003060 	.word	0x08003060
 800133c:	0800307c 	.word	0x0800307c
 8001340:	08003090 	.word	0x08003090
 8001344:	080030a0 	.word	0x080030a0
 8001348:	080030bc 	.word	0x080030bc
 800134c:	080030e0 	.word	0x080030e0
 8001350:	08003104 	.word	0x08003104
 8001354:	0800311c 	.word	0x0800311c

      		}

      		// Bus-off Flag
      		if (((interrupts & CAN_IER_BOFIE) != 0U) && ((esrflags & CAN_ESR_BOFF) != 0U)) {
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4013      	ands	r3, r2
 8001360:	d007      	beq.n	8001372 <CEC_CAN_IRQHandler+0x3a2>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2204      	movs	r2, #4
 8001366:	4013      	ands	r3, r2
 8001368:	d003      	beq.n	8001372 <CEC_CAN_IRQHandler+0x3a2>

        		printf("Error bus-off flag ! \r\n");
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <CEC_CAN_IRQHandler+0x434>)
 800136c:	0018      	movs	r0, r3
 800136e:	f000 f965 	bl	800163c <puts>

      		}

      		// Error Code Flag
      		if (((interrupts & CAN_IER_LECIE) != 0U) && ((esrflags & CAN_ESR_LEC) != 0U)) {
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	4013      	ands	r3, r2
 800137a:	d039      	beq.n	80013f0 <CEC_CAN_IRQHandler+0x420>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2270      	movs	r2, #112	; 0x70
 8001380:	4013      	ands	r3, r2
 8001382:	d035      	beq.n	80013f0 <CEC_CAN_IRQHandler+0x420>

        		switch (esrflags & CAN_ESR_LEC) {
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2270      	movs	r2, #112	; 0x70
 8001388:	4013      	ands	r3, r2
 800138a:	2b30      	cmp	r3, #48	; 0x30
 800138c:	d016      	beq.n	80013bc <CEC_CAN_IRQHandler+0x3ec>
 800138e:	d804      	bhi.n	800139a <CEC_CAN_IRQHandler+0x3ca>
 8001390:	2b10      	cmp	r3, #16
 8001392:	d009      	beq.n	80013a8 <CEC_CAN_IRQHandler+0x3d8>
 8001394:	2b20      	cmp	r3, #32
 8001396:	d00c      	beq.n	80013b2 <CEC_CAN_IRQHandler+0x3e2>
          			case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            		printf("CRC error ! \r\n");
           			break;

          			default:
            		break;
 8001398:	e024      	b.n	80013e4 <CEC_CAN_IRQHandler+0x414>
        		switch (esrflags & CAN_ESR_LEC) {
 800139a:	2b50      	cmp	r3, #80	; 0x50
 800139c:	d018      	beq.n	80013d0 <CEC_CAN_IRQHandler+0x400>
 800139e:	2b60      	cmp	r3, #96	; 0x60
 80013a0:	d01b      	beq.n	80013da <CEC_CAN_IRQHandler+0x40a>
 80013a2:	2b40      	cmp	r3, #64	; 0x40
 80013a4:	d00f      	beq.n	80013c6 <CEC_CAN_IRQHandler+0x3f6>
            		break;
 80013a6:	e01d      	b.n	80013e4 <CEC_CAN_IRQHandler+0x414>
            		printf("Stuff error ! \r\n");
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <CEC_CAN_IRQHandler+0x438>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f946 	bl	800163c <puts>
            		break;
 80013b0:	e018      	b.n	80013e4 <CEC_CAN_IRQHandler+0x414>
            		printf("Form error ! \r\n");
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <CEC_CAN_IRQHandler+0x43c>)
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 f941 	bl	800163c <puts>
            		break;
 80013ba:	e013      	b.n	80013e4 <CEC_CAN_IRQHandler+0x414>
            		printf("Acknowledgment error ! \r\n");
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <CEC_CAN_IRQHandler+0x440>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 f93c 	bl	800163c <puts>
            		break;
 80013c4:	e00e      	b.n	80013e4 <CEC_CAN_IRQHandler+0x414>
            		printf("Bit recessive error ! \r\n");
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <CEC_CAN_IRQHandler+0x444>)
 80013c8:	0018      	movs	r0, r3
 80013ca:	f000 f937 	bl	800163c <puts>
            		break;
 80013ce:	e009      	b.n	80013e4 <CEC_CAN_IRQHandler+0x414>
            		printf("Bit dominant error ! \r\n");
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <CEC_CAN_IRQHandler+0x448>)
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 f932 	bl	800163c <puts>
            		break;
 80013d8:	e004      	b.n	80013e4 <CEC_CAN_IRQHandler+0x414>
            		printf("CRC error ! \r\n");
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <CEC_CAN_IRQHandler+0x44c>)
 80013dc:	0018      	movs	r0, r3
 80013de:	f000 f92d 	bl	800163c <puts>
           			break;
 80013e2:	46c0      	nop			; (mov r8, r8)
        		}


        		// Clear Last error code Flag
        		CAN->ESR &= ~CAN_ESR_LEC_Msk;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <CEC_CAN_IRQHandler+0x450>)
 80013e6:	699a      	ldr	r2, [r3, #24]
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <CEC_CAN_IRQHandler+0x450>)
 80013ea:	2170      	movs	r1, #112	; 0x70
 80013ec:	438a      	bics	r2, r1
 80013ee:	619a      	str	r2, [r3, #24]
      		}
    	}

    	// Clear ERRI Flag
    	CAN->MSR &= ~CAN_MSR_ERRI_Msk;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <CEC_CAN_IRQHandler+0x450>)
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <CEC_CAN_IRQHandler+0x450>)
 80013f6:	2104      	movs	r1, #4
 80013f8:	438a      	bics	r2, r1
 80013fa:	605a      	str	r2, [r3, #4]
  	}

}
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b006      	add	sp, #24
 8001402:	bd80      	pop	{r7, pc}
 8001404:	08003134 	.word	0x08003134
 8001408:	0800314c 	.word	0x0800314c
 800140c:	0800315c 	.word	0x0800315c
 8001410:	0800316c 	.word	0x0800316c
 8001414:	08003188 	.word	0x08003188
 8001418:	080031a0 	.word	0x080031a0
 800141c:	080031b8 	.word	0x080031b8
 8001420:	40006400 	.word	0x40006400

08001424 <main>:
extern void initialise_monitor_handles();

extern void canInit();
extern void canEnableIRQ();

int main(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

	initialise_monitor_handles();
 8001428:	f001 fa3a 	bl	80028a0 <initialise_monitor_handles>

	canInit();
 800142c:	f7ff fa54 	bl	80008d8 <canInit>

	canEnableIRQ();
 8001430:	f7ff fba6 	bl	8000b80 <canEnableIRQ>

	while(1){
 8001434:	e7fe      	b.n	8001434 <main+0x10>
	...

08001438 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_sbrk+0x50>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <_sbrk+0x16>
		heap_end = &end;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <_sbrk+0x50>)
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <_sbrk+0x54>)
 800144c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <_sbrk+0x50>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <_sbrk+0x50>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	18d3      	adds	r3, r2, r3
 800145c:	466a      	mov	r2, sp
 800145e:	4293      	cmp	r3, r2
 8001460:	d907      	bls.n	8001472 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001462:	f000 f83f 	bl	80014e4 <__errno>
 8001466:	0003      	movs	r3, r0
 8001468:	220c      	movs	r2, #12
 800146a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800146c:	2301      	movs	r3, #1
 800146e:	425b      	negs	r3, r3
 8001470:	e006      	b.n	8001480 <_sbrk+0x48>
	}

	heap_end += incr;
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <_sbrk+0x50>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	18d2      	adds	r2, r2, r3
 800147a:	4b03      	ldr	r3, [pc, #12]	; (8001488 <_sbrk+0x50>)
 800147c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000158 	.word	0x20000158
 800148c:	20000218 	.word	0x20000218

08001490 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001492:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001496:	490e      	ldr	r1, [pc, #56]	; (80014d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <LoopForever+0xe>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014ac:	4c0b      	ldr	r4, [pc, #44]	; (80014dc <LoopForever+0x16>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014ba:	e000      	b.n	80014be <LoopFillZerobss+0x8>
 80014bc:	bf00      	nop
/* Call static constructors */
  bl __libc_init_array
 80014be:	f000 f817 	bl	80014f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c2:	f7ff ffaf 	bl	8001424 <main>

080014c6 <LoopForever>:

LoopForever:
    b LoopForever
 80014c6:	e7fe      	b.n	80014c6 <LoopForever>
  ldr   r0, =_estack
 80014c8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80014d4:	08003284 	.word	0x08003284
  ldr r2, =_sbss
 80014d8:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80014dc:	20000214 	.word	0x20000214

080014e0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_COMP_IRQHandler>
	...

080014e4 <__errno>:
 80014e4:	4b01      	ldr	r3, [pc, #4]	; (80014ec <__errno+0x8>)
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	4770      	bx	lr
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	200000c4 	.word	0x200000c4

080014f0 <__libc_init_array>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	2600      	movs	r6, #0
 80014f4:	4d0c      	ldr	r5, [pc, #48]	; (8001528 <__libc_init_array+0x38>)
 80014f6:	4c0d      	ldr	r4, [pc, #52]	; (800152c <__libc_init_array+0x3c>)
 80014f8:	1b64      	subs	r4, r4, r5
 80014fa:	10a4      	asrs	r4, r4, #2
 80014fc:	42a6      	cmp	r6, r4
 80014fe:	d109      	bne.n	8001514 <__libc_init_array+0x24>
 8001500:	2600      	movs	r6, #0
 8001502:	f001 fa45 	bl	8002990 <_init>
 8001506:	4d0a      	ldr	r5, [pc, #40]	; (8001530 <__libc_init_array+0x40>)
 8001508:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <__libc_init_array+0x44>)
 800150a:	1b64      	subs	r4, r4, r5
 800150c:	10a4      	asrs	r4, r4, #2
 800150e:	42a6      	cmp	r6, r4
 8001510:	d105      	bne.n	800151e <__libc_init_array+0x2e>
 8001512:	bd70      	pop	{r4, r5, r6, pc}
 8001514:	00b3      	lsls	r3, r6, #2
 8001516:	58eb      	ldr	r3, [r5, r3]
 8001518:	4798      	blx	r3
 800151a:	3601      	adds	r6, #1
 800151c:	e7ee      	b.n	80014fc <__libc_init_array+0xc>
 800151e:	00b3      	lsls	r3, r6, #2
 8001520:	58eb      	ldr	r3, [r5, r3]
 8001522:	4798      	blx	r3
 8001524:	3601      	adds	r6, #1
 8001526:	e7f2      	b.n	800150e <__libc_init_array+0x1e>
 8001528:	0800327c 	.word	0x0800327c
 800152c:	0800327c 	.word	0x0800327c
 8001530:	0800327c 	.word	0x0800327c
 8001534:	08003280 	.word	0x08003280

08001538 <memset>:
 8001538:	0003      	movs	r3, r0
 800153a:	1812      	adds	r2, r2, r0
 800153c:	4293      	cmp	r3, r2
 800153e:	d100      	bne.n	8001542 <memset+0xa>
 8001540:	4770      	bx	lr
 8001542:	7019      	strb	r1, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	e7f9      	b.n	800153c <memset+0x4>

08001548 <iprintf>:
 8001548:	b40f      	push	{r0, r1, r2, r3}
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <iprintf+0x30>)
 800154c:	b513      	push	{r0, r1, r4, lr}
 800154e:	681c      	ldr	r4, [r3, #0]
 8001550:	2c00      	cmp	r4, #0
 8001552:	d005      	beq.n	8001560 <iprintf+0x18>
 8001554:	69a3      	ldr	r3, [r4, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <iprintf+0x18>
 800155a:	0020      	movs	r0, r4
 800155c:	f000 fa3c 	bl	80019d8 <__sinit>
 8001560:	ab05      	add	r3, sp, #20
 8001562:	9a04      	ldr	r2, [sp, #16]
 8001564:	68a1      	ldr	r1, [r4, #8]
 8001566:	0020      	movs	r0, r4
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f000 fc05 	bl	8001d78 <_vfiprintf_r>
 800156e:	bc16      	pop	{r1, r2, r4}
 8001570:	bc08      	pop	{r3}
 8001572:	b004      	add	sp, #16
 8001574:	4718      	bx	r3
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	200000c4 	.word	0x200000c4

0800157c <_puts_r>:
 800157c:	b570      	push	{r4, r5, r6, lr}
 800157e:	0005      	movs	r5, r0
 8001580:	000e      	movs	r6, r1
 8001582:	2800      	cmp	r0, #0
 8001584:	d004      	beq.n	8001590 <_puts_r+0x14>
 8001586:	6983      	ldr	r3, [r0, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <_puts_r+0x14>
 800158c:	f000 fa24 	bl	80019d8 <__sinit>
 8001590:	69ab      	ldr	r3, [r5, #24]
 8001592:	68ac      	ldr	r4, [r5, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_puts_r+0x22>
 8001598:	0028      	movs	r0, r5
 800159a:	f000 fa1d 	bl	80019d8 <__sinit>
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <_puts_r+0xb4>)
 80015a0:	429c      	cmp	r4, r3
 80015a2:	d10f      	bne.n	80015c4 <_puts_r+0x48>
 80015a4:	686c      	ldr	r4, [r5, #4]
 80015a6:	89a3      	ldrh	r3, [r4, #12]
 80015a8:	071b      	lsls	r3, r3, #28
 80015aa:	d502      	bpl.n	80015b2 <_puts_r+0x36>
 80015ac:	6923      	ldr	r3, [r4, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d11f      	bne.n	80015f2 <_puts_r+0x76>
 80015b2:	0021      	movs	r1, r4
 80015b4:	0028      	movs	r0, r5
 80015b6:	f000 f8a1 	bl	80016fc <__swsetup_r>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d019      	beq.n	80015f2 <_puts_r+0x76>
 80015be:	2001      	movs	r0, #1
 80015c0:	4240      	negs	r0, r0
 80015c2:	bd70      	pop	{r4, r5, r6, pc}
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <_puts_r+0xb8>)
 80015c6:	429c      	cmp	r4, r3
 80015c8:	d101      	bne.n	80015ce <_puts_r+0x52>
 80015ca:	68ac      	ldr	r4, [r5, #8]
 80015cc:	e7eb      	b.n	80015a6 <_puts_r+0x2a>
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <_puts_r+0xbc>)
 80015d0:	429c      	cmp	r4, r3
 80015d2:	d1e8      	bne.n	80015a6 <_puts_r+0x2a>
 80015d4:	68ec      	ldr	r4, [r5, #12]
 80015d6:	e7e6      	b.n	80015a6 <_puts_r+0x2a>
 80015d8:	3601      	adds	r6, #1
 80015da:	60a3      	str	r3, [r4, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da04      	bge.n	80015ea <_puts_r+0x6e>
 80015e0:	69a2      	ldr	r2, [r4, #24]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dc16      	bgt.n	8001614 <_puts_r+0x98>
 80015e6:	290a      	cmp	r1, #10
 80015e8:	d014      	beq.n	8001614 <_puts_r+0x98>
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	6022      	str	r2, [r4, #0]
 80015f0:	7019      	strb	r1, [r3, #0]
 80015f2:	68a3      	ldr	r3, [r4, #8]
 80015f4:	7831      	ldrb	r1, [r6, #0]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	2900      	cmp	r1, #0
 80015fa:	d1ed      	bne.n	80015d8 <_puts_r+0x5c>
 80015fc:	60a3      	str	r3, [r4, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	da0f      	bge.n	8001622 <_puts_r+0xa6>
 8001602:	0022      	movs	r2, r4
 8001604:	310a      	adds	r1, #10
 8001606:	0028      	movs	r0, r5
 8001608:	f000 f822 	bl	8001650 <__swbuf_r>
 800160c:	1c43      	adds	r3, r0, #1
 800160e:	d0d6      	beq.n	80015be <_puts_r+0x42>
 8001610:	200a      	movs	r0, #10
 8001612:	e7d6      	b.n	80015c2 <_puts_r+0x46>
 8001614:	0022      	movs	r2, r4
 8001616:	0028      	movs	r0, r5
 8001618:	f000 f81a 	bl	8001650 <__swbuf_r>
 800161c:	1c43      	adds	r3, r0, #1
 800161e:	d1e8      	bne.n	80015f2 <_puts_r+0x76>
 8001620:	e7cd      	b.n	80015be <_puts_r+0x42>
 8001622:	200a      	movs	r0, #10
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	6022      	str	r2, [r4, #0]
 800162a:	7018      	strb	r0, [r3, #0]
 800162c:	e7c9      	b.n	80015c2 <_puts_r+0x46>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	080031ec 	.word	0x080031ec
 8001634:	0800320c 	.word	0x0800320c
 8001638:	080031cc 	.word	0x080031cc

0800163c <puts>:
 800163c:	b510      	push	{r4, lr}
 800163e:	4b03      	ldr	r3, [pc, #12]	; (800164c <puts+0x10>)
 8001640:	0001      	movs	r1, r0
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	f7ff ff9a 	bl	800157c <_puts_r>
 8001648:	bd10      	pop	{r4, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	200000c4 	.word	0x200000c4

08001650 <__swbuf_r>:
 8001650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001652:	0005      	movs	r5, r0
 8001654:	000e      	movs	r6, r1
 8001656:	0014      	movs	r4, r2
 8001658:	2800      	cmp	r0, #0
 800165a:	d004      	beq.n	8001666 <__swbuf_r+0x16>
 800165c:	6983      	ldr	r3, [r0, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <__swbuf_r+0x16>
 8001662:	f000 f9b9 	bl	80019d8 <__sinit>
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <__swbuf_r+0xa0>)
 8001668:	429c      	cmp	r4, r3
 800166a:	d12d      	bne.n	80016c8 <__swbuf_r+0x78>
 800166c:	686c      	ldr	r4, [r5, #4]
 800166e:	69a3      	ldr	r3, [r4, #24]
 8001670:	60a3      	str	r3, [r4, #8]
 8001672:	89a3      	ldrh	r3, [r4, #12]
 8001674:	071b      	lsls	r3, r3, #28
 8001676:	d531      	bpl.n	80016dc <__swbuf_r+0x8c>
 8001678:	6923      	ldr	r3, [r4, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d02e      	beq.n	80016dc <__swbuf_r+0x8c>
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	6922      	ldr	r2, [r4, #16]
 8001682:	b2f7      	uxtb	r7, r6
 8001684:	1a98      	subs	r0, r3, r2
 8001686:	6963      	ldr	r3, [r4, #20]
 8001688:	b2f6      	uxtb	r6, r6
 800168a:	4283      	cmp	r3, r0
 800168c:	dc05      	bgt.n	800169a <__swbuf_r+0x4a>
 800168e:	0021      	movs	r1, r4
 8001690:	0028      	movs	r0, r5
 8001692:	f000 f933 	bl	80018fc <_fflush_r>
 8001696:	2800      	cmp	r0, #0
 8001698:	d126      	bne.n	80016e8 <__swbuf_r+0x98>
 800169a:	68a3      	ldr	r3, [r4, #8]
 800169c:	3001      	adds	r0, #1
 800169e:	3b01      	subs	r3, #1
 80016a0:	60a3      	str	r3, [r4, #8]
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	6022      	str	r2, [r4, #0]
 80016a8:	701f      	strb	r7, [r3, #0]
 80016aa:	6963      	ldr	r3, [r4, #20]
 80016ac:	4283      	cmp	r3, r0
 80016ae:	d004      	beq.n	80016ba <__swbuf_r+0x6a>
 80016b0:	89a3      	ldrh	r3, [r4, #12]
 80016b2:	07db      	lsls	r3, r3, #31
 80016b4:	d51a      	bpl.n	80016ec <__swbuf_r+0x9c>
 80016b6:	2e0a      	cmp	r6, #10
 80016b8:	d118      	bne.n	80016ec <__swbuf_r+0x9c>
 80016ba:	0021      	movs	r1, r4
 80016bc:	0028      	movs	r0, r5
 80016be:	f000 f91d 	bl	80018fc <_fflush_r>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	d012      	beq.n	80016ec <__swbuf_r+0x9c>
 80016c6:	e00f      	b.n	80016e8 <__swbuf_r+0x98>
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <__swbuf_r+0xa4>)
 80016ca:	429c      	cmp	r4, r3
 80016cc:	d101      	bne.n	80016d2 <__swbuf_r+0x82>
 80016ce:	68ac      	ldr	r4, [r5, #8]
 80016d0:	e7cd      	b.n	800166e <__swbuf_r+0x1e>
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <__swbuf_r+0xa8>)
 80016d4:	429c      	cmp	r4, r3
 80016d6:	d1ca      	bne.n	800166e <__swbuf_r+0x1e>
 80016d8:	68ec      	ldr	r4, [r5, #12]
 80016da:	e7c8      	b.n	800166e <__swbuf_r+0x1e>
 80016dc:	0021      	movs	r1, r4
 80016de:	0028      	movs	r0, r5
 80016e0:	f000 f80c 	bl	80016fc <__swsetup_r>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d0ca      	beq.n	800167e <__swbuf_r+0x2e>
 80016e8:	2601      	movs	r6, #1
 80016ea:	4276      	negs	r6, r6
 80016ec:	0030      	movs	r0, r6
 80016ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016f0:	080031ec 	.word	0x080031ec
 80016f4:	0800320c 	.word	0x0800320c
 80016f8:	080031cc 	.word	0x080031cc

080016fc <__swsetup_r>:
 80016fc:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <__swsetup_r+0xdc>)
 80016fe:	b570      	push	{r4, r5, r6, lr}
 8001700:	681d      	ldr	r5, [r3, #0]
 8001702:	0006      	movs	r6, r0
 8001704:	000c      	movs	r4, r1
 8001706:	2d00      	cmp	r5, #0
 8001708:	d005      	beq.n	8001716 <__swsetup_r+0x1a>
 800170a:	69ab      	ldr	r3, [r5, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <__swsetup_r+0x1a>
 8001710:	0028      	movs	r0, r5
 8001712:	f000 f961 	bl	80019d8 <__sinit>
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <__swsetup_r+0xe0>)
 8001718:	429c      	cmp	r4, r3
 800171a:	d10f      	bne.n	800173c <__swsetup_r+0x40>
 800171c:	686c      	ldr	r4, [r5, #4]
 800171e:	230c      	movs	r3, #12
 8001720:	5ee2      	ldrsh	r2, [r4, r3]
 8001722:	b293      	uxth	r3, r2
 8001724:	0719      	lsls	r1, r3, #28
 8001726:	d42d      	bmi.n	8001784 <__swsetup_r+0x88>
 8001728:	06d9      	lsls	r1, r3, #27
 800172a:	d411      	bmi.n	8001750 <__swsetup_r+0x54>
 800172c:	2309      	movs	r3, #9
 800172e:	2001      	movs	r0, #1
 8001730:	6033      	str	r3, [r6, #0]
 8001732:	3337      	adds	r3, #55	; 0x37
 8001734:	4313      	orrs	r3, r2
 8001736:	81a3      	strh	r3, [r4, #12]
 8001738:	4240      	negs	r0, r0
 800173a:	bd70      	pop	{r4, r5, r6, pc}
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <__swsetup_r+0xe4>)
 800173e:	429c      	cmp	r4, r3
 8001740:	d101      	bne.n	8001746 <__swsetup_r+0x4a>
 8001742:	68ac      	ldr	r4, [r5, #8]
 8001744:	e7eb      	b.n	800171e <__swsetup_r+0x22>
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <__swsetup_r+0xe8>)
 8001748:	429c      	cmp	r4, r3
 800174a:	d1e8      	bne.n	800171e <__swsetup_r+0x22>
 800174c:	68ec      	ldr	r4, [r5, #12]
 800174e:	e7e6      	b.n	800171e <__swsetup_r+0x22>
 8001750:	075b      	lsls	r3, r3, #29
 8001752:	d513      	bpl.n	800177c <__swsetup_r+0x80>
 8001754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001756:	2900      	cmp	r1, #0
 8001758:	d008      	beq.n	800176c <__swsetup_r+0x70>
 800175a:	0023      	movs	r3, r4
 800175c:	3344      	adds	r3, #68	; 0x44
 800175e:	4299      	cmp	r1, r3
 8001760:	d002      	beq.n	8001768 <__swsetup_r+0x6c>
 8001762:	0030      	movs	r0, r6
 8001764:	f000 fa38 	bl	8001bd8 <_free_r>
 8001768:	2300      	movs	r3, #0
 800176a:	6363      	str	r3, [r4, #52]	; 0x34
 800176c:	2224      	movs	r2, #36	; 0x24
 800176e:	89a3      	ldrh	r3, [r4, #12]
 8001770:	4393      	bics	r3, r2
 8001772:	81a3      	strh	r3, [r4, #12]
 8001774:	2300      	movs	r3, #0
 8001776:	6063      	str	r3, [r4, #4]
 8001778:	6923      	ldr	r3, [r4, #16]
 800177a:	6023      	str	r3, [r4, #0]
 800177c:	2308      	movs	r3, #8
 800177e:	89a2      	ldrh	r2, [r4, #12]
 8001780:	4313      	orrs	r3, r2
 8001782:	81a3      	strh	r3, [r4, #12]
 8001784:	6923      	ldr	r3, [r4, #16]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10b      	bne.n	80017a2 <__swsetup_r+0xa6>
 800178a:	21a0      	movs	r1, #160	; 0xa0
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	89a3      	ldrh	r3, [r4, #12]
 8001790:	0089      	lsls	r1, r1, #2
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	400b      	ands	r3, r1
 8001796:	4293      	cmp	r3, r2
 8001798:	d003      	beq.n	80017a2 <__swsetup_r+0xa6>
 800179a:	0021      	movs	r1, r4
 800179c:	0030      	movs	r0, r6
 800179e:	f000 f9d7 	bl	8001b50 <__smakebuf_r>
 80017a2:	2301      	movs	r3, #1
 80017a4:	89a2      	ldrh	r2, [r4, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	d011      	beq.n	80017ce <__swsetup_r+0xd2>
 80017aa:	2300      	movs	r3, #0
 80017ac:	60a3      	str	r3, [r4, #8]
 80017ae:	6963      	ldr	r3, [r4, #20]
 80017b0:	425b      	negs	r3, r3
 80017b2:	61a3      	str	r3, [r4, #24]
 80017b4:	2000      	movs	r0, #0
 80017b6:	6923      	ldr	r3, [r4, #16]
 80017b8:	4283      	cmp	r3, r0
 80017ba:	d1be      	bne.n	800173a <__swsetup_r+0x3e>
 80017bc:	230c      	movs	r3, #12
 80017be:	5ee2      	ldrsh	r2, [r4, r3]
 80017c0:	0613      	lsls	r3, r2, #24
 80017c2:	d5ba      	bpl.n	800173a <__swsetup_r+0x3e>
 80017c4:	2340      	movs	r3, #64	; 0x40
 80017c6:	4313      	orrs	r3, r2
 80017c8:	81a3      	strh	r3, [r4, #12]
 80017ca:	3801      	subs	r0, #1
 80017cc:	e7b5      	b.n	800173a <__swsetup_r+0x3e>
 80017ce:	0792      	lsls	r2, r2, #30
 80017d0:	d400      	bmi.n	80017d4 <__swsetup_r+0xd8>
 80017d2:	6963      	ldr	r3, [r4, #20]
 80017d4:	60a3      	str	r3, [r4, #8]
 80017d6:	e7ed      	b.n	80017b4 <__swsetup_r+0xb8>
 80017d8:	200000c4 	.word	0x200000c4
 80017dc:	080031ec 	.word	0x080031ec
 80017e0:	0800320c 	.word	0x0800320c
 80017e4:	080031cc 	.word	0x080031cc

080017e8 <__sflush_r>:
 80017e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017ea:	898a      	ldrh	r2, [r1, #12]
 80017ec:	0005      	movs	r5, r0
 80017ee:	000c      	movs	r4, r1
 80017f0:	0713      	lsls	r3, r2, #28
 80017f2:	d460      	bmi.n	80018b6 <__sflush_r+0xce>
 80017f4:	684b      	ldr	r3, [r1, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	dc04      	bgt.n	8001804 <__sflush_r+0x1c>
 80017fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	dc01      	bgt.n	8001804 <__sflush_r+0x1c>
 8001800:	2000      	movs	r0, #0
 8001802:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001804:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001806:	2f00      	cmp	r7, #0
 8001808:	d0fa      	beq.n	8001800 <__sflush_r+0x18>
 800180a:	2300      	movs	r3, #0
 800180c:	682e      	ldr	r6, [r5, #0]
 800180e:	602b      	str	r3, [r5, #0]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	015b      	lsls	r3, r3, #5
 8001814:	6a21      	ldr	r1, [r4, #32]
 8001816:	401a      	ands	r2, r3
 8001818:	d034      	beq.n	8001884 <__sflush_r+0x9c>
 800181a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800181c:	89a3      	ldrh	r3, [r4, #12]
 800181e:	075b      	lsls	r3, r3, #29
 8001820:	d506      	bpl.n	8001830 <__sflush_r+0x48>
 8001822:	6863      	ldr	r3, [r4, #4]
 8001824:	1ac0      	subs	r0, r0, r3
 8001826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <__sflush_r+0x48>
 800182c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800182e:	1ac0      	subs	r0, r0, r3
 8001830:	0002      	movs	r2, r0
 8001832:	6a21      	ldr	r1, [r4, #32]
 8001834:	2300      	movs	r3, #0
 8001836:	0028      	movs	r0, r5
 8001838:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800183a:	47b8      	blx	r7
 800183c:	89a1      	ldrh	r1, [r4, #12]
 800183e:	1c43      	adds	r3, r0, #1
 8001840:	d106      	bne.n	8001850 <__sflush_r+0x68>
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	2b1d      	cmp	r3, #29
 8001846:	d830      	bhi.n	80018aa <__sflush_r+0xc2>
 8001848:	4a2b      	ldr	r2, [pc, #172]	; (80018f8 <__sflush_r+0x110>)
 800184a:	40da      	lsrs	r2, r3
 800184c:	07d3      	lsls	r3, r2, #31
 800184e:	d52c      	bpl.n	80018aa <__sflush_r+0xc2>
 8001850:	2300      	movs	r3, #0
 8001852:	6063      	str	r3, [r4, #4]
 8001854:	6923      	ldr	r3, [r4, #16]
 8001856:	6023      	str	r3, [r4, #0]
 8001858:	04cb      	lsls	r3, r1, #19
 800185a:	d505      	bpl.n	8001868 <__sflush_r+0x80>
 800185c:	1c43      	adds	r3, r0, #1
 800185e:	d102      	bne.n	8001866 <__sflush_r+0x7e>
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d100      	bne.n	8001868 <__sflush_r+0x80>
 8001866:	6560      	str	r0, [r4, #84]	; 0x54
 8001868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800186a:	602e      	str	r6, [r5, #0]
 800186c:	2900      	cmp	r1, #0
 800186e:	d0c7      	beq.n	8001800 <__sflush_r+0x18>
 8001870:	0023      	movs	r3, r4
 8001872:	3344      	adds	r3, #68	; 0x44
 8001874:	4299      	cmp	r1, r3
 8001876:	d002      	beq.n	800187e <__sflush_r+0x96>
 8001878:	0028      	movs	r0, r5
 800187a:	f000 f9ad 	bl	8001bd8 <_free_r>
 800187e:	2000      	movs	r0, #0
 8001880:	6360      	str	r0, [r4, #52]	; 0x34
 8001882:	e7be      	b.n	8001802 <__sflush_r+0x1a>
 8001884:	2301      	movs	r3, #1
 8001886:	0028      	movs	r0, r5
 8001888:	47b8      	blx	r7
 800188a:	1c43      	adds	r3, r0, #1
 800188c:	d1c6      	bne.n	800181c <__sflush_r+0x34>
 800188e:	682b      	ldr	r3, [r5, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0c3      	beq.n	800181c <__sflush_r+0x34>
 8001894:	2b1d      	cmp	r3, #29
 8001896:	d001      	beq.n	800189c <__sflush_r+0xb4>
 8001898:	2b16      	cmp	r3, #22
 800189a:	d101      	bne.n	80018a0 <__sflush_r+0xb8>
 800189c:	602e      	str	r6, [r5, #0]
 800189e:	e7af      	b.n	8001800 <__sflush_r+0x18>
 80018a0:	2340      	movs	r3, #64	; 0x40
 80018a2:	89a2      	ldrh	r2, [r4, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	81a3      	strh	r3, [r4, #12]
 80018a8:	e7ab      	b.n	8001802 <__sflush_r+0x1a>
 80018aa:	2340      	movs	r3, #64	; 0x40
 80018ac:	430b      	orrs	r3, r1
 80018ae:	2001      	movs	r0, #1
 80018b0:	81a3      	strh	r3, [r4, #12]
 80018b2:	4240      	negs	r0, r0
 80018b4:	e7a5      	b.n	8001802 <__sflush_r+0x1a>
 80018b6:	690f      	ldr	r7, [r1, #16]
 80018b8:	2f00      	cmp	r7, #0
 80018ba:	d0a1      	beq.n	8001800 <__sflush_r+0x18>
 80018bc:	680b      	ldr	r3, [r1, #0]
 80018be:	600f      	str	r7, [r1, #0]
 80018c0:	1bdb      	subs	r3, r3, r7
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2300      	movs	r3, #0
 80018c6:	0792      	lsls	r2, r2, #30
 80018c8:	d100      	bne.n	80018cc <__sflush_r+0xe4>
 80018ca:	694b      	ldr	r3, [r1, #20]
 80018cc:	60a3      	str	r3, [r4, #8]
 80018ce:	9b01      	ldr	r3, [sp, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	dc00      	bgt.n	80018d6 <__sflush_r+0xee>
 80018d4:	e794      	b.n	8001800 <__sflush_r+0x18>
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	003a      	movs	r2, r7
 80018da:	6a21      	ldr	r1, [r4, #32]
 80018dc:	0028      	movs	r0, r5
 80018de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80018e0:	47b0      	blx	r6
 80018e2:	2800      	cmp	r0, #0
 80018e4:	dc03      	bgt.n	80018ee <__sflush_r+0x106>
 80018e6:	2340      	movs	r3, #64	; 0x40
 80018e8:	89a2      	ldrh	r2, [r4, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	e7df      	b.n	80018ae <__sflush_r+0xc6>
 80018ee:	9b01      	ldr	r3, [sp, #4]
 80018f0:	183f      	adds	r7, r7, r0
 80018f2:	1a1b      	subs	r3, r3, r0
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	e7ea      	b.n	80018ce <__sflush_r+0xe6>
 80018f8:	20400001 	.word	0x20400001

080018fc <_fflush_r>:
 80018fc:	690b      	ldr	r3, [r1, #16]
 80018fe:	b570      	push	{r4, r5, r6, lr}
 8001900:	0005      	movs	r5, r0
 8001902:	000c      	movs	r4, r1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <_fflush_r+0x10>
 8001908:	2000      	movs	r0, #0
 800190a:	bd70      	pop	{r4, r5, r6, pc}
 800190c:	2800      	cmp	r0, #0
 800190e:	d004      	beq.n	800191a <_fflush_r+0x1e>
 8001910:	6983      	ldr	r3, [r0, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <_fflush_r+0x1e>
 8001916:	f000 f85f 	bl	80019d8 <__sinit>
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <_fflush_r+0x4c>)
 800191c:	429c      	cmp	r4, r3
 800191e:	d109      	bne.n	8001934 <_fflush_r+0x38>
 8001920:	686c      	ldr	r4, [r5, #4]
 8001922:	220c      	movs	r2, #12
 8001924:	5ea3      	ldrsh	r3, [r4, r2]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0ee      	beq.n	8001908 <_fflush_r+0xc>
 800192a:	0021      	movs	r1, r4
 800192c:	0028      	movs	r0, r5
 800192e:	f7ff ff5b 	bl	80017e8 <__sflush_r>
 8001932:	e7ea      	b.n	800190a <_fflush_r+0xe>
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <_fflush_r+0x50>)
 8001936:	429c      	cmp	r4, r3
 8001938:	d101      	bne.n	800193e <_fflush_r+0x42>
 800193a:	68ac      	ldr	r4, [r5, #8]
 800193c:	e7f1      	b.n	8001922 <_fflush_r+0x26>
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <_fflush_r+0x54>)
 8001940:	429c      	cmp	r4, r3
 8001942:	d1ee      	bne.n	8001922 <_fflush_r+0x26>
 8001944:	68ec      	ldr	r4, [r5, #12]
 8001946:	e7ec      	b.n	8001922 <_fflush_r+0x26>
 8001948:	080031ec 	.word	0x080031ec
 800194c:	0800320c 	.word	0x0800320c
 8001950:	080031cc 	.word	0x080031cc

08001954 <std>:
 8001954:	2300      	movs	r3, #0
 8001956:	b510      	push	{r4, lr}
 8001958:	0004      	movs	r4, r0
 800195a:	6003      	str	r3, [r0, #0]
 800195c:	6043      	str	r3, [r0, #4]
 800195e:	6083      	str	r3, [r0, #8]
 8001960:	8181      	strh	r1, [r0, #12]
 8001962:	6643      	str	r3, [r0, #100]	; 0x64
 8001964:	81c2      	strh	r2, [r0, #14]
 8001966:	6103      	str	r3, [r0, #16]
 8001968:	6143      	str	r3, [r0, #20]
 800196a:	6183      	str	r3, [r0, #24]
 800196c:	0019      	movs	r1, r3
 800196e:	2208      	movs	r2, #8
 8001970:	305c      	adds	r0, #92	; 0x5c
 8001972:	f7ff fde1 	bl	8001538 <memset>
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <std+0x38>)
 8001978:	6224      	str	r4, [r4, #32]
 800197a:	6263      	str	r3, [r4, #36]	; 0x24
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <std+0x3c>)
 800197e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <std+0x40>)
 8001982:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <std+0x44>)
 8001986:	6323      	str	r3, [r4, #48]	; 0x30
 8001988:	bd10      	pop	{r4, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	080022b5 	.word	0x080022b5
 8001990:	080022dd 	.word	0x080022dd
 8001994:	08002315 	.word	0x08002315
 8001998:	08002341 	.word	0x08002341

0800199c <_cleanup_r>:
 800199c:	b510      	push	{r4, lr}
 800199e:	4902      	ldr	r1, [pc, #8]	; (80019a8 <_cleanup_r+0xc>)
 80019a0:	f000 f88c 	bl	8001abc <_fwalk_reent>
 80019a4:	bd10      	pop	{r4, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	080018fd 	.word	0x080018fd

080019ac <__sfmoreglue>:
 80019ac:	b570      	push	{r4, r5, r6, lr}
 80019ae:	2568      	movs	r5, #104	; 0x68
 80019b0:	1e4a      	subs	r2, r1, #1
 80019b2:	4355      	muls	r5, r2
 80019b4:	000e      	movs	r6, r1
 80019b6:	0029      	movs	r1, r5
 80019b8:	3174      	adds	r1, #116	; 0x74
 80019ba:	f000 f957 	bl	8001c6c <_malloc_r>
 80019be:	1e04      	subs	r4, r0, #0
 80019c0:	d008      	beq.n	80019d4 <__sfmoreglue+0x28>
 80019c2:	2100      	movs	r1, #0
 80019c4:	002a      	movs	r2, r5
 80019c6:	6001      	str	r1, [r0, #0]
 80019c8:	6046      	str	r6, [r0, #4]
 80019ca:	300c      	adds	r0, #12
 80019cc:	60a0      	str	r0, [r4, #8]
 80019ce:	3268      	adds	r2, #104	; 0x68
 80019d0:	f7ff fdb2 	bl	8001538 <memset>
 80019d4:	0020      	movs	r0, r4
 80019d6:	bd70      	pop	{r4, r5, r6, pc}

080019d8 <__sinit>:
 80019d8:	6983      	ldr	r3, [r0, #24]
 80019da:	b513      	push	{r0, r1, r4, lr}
 80019dc:	0004      	movs	r4, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d128      	bne.n	8001a34 <__sinit+0x5c>
 80019e2:	6483      	str	r3, [r0, #72]	; 0x48
 80019e4:	64c3      	str	r3, [r0, #76]	; 0x4c
 80019e6:	6503      	str	r3, [r0, #80]	; 0x50
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <__sinit+0x60>)
 80019ea:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <__sinit+0x64>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6282      	str	r2, [r0, #40]	; 0x28
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	4298      	cmp	r0, r3
 80019f4:	d101      	bne.n	80019fa <__sinit+0x22>
 80019f6:	2301      	movs	r3, #1
 80019f8:	6183      	str	r3, [r0, #24]
 80019fa:	0020      	movs	r0, r4
 80019fc:	f000 f820 	bl	8001a40 <__sfp>
 8001a00:	6060      	str	r0, [r4, #4]
 8001a02:	0020      	movs	r0, r4
 8001a04:	f000 f81c 	bl	8001a40 <__sfp>
 8001a08:	60a0      	str	r0, [r4, #8]
 8001a0a:	0020      	movs	r0, r4
 8001a0c:	f000 f818 	bl	8001a40 <__sfp>
 8001a10:	2200      	movs	r2, #0
 8001a12:	60e0      	str	r0, [r4, #12]
 8001a14:	2104      	movs	r1, #4
 8001a16:	6860      	ldr	r0, [r4, #4]
 8001a18:	f7ff ff9c 	bl	8001954 <std>
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2109      	movs	r1, #9
 8001a20:	68a0      	ldr	r0, [r4, #8]
 8001a22:	f7ff ff97 	bl	8001954 <std>
 8001a26:	2202      	movs	r2, #2
 8001a28:	2112      	movs	r1, #18
 8001a2a:	68e0      	ldr	r0, [r4, #12]
 8001a2c:	f7ff ff92 	bl	8001954 <std>
 8001a30:	2301      	movs	r3, #1
 8001a32:	61a3      	str	r3, [r4, #24]
 8001a34:	bd13      	pop	{r0, r1, r4, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	080031c8 	.word	0x080031c8
 8001a3c:	0800199d 	.word	0x0800199d

08001a40 <__sfp>:
 8001a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <__sfp+0x74>)
 8001a44:	0007      	movs	r7, r0
 8001a46:	681e      	ldr	r6, [r3, #0]
 8001a48:	69b3      	ldr	r3, [r6, #24]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <__sfp+0x14>
 8001a4e:	0030      	movs	r0, r6
 8001a50:	f7ff ffc2 	bl	80019d8 <__sinit>
 8001a54:	3648      	adds	r6, #72	; 0x48
 8001a56:	68b4      	ldr	r4, [r6, #8]
 8001a58:	6873      	ldr	r3, [r6, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	d504      	bpl.n	8001a68 <__sfp+0x28>
 8001a5e:	6833      	ldr	r3, [r6, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <__sfp+0x34>
 8001a64:	6836      	ldr	r6, [r6, #0]
 8001a66:	e7f6      	b.n	8001a56 <__sfp+0x16>
 8001a68:	220c      	movs	r2, #12
 8001a6a:	5ea5      	ldrsh	r5, [r4, r2]
 8001a6c:	2d00      	cmp	r5, #0
 8001a6e:	d00d      	beq.n	8001a8c <__sfp+0x4c>
 8001a70:	3468      	adds	r4, #104	; 0x68
 8001a72:	e7f2      	b.n	8001a5a <__sfp+0x1a>
 8001a74:	2104      	movs	r1, #4
 8001a76:	0038      	movs	r0, r7
 8001a78:	f7ff ff98 	bl	80019ac <__sfmoreglue>
 8001a7c:	6030      	str	r0, [r6, #0]
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d1f0      	bne.n	8001a64 <__sfp+0x24>
 8001a82:	230c      	movs	r3, #12
 8001a84:	0004      	movs	r4, r0
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	0020      	movs	r0, r4
 8001a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a8c:	0020      	movs	r0, r4
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <__sfp+0x78>)
 8001a90:	6665      	str	r5, [r4, #100]	; 0x64
 8001a92:	6025      	str	r5, [r4, #0]
 8001a94:	6065      	str	r5, [r4, #4]
 8001a96:	60a5      	str	r5, [r4, #8]
 8001a98:	60e3      	str	r3, [r4, #12]
 8001a9a:	6125      	str	r5, [r4, #16]
 8001a9c:	6165      	str	r5, [r4, #20]
 8001a9e:	61a5      	str	r5, [r4, #24]
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	0029      	movs	r1, r5
 8001aa4:	305c      	adds	r0, #92	; 0x5c
 8001aa6:	f7ff fd47 	bl	8001538 <memset>
 8001aaa:	6365      	str	r5, [r4, #52]	; 0x34
 8001aac:	63a5      	str	r5, [r4, #56]	; 0x38
 8001aae:	64a5      	str	r5, [r4, #72]	; 0x48
 8001ab0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001ab2:	e7e9      	b.n	8001a88 <__sfp+0x48>
 8001ab4:	080031c8 	.word	0x080031c8
 8001ab8:	ffff0001 	.word	0xffff0001

08001abc <_fwalk_reent>:
 8001abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001abe:	0004      	movs	r4, r0
 8001ac0:	0007      	movs	r7, r0
 8001ac2:	2600      	movs	r6, #0
 8001ac4:	9101      	str	r1, [sp, #4]
 8001ac6:	3448      	adds	r4, #72	; 0x48
 8001ac8:	2c00      	cmp	r4, #0
 8001aca:	d101      	bne.n	8001ad0 <_fwalk_reent+0x14>
 8001acc:	0030      	movs	r0, r6
 8001ace:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001ad0:	6863      	ldr	r3, [r4, #4]
 8001ad2:	68a5      	ldr	r5, [r4, #8]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	9b00      	ldr	r3, [sp, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	d501      	bpl.n	8001ae2 <_fwalk_reent+0x26>
 8001ade:	6824      	ldr	r4, [r4, #0]
 8001ae0:	e7f2      	b.n	8001ac8 <_fwalk_reent+0xc>
 8001ae2:	89ab      	ldrh	r3, [r5, #12]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d908      	bls.n	8001afa <_fwalk_reent+0x3e>
 8001ae8:	220e      	movs	r2, #14
 8001aea:	5eab      	ldrsh	r3, [r5, r2]
 8001aec:	3301      	adds	r3, #1
 8001aee:	d004      	beq.n	8001afa <_fwalk_reent+0x3e>
 8001af0:	0029      	movs	r1, r5
 8001af2:	0038      	movs	r0, r7
 8001af4:	9b01      	ldr	r3, [sp, #4]
 8001af6:	4798      	blx	r3
 8001af8:	4306      	orrs	r6, r0
 8001afa:	3568      	adds	r5, #104	; 0x68
 8001afc:	e7eb      	b.n	8001ad6 <_fwalk_reent+0x1a>
	...

08001b00 <__swhatbuf_r>:
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	000e      	movs	r6, r1
 8001b04:	001d      	movs	r5, r3
 8001b06:	230e      	movs	r3, #14
 8001b08:	5ec9      	ldrsh	r1, [r1, r3]
 8001b0a:	b096      	sub	sp, #88	; 0x58
 8001b0c:	0014      	movs	r4, r2
 8001b0e:	2900      	cmp	r1, #0
 8001b10:	da07      	bge.n	8001b22 <__swhatbuf_r+0x22>
 8001b12:	2300      	movs	r3, #0
 8001b14:	602b      	str	r3, [r5, #0]
 8001b16:	89b3      	ldrh	r3, [r6, #12]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	d411      	bmi.n	8001b40 <__swhatbuf_r+0x40>
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	e00f      	b.n	8001b42 <__swhatbuf_r+0x42>
 8001b22:	466a      	mov	r2, sp
 8001b24:	f000 fc38 	bl	8002398 <_fstat_r>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	dbf2      	blt.n	8001b12 <__swhatbuf_r+0x12>
 8001b2c:	22f0      	movs	r2, #240	; 0xf0
 8001b2e:	9b01      	ldr	r3, [sp, #4]
 8001b30:	0212      	lsls	r2, r2, #8
 8001b32:	4013      	ands	r3, r2
 8001b34:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <__swhatbuf_r+0x4c>)
 8001b36:	189b      	adds	r3, r3, r2
 8001b38:	425a      	negs	r2, r3
 8001b3a:	4153      	adcs	r3, r2
 8001b3c:	602b      	str	r3, [r5, #0]
 8001b3e:	e7ed      	b.n	8001b1c <__swhatbuf_r+0x1c>
 8001b40:	2340      	movs	r3, #64	; 0x40
 8001b42:	2000      	movs	r0, #0
 8001b44:	6023      	str	r3, [r4, #0]
 8001b46:	b016      	add	sp, #88	; 0x58
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	ffffe000 	.word	0xffffe000

08001b50 <__smakebuf_r>:
 8001b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b52:	2602      	movs	r6, #2
 8001b54:	898b      	ldrh	r3, [r1, #12]
 8001b56:	0005      	movs	r5, r0
 8001b58:	000c      	movs	r4, r1
 8001b5a:	4233      	tst	r3, r6
 8001b5c:	d006      	beq.n	8001b6c <__smakebuf_r+0x1c>
 8001b5e:	0023      	movs	r3, r4
 8001b60:	3347      	adds	r3, #71	; 0x47
 8001b62:	6023      	str	r3, [r4, #0]
 8001b64:	6123      	str	r3, [r4, #16]
 8001b66:	2301      	movs	r3, #1
 8001b68:	6163      	str	r3, [r4, #20]
 8001b6a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001b6c:	ab01      	add	r3, sp, #4
 8001b6e:	466a      	mov	r2, sp
 8001b70:	f7ff ffc6 	bl	8001b00 <__swhatbuf_r>
 8001b74:	9900      	ldr	r1, [sp, #0]
 8001b76:	0007      	movs	r7, r0
 8001b78:	0028      	movs	r0, r5
 8001b7a:	f000 f877 	bl	8001c6c <_malloc_r>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d108      	bne.n	8001b94 <__smakebuf_r+0x44>
 8001b82:	220c      	movs	r2, #12
 8001b84:	5ea3      	ldrsh	r3, [r4, r2]
 8001b86:	059a      	lsls	r2, r3, #22
 8001b88:	d4ef      	bmi.n	8001b6a <__smakebuf_r+0x1a>
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	431e      	orrs	r6, r3
 8001b90:	81a6      	strh	r6, [r4, #12]
 8001b92:	e7e4      	b.n	8001b5e <__smakebuf_r+0xe>
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <__smakebuf_r+0x84>)
 8001b96:	62ab      	str	r3, [r5, #40]	; 0x28
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	89a2      	ldrh	r2, [r4, #12]
 8001b9c:	6020      	str	r0, [r4, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	81a3      	strh	r3, [r4, #12]
 8001ba2:	9b00      	ldr	r3, [sp, #0]
 8001ba4:	6120      	str	r0, [r4, #16]
 8001ba6:	6163      	str	r3, [r4, #20]
 8001ba8:	9b01      	ldr	r3, [sp, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00d      	beq.n	8001bca <__smakebuf_r+0x7a>
 8001bae:	230e      	movs	r3, #14
 8001bb0:	5ee1      	ldrsh	r1, [r4, r3]
 8001bb2:	0028      	movs	r0, r5
 8001bb4:	f000 fc02 	bl	80023bc <_isatty_r>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d006      	beq.n	8001bca <__smakebuf_r+0x7a>
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	89a3      	ldrh	r3, [r4, #12]
 8001bc0:	4393      	bics	r3, r2
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	81a3      	strh	r3, [r4, #12]
 8001bca:	89a0      	ldrh	r0, [r4, #12]
 8001bcc:	4338      	orrs	r0, r7
 8001bce:	81a0      	strh	r0, [r4, #12]
 8001bd0:	e7cb      	b.n	8001b6a <__smakebuf_r+0x1a>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	0800199d 	.word	0x0800199d

08001bd8 <_free_r>:
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	0005      	movs	r5, r0
 8001bdc:	2900      	cmp	r1, #0
 8001bde:	d010      	beq.n	8001c02 <_free_r+0x2a>
 8001be0:	1f0c      	subs	r4, r1, #4
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da00      	bge.n	8001bea <_free_r+0x12>
 8001be8:	18e4      	adds	r4, r4, r3
 8001bea:	0028      	movs	r0, r5
 8001bec:	f000 fc17 	bl	800241e <__malloc_lock>
 8001bf0:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <_free_r+0x90>)
 8001bf2:	6813      	ldr	r3, [r2, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <_free_r+0x2c>
 8001bf8:	6063      	str	r3, [r4, #4]
 8001bfa:	6014      	str	r4, [r2, #0]
 8001bfc:	0028      	movs	r0, r5
 8001bfe:	f000 fc0f 	bl	8002420 <__malloc_unlock>
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
 8001c04:	42a3      	cmp	r3, r4
 8001c06:	d909      	bls.n	8001c1c <_free_r+0x44>
 8001c08:	6821      	ldr	r1, [r4, #0]
 8001c0a:	1860      	adds	r0, r4, r1
 8001c0c:	4283      	cmp	r3, r0
 8001c0e:	d1f3      	bne.n	8001bf8 <_free_r+0x20>
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	1841      	adds	r1, r0, r1
 8001c16:	6021      	str	r1, [r4, #0]
 8001c18:	e7ee      	b.n	8001bf8 <_free_r+0x20>
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	2a00      	cmp	r2, #0
 8001c20:	d001      	beq.n	8001c26 <_free_r+0x4e>
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	d9f9      	bls.n	8001c1a <_free_r+0x42>
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	1858      	adds	r0, r3, r1
 8001c2a:	42a0      	cmp	r0, r4
 8001c2c:	d10b      	bne.n	8001c46 <_free_r+0x6e>
 8001c2e:	6820      	ldr	r0, [r4, #0]
 8001c30:	1809      	adds	r1, r1, r0
 8001c32:	1858      	adds	r0, r3, r1
 8001c34:	6019      	str	r1, [r3, #0]
 8001c36:	4282      	cmp	r2, r0
 8001c38:	d1e0      	bne.n	8001bfc <_free_r+0x24>
 8001c3a:	6810      	ldr	r0, [r2, #0]
 8001c3c:	6852      	ldr	r2, [r2, #4]
 8001c3e:	1841      	adds	r1, r0, r1
 8001c40:	6019      	str	r1, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	e7da      	b.n	8001bfc <_free_r+0x24>
 8001c46:	42a0      	cmp	r0, r4
 8001c48:	d902      	bls.n	8001c50 <_free_r+0x78>
 8001c4a:	230c      	movs	r3, #12
 8001c4c:	602b      	str	r3, [r5, #0]
 8001c4e:	e7d5      	b.n	8001bfc <_free_r+0x24>
 8001c50:	6821      	ldr	r1, [r4, #0]
 8001c52:	1860      	adds	r0, r4, r1
 8001c54:	4282      	cmp	r2, r0
 8001c56:	d103      	bne.n	8001c60 <_free_r+0x88>
 8001c58:	6810      	ldr	r0, [r2, #0]
 8001c5a:	6852      	ldr	r2, [r2, #4]
 8001c5c:	1841      	adds	r1, r0, r1
 8001c5e:	6021      	str	r1, [r4, #0]
 8001c60:	6062      	str	r2, [r4, #4]
 8001c62:	605c      	str	r4, [r3, #4]
 8001c64:	e7ca      	b.n	8001bfc <_free_r+0x24>
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	2000015c 	.word	0x2000015c

08001c6c <_malloc_r>:
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	b570      	push	{r4, r5, r6, lr}
 8001c70:	1ccd      	adds	r5, r1, #3
 8001c72:	439d      	bics	r5, r3
 8001c74:	3508      	adds	r5, #8
 8001c76:	0006      	movs	r6, r0
 8001c78:	2d0c      	cmp	r5, #12
 8001c7a:	d21e      	bcs.n	8001cba <_malloc_r+0x4e>
 8001c7c:	250c      	movs	r5, #12
 8001c7e:	42a9      	cmp	r1, r5
 8001c80:	d81d      	bhi.n	8001cbe <_malloc_r+0x52>
 8001c82:	0030      	movs	r0, r6
 8001c84:	f000 fbcb 	bl	800241e <__malloc_lock>
 8001c88:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <_malloc_r+0xb4>)
 8001c8a:	6814      	ldr	r4, [r2, #0]
 8001c8c:	0021      	movs	r1, r4
 8001c8e:	2900      	cmp	r1, #0
 8001c90:	d119      	bne.n	8001cc6 <_malloc_r+0x5a>
 8001c92:	4c24      	ldr	r4, [pc, #144]	; (8001d24 <_malloc_r+0xb8>)
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <_malloc_r+0x36>
 8001c9a:	0030      	movs	r0, r6
 8001c9c:	f000 faf8 	bl	8002290 <_sbrk_r>
 8001ca0:	6020      	str	r0, [r4, #0]
 8001ca2:	0029      	movs	r1, r5
 8001ca4:	0030      	movs	r0, r6
 8001ca6:	f000 faf3 	bl	8002290 <_sbrk_r>
 8001caa:	1c43      	adds	r3, r0, #1
 8001cac:	d12b      	bne.n	8001d06 <_malloc_r+0x9a>
 8001cae:	230c      	movs	r3, #12
 8001cb0:	0030      	movs	r0, r6
 8001cb2:	6033      	str	r3, [r6, #0]
 8001cb4:	f000 fbb4 	bl	8002420 <__malloc_unlock>
 8001cb8:	e003      	b.n	8001cc2 <_malloc_r+0x56>
 8001cba:	2d00      	cmp	r5, #0
 8001cbc:	dadf      	bge.n	8001c7e <_malloc_r+0x12>
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	6033      	str	r3, [r6, #0]
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	bd70      	pop	{r4, r5, r6, pc}
 8001cc6:	680b      	ldr	r3, [r1, #0]
 8001cc8:	1b5b      	subs	r3, r3, r5
 8001cca:	d419      	bmi.n	8001d00 <_malloc_r+0x94>
 8001ccc:	2b0b      	cmp	r3, #11
 8001cce:	d903      	bls.n	8001cd8 <_malloc_r+0x6c>
 8001cd0:	600b      	str	r3, [r1, #0]
 8001cd2:	18cc      	adds	r4, r1, r3
 8001cd4:	6025      	str	r5, [r4, #0]
 8001cd6:	e003      	b.n	8001ce0 <_malloc_r+0x74>
 8001cd8:	684b      	ldr	r3, [r1, #4]
 8001cda:	428c      	cmp	r4, r1
 8001cdc:	d10d      	bne.n	8001cfa <_malloc_r+0x8e>
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	0030      	movs	r0, r6
 8001ce2:	f000 fb9d 	bl	8002420 <__malloc_unlock>
 8001ce6:	0020      	movs	r0, r4
 8001ce8:	2207      	movs	r2, #7
 8001cea:	300b      	adds	r0, #11
 8001cec:	1d23      	adds	r3, r4, #4
 8001cee:	4390      	bics	r0, r2
 8001cf0:	1ac3      	subs	r3, r0, r3
 8001cf2:	d0e7      	beq.n	8001cc4 <_malloc_r+0x58>
 8001cf4:	425a      	negs	r2, r3
 8001cf6:	50e2      	str	r2, [r4, r3]
 8001cf8:	e7e4      	b.n	8001cc4 <_malloc_r+0x58>
 8001cfa:	6063      	str	r3, [r4, #4]
 8001cfc:	000c      	movs	r4, r1
 8001cfe:	e7ef      	b.n	8001ce0 <_malloc_r+0x74>
 8001d00:	000c      	movs	r4, r1
 8001d02:	6849      	ldr	r1, [r1, #4]
 8001d04:	e7c3      	b.n	8001c8e <_malloc_r+0x22>
 8001d06:	2303      	movs	r3, #3
 8001d08:	1cc4      	adds	r4, r0, #3
 8001d0a:	439c      	bics	r4, r3
 8001d0c:	42a0      	cmp	r0, r4
 8001d0e:	d0e1      	beq.n	8001cd4 <_malloc_r+0x68>
 8001d10:	1a21      	subs	r1, r4, r0
 8001d12:	0030      	movs	r0, r6
 8001d14:	f000 fabc 	bl	8002290 <_sbrk_r>
 8001d18:	1c43      	adds	r3, r0, #1
 8001d1a:	d1db      	bne.n	8001cd4 <_malloc_r+0x68>
 8001d1c:	e7c7      	b.n	8001cae <_malloc_r+0x42>
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	2000015c 	.word	0x2000015c
 8001d24:	20000160 	.word	0x20000160

08001d28 <__sfputc_r>:
 8001d28:	6893      	ldr	r3, [r2, #8]
 8001d2a:	b510      	push	{r4, lr}
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	6093      	str	r3, [r2, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da04      	bge.n	8001d3e <__sfputc_r+0x16>
 8001d34:	6994      	ldr	r4, [r2, #24]
 8001d36:	42a3      	cmp	r3, r4
 8001d38:	db07      	blt.n	8001d4a <__sfputc_r+0x22>
 8001d3a:	290a      	cmp	r1, #10
 8001d3c:	d005      	beq.n	8001d4a <__sfputc_r+0x22>
 8001d3e:	6813      	ldr	r3, [r2, #0]
 8001d40:	1c58      	adds	r0, r3, #1
 8001d42:	6010      	str	r0, [r2, #0]
 8001d44:	7019      	strb	r1, [r3, #0]
 8001d46:	0008      	movs	r0, r1
 8001d48:	bd10      	pop	{r4, pc}
 8001d4a:	f7ff fc81 	bl	8001650 <__swbuf_r>
 8001d4e:	0001      	movs	r1, r0
 8001d50:	e7f9      	b.n	8001d46 <__sfputc_r+0x1e>

08001d52 <__sfputs_r>:
 8001d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d54:	0006      	movs	r6, r0
 8001d56:	000f      	movs	r7, r1
 8001d58:	0014      	movs	r4, r2
 8001d5a:	18d5      	adds	r5, r2, r3
 8001d5c:	42ac      	cmp	r4, r5
 8001d5e:	d101      	bne.n	8001d64 <__sfputs_r+0x12>
 8001d60:	2000      	movs	r0, #0
 8001d62:	e007      	b.n	8001d74 <__sfputs_r+0x22>
 8001d64:	7821      	ldrb	r1, [r4, #0]
 8001d66:	003a      	movs	r2, r7
 8001d68:	0030      	movs	r0, r6
 8001d6a:	f7ff ffdd 	bl	8001d28 <__sfputc_r>
 8001d6e:	3401      	adds	r4, #1
 8001d70:	1c43      	adds	r3, r0, #1
 8001d72:	d1f3      	bne.n	8001d5c <__sfputs_r+0xa>
 8001d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d78 <_vfiprintf_r>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	b0a1      	sub	sp, #132	; 0x84
 8001d7c:	9003      	str	r0, [sp, #12]
 8001d7e:	000f      	movs	r7, r1
 8001d80:	0016      	movs	r6, r2
 8001d82:	001d      	movs	r5, r3
 8001d84:	2800      	cmp	r0, #0
 8001d86:	d005      	beq.n	8001d94 <_vfiprintf_r+0x1c>
 8001d88:	6983      	ldr	r3, [r0, #24]
 8001d8a:	9305      	str	r3, [sp, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <_vfiprintf_r+0x1c>
 8001d90:	f7ff fe22 	bl	80019d8 <__sinit>
 8001d94:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <_vfiprintf_r+0x20c>)
 8001d96:	429f      	cmp	r7, r3
 8001d98:	d15c      	bne.n	8001e54 <_vfiprintf_r+0xdc>
 8001d9a:	9b03      	ldr	r3, [sp, #12]
 8001d9c:	685f      	ldr	r7, [r3, #4]
 8001d9e:	89bb      	ldrh	r3, [r7, #12]
 8001da0:	071b      	lsls	r3, r3, #28
 8001da2:	d563      	bpl.n	8001e6c <_vfiprintf_r+0xf4>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d060      	beq.n	8001e6c <_vfiprintf_r+0xf4>
 8001daa:	2300      	movs	r3, #0
 8001dac:	ac08      	add	r4, sp, #32
 8001dae:	6163      	str	r3, [r4, #20]
 8001db0:	3320      	adds	r3, #32
 8001db2:	7663      	strb	r3, [r4, #25]
 8001db4:	3310      	adds	r3, #16
 8001db6:	76a3      	strb	r3, [r4, #26]
 8001db8:	9507      	str	r5, [sp, #28]
 8001dba:	0035      	movs	r5, r6
 8001dbc:	782b      	ldrb	r3, [r5, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <_vfiprintf_r+0x4e>
 8001dc2:	2b25      	cmp	r3, #37	; 0x25
 8001dc4:	d15c      	bne.n	8001e80 <_vfiprintf_r+0x108>
 8001dc6:	1bab      	subs	r3, r5, r6
 8001dc8:	9305      	str	r3, [sp, #20]
 8001dca:	d00c      	beq.n	8001de6 <_vfiprintf_r+0x6e>
 8001dcc:	0032      	movs	r2, r6
 8001dce:	0039      	movs	r1, r7
 8001dd0:	9803      	ldr	r0, [sp, #12]
 8001dd2:	f7ff ffbe 	bl	8001d52 <__sfputs_r>
 8001dd6:	1c43      	adds	r3, r0, #1
 8001dd8:	d100      	bne.n	8001ddc <_vfiprintf_r+0x64>
 8001dda:	e0c4      	b.n	8001f66 <_vfiprintf_r+0x1ee>
 8001ddc:	6962      	ldr	r2, [r4, #20]
 8001dde:	9b05      	ldr	r3, [sp, #20]
 8001de0:	4694      	mov	ip, r2
 8001de2:	4463      	add	r3, ip
 8001de4:	6163      	str	r3, [r4, #20]
 8001de6:	782b      	ldrb	r3, [r5, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d100      	bne.n	8001dee <_vfiprintf_r+0x76>
 8001dec:	e0bb      	b.n	8001f66 <_vfiprintf_r+0x1ee>
 8001dee:	2201      	movs	r2, #1
 8001df0:	2300      	movs	r3, #0
 8001df2:	4252      	negs	r2, r2
 8001df4:	6062      	str	r2, [r4, #4]
 8001df6:	a904      	add	r1, sp, #16
 8001df8:	3254      	adds	r2, #84	; 0x54
 8001dfa:	1852      	adds	r2, r2, r1
 8001dfc:	1c6e      	adds	r6, r5, #1
 8001dfe:	6023      	str	r3, [r4, #0]
 8001e00:	60e3      	str	r3, [r4, #12]
 8001e02:	60a3      	str	r3, [r4, #8]
 8001e04:	7013      	strb	r3, [r2, #0]
 8001e06:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e08:	7831      	ldrb	r1, [r6, #0]
 8001e0a:	2205      	movs	r2, #5
 8001e0c:	485e      	ldr	r0, [pc, #376]	; (8001f88 <_vfiprintf_r+0x210>)
 8001e0e:	f000 fafb 	bl	8002408 <memchr>
 8001e12:	1c75      	adds	r5, r6, #1
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d135      	bne.n	8001e84 <_vfiprintf_r+0x10c>
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	06d3      	lsls	r3, r2, #27
 8001e1c:	d504      	bpl.n	8001e28 <_vfiprintf_r+0xb0>
 8001e1e:	2353      	movs	r3, #83	; 0x53
 8001e20:	a904      	add	r1, sp, #16
 8001e22:	185b      	adds	r3, r3, r1
 8001e24:	2120      	movs	r1, #32
 8001e26:	7019      	strb	r1, [r3, #0]
 8001e28:	0713      	lsls	r3, r2, #28
 8001e2a:	d504      	bpl.n	8001e36 <_vfiprintf_r+0xbe>
 8001e2c:	2353      	movs	r3, #83	; 0x53
 8001e2e:	a904      	add	r1, sp, #16
 8001e30:	185b      	adds	r3, r3, r1
 8001e32:	212b      	movs	r1, #43	; 0x2b
 8001e34:	7019      	strb	r1, [r3, #0]
 8001e36:	7833      	ldrb	r3, [r6, #0]
 8001e38:	2b2a      	cmp	r3, #42	; 0x2a
 8001e3a:	d02c      	beq.n	8001e96 <_vfiprintf_r+0x11e>
 8001e3c:	0035      	movs	r5, r6
 8001e3e:	2100      	movs	r1, #0
 8001e40:	200a      	movs	r0, #10
 8001e42:	68e3      	ldr	r3, [r4, #12]
 8001e44:	782a      	ldrb	r2, [r5, #0]
 8001e46:	1c6e      	adds	r6, r5, #1
 8001e48:	3a30      	subs	r2, #48	; 0x30
 8001e4a:	2a09      	cmp	r2, #9
 8001e4c:	d964      	bls.n	8001f18 <_vfiprintf_r+0x1a0>
 8001e4e:	2900      	cmp	r1, #0
 8001e50:	d02e      	beq.n	8001eb0 <_vfiprintf_r+0x138>
 8001e52:	e026      	b.n	8001ea2 <_vfiprintf_r+0x12a>
 8001e54:	4b4d      	ldr	r3, [pc, #308]	; (8001f8c <_vfiprintf_r+0x214>)
 8001e56:	429f      	cmp	r7, r3
 8001e58:	d102      	bne.n	8001e60 <_vfiprintf_r+0xe8>
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	689f      	ldr	r7, [r3, #8]
 8001e5e:	e79e      	b.n	8001d9e <_vfiprintf_r+0x26>
 8001e60:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <_vfiprintf_r+0x218>)
 8001e62:	429f      	cmp	r7, r3
 8001e64:	d19b      	bne.n	8001d9e <_vfiprintf_r+0x26>
 8001e66:	9b03      	ldr	r3, [sp, #12]
 8001e68:	68df      	ldr	r7, [r3, #12]
 8001e6a:	e798      	b.n	8001d9e <_vfiprintf_r+0x26>
 8001e6c:	0039      	movs	r1, r7
 8001e6e:	9803      	ldr	r0, [sp, #12]
 8001e70:	f7ff fc44 	bl	80016fc <__swsetup_r>
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d098      	beq.n	8001daa <_vfiprintf_r+0x32>
 8001e78:	2001      	movs	r0, #1
 8001e7a:	4240      	negs	r0, r0
 8001e7c:	b021      	add	sp, #132	; 0x84
 8001e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e80:	3501      	adds	r5, #1
 8001e82:	e79b      	b.n	8001dbc <_vfiprintf_r+0x44>
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <_vfiprintf_r+0x210>)
 8001e86:	6822      	ldr	r2, [r4, #0]
 8001e88:	1ac0      	subs	r0, r0, r3
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	4083      	lsls	r3, r0
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	6023      	str	r3, [r4, #0]
 8001e92:	002e      	movs	r6, r5
 8001e94:	e7b8      	b.n	8001e08 <_vfiprintf_r+0x90>
 8001e96:	9b07      	ldr	r3, [sp, #28]
 8001e98:	1d19      	adds	r1, r3, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	9107      	str	r1, [sp, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db01      	blt.n	8001ea6 <_vfiprintf_r+0x12e>
 8001ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ea4:	e004      	b.n	8001eb0 <_vfiprintf_r+0x138>
 8001ea6:	425b      	negs	r3, r3
 8001ea8:	60e3      	str	r3, [r4, #12]
 8001eaa:	2302      	movs	r3, #2
 8001eac:	4313      	orrs	r3, r2
 8001eae:	6023      	str	r3, [r4, #0]
 8001eb0:	782b      	ldrb	r3, [r5, #0]
 8001eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8001eb4:	d10a      	bne.n	8001ecc <_vfiprintf_r+0x154>
 8001eb6:	786b      	ldrb	r3, [r5, #1]
 8001eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8001eba:	d135      	bne.n	8001f28 <_vfiprintf_r+0x1b0>
 8001ebc:	9b07      	ldr	r3, [sp, #28]
 8001ebe:	3502      	adds	r5, #2
 8001ec0:	1d1a      	adds	r2, r3, #4
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	9207      	str	r2, [sp, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db2b      	blt.n	8001f22 <_vfiprintf_r+0x1aa>
 8001eca:	9309      	str	r3, [sp, #36]	; 0x24
 8001ecc:	4e31      	ldr	r6, [pc, #196]	; (8001f94 <_vfiprintf_r+0x21c>)
 8001ece:	7829      	ldrb	r1, [r5, #0]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	0030      	movs	r0, r6
 8001ed4:	f000 fa98 	bl	8002408 <memchr>
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d006      	beq.n	8001eea <_vfiprintf_r+0x172>
 8001edc:	2340      	movs	r3, #64	; 0x40
 8001ede:	1b80      	subs	r0, r0, r6
 8001ee0:	4083      	lsls	r3, r0
 8001ee2:	6822      	ldr	r2, [r4, #0]
 8001ee4:	3501      	adds	r5, #1
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	6023      	str	r3, [r4, #0]
 8001eea:	7829      	ldrb	r1, [r5, #0]
 8001eec:	2206      	movs	r2, #6
 8001eee:	482a      	ldr	r0, [pc, #168]	; (8001f98 <_vfiprintf_r+0x220>)
 8001ef0:	1c6e      	adds	r6, r5, #1
 8001ef2:	7621      	strb	r1, [r4, #24]
 8001ef4:	f000 fa88 	bl	8002408 <memchr>
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d03a      	beq.n	8001f72 <_vfiprintf_r+0x1fa>
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <_vfiprintf_r+0x224>)
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d125      	bne.n	8001f4e <_vfiprintf_r+0x1d6>
 8001f02:	2207      	movs	r2, #7
 8001f04:	9b07      	ldr	r3, [sp, #28]
 8001f06:	3307      	adds	r3, #7
 8001f08:	4393      	bics	r3, r2
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	9307      	str	r3, [sp, #28]
 8001f0e:	6963      	ldr	r3, [r4, #20]
 8001f10:	9a04      	ldr	r2, [sp, #16]
 8001f12:	189b      	adds	r3, r3, r2
 8001f14:	6163      	str	r3, [r4, #20]
 8001f16:	e750      	b.n	8001dba <_vfiprintf_r+0x42>
 8001f18:	4343      	muls	r3, r0
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	189b      	adds	r3, r3, r2
 8001f1e:	0035      	movs	r5, r6
 8001f20:	e790      	b.n	8001e44 <_vfiprintf_r+0xcc>
 8001f22:	2301      	movs	r3, #1
 8001f24:	425b      	negs	r3, r3
 8001f26:	e7d0      	b.n	8001eca <_vfiprintf_r+0x152>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	200a      	movs	r0, #10
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	3501      	adds	r5, #1
 8001f30:	6063      	str	r3, [r4, #4]
 8001f32:	7829      	ldrb	r1, [r5, #0]
 8001f34:	1c6e      	adds	r6, r5, #1
 8001f36:	3930      	subs	r1, #48	; 0x30
 8001f38:	2909      	cmp	r1, #9
 8001f3a:	d903      	bls.n	8001f44 <_vfiprintf_r+0x1cc>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0c5      	beq.n	8001ecc <_vfiprintf_r+0x154>
 8001f40:	9209      	str	r2, [sp, #36]	; 0x24
 8001f42:	e7c3      	b.n	8001ecc <_vfiprintf_r+0x154>
 8001f44:	4342      	muls	r2, r0
 8001f46:	2301      	movs	r3, #1
 8001f48:	1852      	adds	r2, r2, r1
 8001f4a:	0035      	movs	r5, r6
 8001f4c:	e7f1      	b.n	8001f32 <_vfiprintf_r+0x1ba>
 8001f4e:	ab07      	add	r3, sp, #28
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	003a      	movs	r2, r7
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <_vfiprintf_r+0x228>)
 8001f56:	0021      	movs	r1, r4
 8001f58:	9803      	ldr	r0, [sp, #12]
 8001f5a:	e000      	b.n	8001f5e <_vfiprintf_r+0x1e6>
 8001f5c:	bf00      	nop
 8001f5e:	9004      	str	r0, [sp, #16]
 8001f60:	9b04      	ldr	r3, [sp, #16]
 8001f62:	3301      	adds	r3, #1
 8001f64:	d1d3      	bne.n	8001f0e <_vfiprintf_r+0x196>
 8001f66:	89bb      	ldrh	r3, [r7, #12]
 8001f68:	065b      	lsls	r3, r3, #25
 8001f6a:	d500      	bpl.n	8001f6e <_vfiprintf_r+0x1f6>
 8001f6c:	e784      	b.n	8001e78 <_vfiprintf_r+0x100>
 8001f6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001f70:	e784      	b.n	8001e7c <_vfiprintf_r+0x104>
 8001f72:	ab07      	add	r3, sp, #28
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	003a      	movs	r2, r7
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <_vfiprintf_r+0x228>)
 8001f7a:	0021      	movs	r1, r4
 8001f7c:	9803      	ldr	r0, [sp, #12]
 8001f7e:	f000 f87f 	bl	8002080 <_printf_i>
 8001f82:	e7ec      	b.n	8001f5e <_vfiprintf_r+0x1e6>
 8001f84:	080031ec 	.word	0x080031ec
 8001f88:	0800322c 	.word	0x0800322c
 8001f8c:	0800320c 	.word	0x0800320c
 8001f90:	080031cc 	.word	0x080031cc
 8001f94:	08003232 	.word	0x08003232
 8001f98:	08003236 	.word	0x08003236
 8001f9c:	00000000 	.word	0x00000000
 8001fa0:	08001d53 	.word	0x08001d53

08001fa4 <_printf_common>:
 8001fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fa6:	0015      	movs	r5, r2
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	688a      	ldr	r2, [r1, #8]
 8001fac:	690b      	ldr	r3, [r1, #16]
 8001fae:	9000      	str	r0, [sp, #0]
 8001fb0:	000c      	movs	r4, r1
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	da00      	bge.n	8001fb8 <_printf_common+0x14>
 8001fb6:	0013      	movs	r3, r2
 8001fb8:	0022      	movs	r2, r4
 8001fba:	602b      	str	r3, [r5, #0]
 8001fbc:	3243      	adds	r2, #67	; 0x43
 8001fbe:	7812      	ldrb	r2, [r2, #0]
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	d001      	beq.n	8001fc8 <_printf_common+0x24>
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	602b      	str	r3, [r5, #0]
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	069b      	lsls	r3, r3, #26
 8001fcc:	d502      	bpl.n	8001fd4 <_printf_common+0x30>
 8001fce:	682b      	ldr	r3, [r5, #0]
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	602b      	str	r3, [r5, #0]
 8001fd4:	2706      	movs	r7, #6
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	401f      	ands	r7, r3
 8001fda:	d027      	beq.n	800202c <_printf_common+0x88>
 8001fdc:	0023      	movs	r3, r4
 8001fde:	3343      	adds	r3, #67	; 0x43
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	1e5a      	subs	r2, r3, #1
 8001fe4:	4193      	sbcs	r3, r2
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	0692      	lsls	r2, r2, #26
 8001fea:	d430      	bmi.n	800204e <_printf_common+0xaa>
 8001fec:	0022      	movs	r2, r4
 8001fee:	9901      	ldr	r1, [sp, #4]
 8001ff0:	3243      	adds	r2, #67	; 0x43
 8001ff2:	9800      	ldr	r0, [sp, #0]
 8001ff4:	9e08      	ldr	r6, [sp, #32]
 8001ff6:	47b0      	blx	r6
 8001ff8:	1c43      	adds	r3, r0, #1
 8001ffa:	d025      	beq.n	8002048 <_printf_common+0xa4>
 8001ffc:	2306      	movs	r3, #6
 8001ffe:	6820      	ldr	r0, [r4, #0]
 8002000:	682a      	ldr	r2, [r5, #0]
 8002002:	68e1      	ldr	r1, [r4, #12]
 8002004:	4003      	ands	r3, r0
 8002006:	2500      	movs	r5, #0
 8002008:	2b04      	cmp	r3, #4
 800200a:	d103      	bne.n	8002014 <_printf_common+0x70>
 800200c:	1a8d      	subs	r5, r1, r2
 800200e:	43eb      	mvns	r3, r5
 8002010:	17db      	asrs	r3, r3, #31
 8002012:	401d      	ands	r5, r3
 8002014:	68a3      	ldr	r3, [r4, #8]
 8002016:	6922      	ldr	r2, [r4, #16]
 8002018:	4293      	cmp	r3, r2
 800201a:	dd01      	ble.n	8002020 <_printf_common+0x7c>
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	18ed      	adds	r5, r5, r3
 8002020:	2700      	movs	r7, #0
 8002022:	42bd      	cmp	r5, r7
 8002024:	d120      	bne.n	8002068 <_printf_common+0xc4>
 8002026:	2000      	movs	r0, #0
 8002028:	e010      	b.n	800204c <_printf_common+0xa8>
 800202a:	3701      	adds	r7, #1
 800202c:	68e3      	ldr	r3, [r4, #12]
 800202e:	682a      	ldr	r2, [r5, #0]
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	42bb      	cmp	r3, r7
 8002034:	ddd2      	ble.n	8001fdc <_printf_common+0x38>
 8002036:	0022      	movs	r2, r4
 8002038:	2301      	movs	r3, #1
 800203a:	3219      	adds	r2, #25
 800203c:	9901      	ldr	r1, [sp, #4]
 800203e:	9800      	ldr	r0, [sp, #0]
 8002040:	9e08      	ldr	r6, [sp, #32]
 8002042:	47b0      	blx	r6
 8002044:	1c43      	adds	r3, r0, #1
 8002046:	d1f0      	bne.n	800202a <_printf_common+0x86>
 8002048:	2001      	movs	r0, #1
 800204a:	4240      	negs	r0, r0
 800204c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800204e:	2030      	movs	r0, #48	; 0x30
 8002050:	18e1      	adds	r1, r4, r3
 8002052:	3143      	adds	r1, #67	; 0x43
 8002054:	7008      	strb	r0, [r1, #0]
 8002056:	0021      	movs	r1, r4
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	3145      	adds	r1, #69	; 0x45
 800205c:	7809      	ldrb	r1, [r1, #0]
 800205e:	18a2      	adds	r2, r4, r2
 8002060:	3243      	adds	r2, #67	; 0x43
 8002062:	3302      	adds	r3, #2
 8002064:	7011      	strb	r1, [r2, #0]
 8002066:	e7c1      	b.n	8001fec <_printf_common+0x48>
 8002068:	0022      	movs	r2, r4
 800206a:	2301      	movs	r3, #1
 800206c:	321a      	adds	r2, #26
 800206e:	9901      	ldr	r1, [sp, #4]
 8002070:	9800      	ldr	r0, [sp, #0]
 8002072:	9e08      	ldr	r6, [sp, #32]
 8002074:	47b0      	blx	r6
 8002076:	1c43      	adds	r3, r0, #1
 8002078:	d0e6      	beq.n	8002048 <_printf_common+0xa4>
 800207a:	3701      	adds	r7, #1
 800207c:	e7d1      	b.n	8002022 <_printf_common+0x7e>
	...

08002080 <_printf_i>:
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	9204      	str	r2, [sp, #16]
 8002086:	000a      	movs	r2, r1
 8002088:	3243      	adds	r2, #67	; 0x43
 800208a:	9305      	str	r3, [sp, #20]
 800208c:	9003      	str	r0, [sp, #12]
 800208e:	9202      	str	r2, [sp, #8]
 8002090:	7e0a      	ldrb	r2, [r1, #24]
 8002092:	000c      	movs	r4, r1
 8002094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002096:	2a6e      	cmp	r2, #110	; 0x6e
 8002098:	d100      	bne.n	800209c <_printf_i+0x1c>
 800209a:	e086      	b.n	80021aa <_printf_i+0x12a>
 800209c:	d81f      	bhi.n	80020de <_printf_i+0x5e>
 800209e:	2a63      	cmp	r2, #99	; 0x63
 80020a0:	d033      	beq.n	800210a <_printf_i+0x8a>
 80020a2:	d808      	bhi.n	80020b6 <_printf_i+0x36>
 80020a4:	2a00      	cmp	r2, #0
 80020a6:	d100      	bne.n	80020aa <_printf_i+0x2a>
 80020a8:	e08c      	b.n	80021c4 <_printf_i+0x144>
 80020aa:	2a58      	cmp	r2, #88	; 0x58
 80020ac:	d04d      	beq.n	800214a <_printf_i+0xca>
 80020ae:	0025      	movs	r5, r4
 80020b0:	3542      	adds	r5, #66	; 0x42
 80020b2:	702a      	strb	r2, [r5, #0]
 80020b4:	e030      	b.n	8002118 <_printf_i+0x98>
 80020b6:	2a64      	cmp	r2, #100	; 0x64
 80020b8:	d001      	beq.n	80020be <_printf_i+0x3e>
 80020ba:	2a69      	cmp	r2, #105	; 0x69
 80020bc:	d1f7      	bne.n	80020ae <_printf_i+0x2e>
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	6825      	ldr	r5, [r4, #0]
 80020c2:	1d0a      	adds	r2, r1, #4
 80020c4:	0628      	lsls	r0, r5, #24
 80020c6:	d529      	bpl.n	800211c <_printf_i+0x9c>
 80020c8:	6808      	ldr	r0, [r1, #0]
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	2800      	cmp	r0, #0
 80020ce:	da03      	bge.n	80020d8 <_printf_i+0x58>
 80020d0:	232d      	movs	r3, #45	; 0x2d
 80020d2:	9a02      	ldr	r2, [sp, #8]
 80020d4:	4240      	negs	r0, r0
 80020d6:	7013      	strb	r3, [r2, #0]
 80020d8:	4e6b      	ldr	r6, [pc, #428]	; (8002288 <_printf_i+0x208>)
 80020da:	270a      	movs	r7, #10
 80020dc:	e04f      	b.n	800217e <_printf_i+0xfe>
 80020de:	2a73      	cmp	r2, #115	; 0x73
 80020e0:	d074      	beq.n	80021cc <_printf_i+0x14c>
 80020e2:	d808      	bhi.n	80020f6 <_printf_i+0x76>
 80020e4:	2a6f      	cmp	r2, #111	; 0x6f
 80020e6:	d01f      	beq.n	8002128 <_printf_i+0xa8>
 80020e8:	2a70      	cmp	r2, #112	; 0x70
 80020ea:	d1e0      	bne.n	80020ae <_printf_i+0x2e>
 80020ec:	2220      	movs	r2, #32
 80020ee:	6809      	ldr	r1, [r1, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	6022      	str	r2, [r4, #0]
 80020f4:	e003      	b.n	80020fe <_printf_i+0x7e>
 80020f6:	2a75      	cmp	r2, #117	; 0x75
 80020f8:	d016      	beq.n	8002128 <_printf_i+0xa8>
 80020fa:	2a78      	cmp	r2, #120	; 0x78
 80020fc:	d1d7      	bne.n	80020ae <_printf_i+0x2e>
 80020fe:	0022      	movs	r2, r4
 8002100:	2178      	movs	r1, #120	; 0x78
 8002102:	3245      	adds	r2, #69	; 0x45
 8002104:	7011      	strb	r1, [r2, #0]
 8002106:	4e61      	ldr	r6, [pc, #388]	; (800228c <_printf_i+0x20c>)
 8002108:	e022      	b.n	8002150 <_printf_i+0xd0>
 800210a:	0025      	movs	r5, r4
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	3542      	adds	r5, #66	; 0x42
 8002110:	1d11      	adds	r1, r2, #4
 8002112:	6019      	str	r1, [r3, #0]
 8002114:	6813      	ldr	r3, [r2, #0]
 8002116:	702b      	strb	r3, [r5, #0]
 8002118:	2301      	movs	r3, #1
 800211a:	e065      	b.n	80021e8 <_printf_i+0x168>
 800211c:	6808      	ldr	r0, [r1, #0]
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	0669      	lsls	r1, r5, #25
 8002122:	d5d3      	bpl.n	80020cc <_printf_i+0x4c>
 8002124:	b200      	sxth	r0, r0
 8002126:	e7d1      	b.n	80020cc <_printf_i+0x4c>
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	6825      	ldr	r5, [r4, #0]
 800212c:	1d08      	adds	r0, r1, #4
 800212e:	6018      	str	r0, [r3, #0]
 8002130:	6808      	ldr	r0, [r1, #0]
 8002132:	062e      	lsls	r6, r5, #24
 8002134:	d505      	bpl.n	8002142 <_printf_i+0xc2>
 8002136:	4e54      	ldr	r6, [pc, #336]	; (8002288 <_printf_i+0x208>)
 8002138:	2708      	movs	r7, #8
 800213a:	2a6f      	cmp	r2, #111	; 0x6f
 800213c:	d01b      	beq.n	8002176 <_printf_i+0xf6>
 800213e:	270a      	movs	r7, #10
 8002140:	e019      	b.n	8002176 <_printf_i+0xf6>
 8002142:	066d      	lsls	r5, r5, #25
 8002144:	d5f7      	bpl.n	8002136 <_printf_i+0xb6>
 8002146:	b280      	uxth	r0, r0
 8002148:	e7f5      	b.n	8002136 <_printf_i+0xb6>
 800214a:	3145      	adds	r1, #69	; 0x45
 800214c:	4e4e      	ldr	r6, [pc, #312]	; (8002288 <_printf_i+0x208>)
 800214e:	700a      	strb	r2, [r1, #0]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	6822      	ldr	r2, [r4, #0]
 8002154:	1d01      	adds	r1, r0, #4
 8002156:	6800      	ldr	r0, [r0, #0]
 8002158:	6019      	str	r1, [r3, #0]
 800215a:	0615      	lsls	r5, r2, #24
 800215c:	d521      	bpl.n	80021a2 <_printf_i+0x122>
 800215e:	07d3      	lsls	r3, r2, #31
 8002160:	d502      	bpl.n	8002168 <_printf_i+0xe8>
 8002162:	2320      	movs	r3, #32
 8002164:	431a      	orrs	r2, r3
 8002166:	6022      	str	r2, [r4, #0]
 8002168:	2710      	movs	r7, #16
 800216a:	2800      	cmp	r0, #0
 800216c:	d103      	bne.n	8002176 <_printf_i+0xf6>
 800216e:	2320      	movs	r3, #32
 8002170:	6822      	ldr	r2, [r4, #0]
 8002172:	439a      	bics	r2, r3
 8002174:	6022      	str	r2, [r4, #0]
 8002176:	0023      	movs	r3, r4
 8002178:	2200      	movs	r2, #0
 800217a:	3343      	adds	r3, #67	; 0x43
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	6863      	ldr	r3, [r4, #4]
 8002180:	60a3      	str	r3, [r4, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db58      	blt.n	8002238 <_printf_i+0x1b8>
 8002186:	2204      	movs	r2, #4
 8002188:	6821      	ldr	r1, [r4, #0]
 800218a:	4391      	bics	r1, r2
 800218c:	6021      	str	r1, [r4, #0]
 800218e:	2800      	cmp	r0, #0
 8002190:	d154      	bne.n	800223c <_printf_i+0x1bc>
 8002192:	9d02      	ldr	r5, [sp, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d05a      	beq.n	800224e <_printf_i+0x1ce>
 8002198:	0025      	movs	r5, r4
 800219a:	7833      	ldrb	r3, [r6, #0]
 800219c:	3542      	adds	r5, #66	; 0x42
 800219e:	702b      	strb	r3, [r5, #0]
 80021a0:	e055      	b.n	800224e <_printf_i+0x1ce>
 80021a2:	0655      	lsls	r5, r2, #25
 80021a4:	d5db      	bpl.n	800215e <_printf_i+0xde>
 80021a6:	b280      	uxth	r0, r0
 80021a8:	e7d9      	b.n	800215e <_printf_i+0xde>
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	680d      	ldr	r5, [r1, #0]
 80021ae:	1d10      	adds	r0, r2, #4
 80021b0:	6949      	ldr	r1, [r1, #20]
 80021b2:	6018      	str	r0, [r3, #0]
 80021b4:	6813      	ldr	r3, [r2, #0]
 80021b6:	062e      	lsls	r6, r5, #24
 80021b8:	d501      	bpl.n	80021be <_printf_i+0x13e>
 80021ba:	6019      	str	r1, [r3, #0]
 80021bc:	e002      	b.n	80021c4 <_printf_i+0x144>
 80021be:	066d      	lsls	r5, r5, #25
 80021c0:	d5fb      	bpl.n	80021ba <_printf_i+0x13a>
 80021c2:	8019      	strh	r1, [r3, #0]
 80021c4:	2300      	movs	r3, #0
 80021c6:	9d02      	ldr	r5, [sp, #8]
 80021c8:	6123      	str	r3, [r4, #16]
 80021ca:	e04f      	b.n	800226c <_printf_i+0x1ec>
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	1d11      	adds	r1, r2, #4
 80021d0:	6019      	str	r1, [r3, #0]
 80021d2:	6815      	ldr	r5, [r2, #0]
 80021d4:	2100      	movs	r1, #0
 80021d6:	6862      	ldr	r2, [r4, #4]
 80021d8:	0028      	movs	r0, r5
 80021da:	f000 f915 	bl	8002408 <memchr>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d001      	beq.n	80021e6 <_printf_i+0x166>
 80021e2:	1b40      	subs	r0, r0, r5
 80021e4:	6060      	str	r0, [r4, #4]
 80021e6:	6863      	ldr	r3, [r4, #4]
 80021e8:	6123      	str	r3, [r4, #16]
 80021ea:	2300      	movs	r3, #0
 80021ec:	9a02      	ldr	r2, [sp, #8]
 80021ee:	7013      	strb	r3, [r2, #0]
 80021f0:	e03c      	b.n	800226c <_printf_i+0x1ec>
 80021f2:	6923      	ldr	r3, [r4, #16]
 80021f4:	002a      	movs	r2, r5
 80021f6:	9904      	ldr	r1, [sp, #16]
 80021f8:	9803      	ldr	r0, [sp, #12]
 80021fa:	9d05      	ldr	r5, [sp, #20]
 80021fc:	47a8      	blx	r5
 80021fe:	1c43      	adds	r3, r0, #1
 8002200:	d03e      	beq.n	8002280 <_printf_i+0x200>
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	079b      	lsls	r3, r3, #30
 8002206:	d415      	bmi.n	8002234 <_printf_i+0x1b4>
 8002208:	9b07      	ldr	r3, [sp, #28]
 800220a:	68e0      	ldr	r0, [r4, #12]
 800220c:	4298      	cmp	r0, r3
 800220e:	da39      	bge.n	8002284 <_printf_i+0x204>
 8002210:	0018      	movs	r0, r3
 8002212:	e037      	b.n	8002284 <_printf_i+0x204>
 8002214:	0022      	movs	r2, r4
 8002216:	2301      	movs	r3, #1
 8002218:	3219      	adds	r2, #25
 800221a:	9904      	ldr	r1, [sp, #16]
 800221c:	9803      	ldr	r0, [sp, #12]
 800221e:	9e05      	ldr	r6, [sp, #20]
 8002220:	47b0      	blx	r6
 8002222:	1c43      	adds	r3, r0, #1
 8002224:	d02c      	beq.n	8002280 <_printf_i+0x200>
 8002226:	3501      	adds	r5, #1
 8002228:	68e3      	ldr	r3, [r4, #12]
 800222a:	9a07      	ldr	r2, [sp, #28]
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	42ab      	cmp	r3, r5
 8002230:	dcf0      	bgt.n	8002214 <_printf_i+0x194>
 8002232:	e7e9      	b.n	8002208 <_printf_i+0x188>
 8002234:	2500      	movs	r5, #0
 8002236:	e7f7      	b.n	8002228 <_printf_i+0x1a8>
 8002238:	2800      	cmp	r0, #0
 800223a:	d0ad      	beq.n	8002198 <_printf_i+0x118>
 800223c:	9d02      	ldr	r5, [sp, #8]
 800223e:	0039      	movs	r1, r7
 8002240:	f7fd fff0 	bl	8000224 <__aeabi_uidivmod>
 8002244:	5c73      	ldrb	r3, [r6, r1]
 8002246:	3d01      	subs	r5, #1
 8002248:	702b      	strb	r3, [r5, #0]
 800224a:	2800      	cmp	r0, #0
 800224c:	d1f7      	bne.n	800223e <_printf_i+0x1be>
 800224e:	2f08      	cmp	r7, #8
 8002250:	d109      	bne.n	8002266 <_printf_i+0x1e6>
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	07db      	lsls	r3, r3, #31
 8002256:	d506      	bpl.n	8002266 <_printf_i+0x1e6>
 8002258:	6863      	ldr	r3, [r4, #4]
 800225a:	6922      	ldr	r2, [r4, #16]
 800225c:	4293      	cmp	r3, r2
 800225e:	dc02      	bgt.n	8002266 <_printf_i+0x1e6>
 8002260:	2330      	movs	r3, #48	; 0x30
 8002262:	3d01      	subs	r5, #1
 8002264:	702b      	strb	r3, [r5, #0]
 8002266:	9b02      	ldr	r3, [sp, #8]
 8002268:	1b5b      	subs	r3, r3, r5
 800226a:	6123      	str	r3, [r4, #16]
 800226c:	9b05      	ldr	r3, [sp, #20]
 800226e:	aa07      	add	r2, sp, #28
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	0021      	movs	r1, r4
 8002274:	9b04      	ldr	r3, [sp, #16]
 8002276:	9803      	ldr	r0, [sp, #12]
 8002278:	f7ff fe94 	bl	8001fa4 <_printf_common>
 800227c:	1c43      	adds	r3, r0, #1
 800227e:	d1b8      	bne.n	80021f2 <_printf_i+0x172>
 8002280:	2001      	movs	r0, #1
 8002282:	4240      	negs	r0, r0
 8002284:	b009      	add	sp, #36	; 0x24
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	0800323d 	.word	0x0800323d
 800228c:	0800324e 	.word	0x0800324e

08002290 <_sbrk_r>:
 8002290:	2300      	movs	r3, #0
 8002292:	b570      	push	{r4, r5, r6, lr}
 8002294:	4c06      	ldr	r4, [pc, #24]	; (80022b0 <_sbrk_r+0x20>)
 8002296:	0005      	movs	r5, r0
 8002298:	0008      	movs	r0, r1
 800229a:	6023      	str	r3, [r4, #0]
 800229c:	f7ff f8cc 	bl	8001438 <_sbrk>
 80022a0:	1c43      	adds	r3, r0, #1
 80022a2:	d103      	bne.n	80022ac <_sbrk_r+0x1c>
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d000      	beq.n	80022ac <_sbrk_r+0x1c>
 80022aa:	602b      	str	r3, [r5, #0]
 80022ac:	bd70      	pop	{r4, r5, r6, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	20000210 	.word	0x20000210

080022b4 <__sread>:
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	000c      	movs	r4, r1
 80022b8:	250e      	movs	r5, #14
 80022ba:	5f49      	ldrsh	r1, [r1, r5]
 80022bc:	f000 f8b2 	bl	8002424 <_read_r>
 80022c0:	2800      	cmp	r0, #0
 80022c2:	db03      	blt.n	80022cc <__sread+0x18>
 80022c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022c6:	181b      	adds	r3, r3, r0
 80022c8:	6563      	str	r3, [r4, #84]	; 0x54
 80022ca:	bd70      	pop	{r4, r5, r6, pc}
 80022cc:	89a3      	ldrh	r3, [r4, #12]
 80022ce:	4a02      	ldr	r2, [pc, #8]	; (80022d8 <__sread+0x24>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	81a3      	strh	r3, [r4, #12]
 80022d4:	e7f9      	b.n	80022ca <__sread+0x16>
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	ffffefff 	.word	0xffffefff

080022dc <__swrite>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	001f      	movs	r7, r3
 80022e0:	898b      	ldrh	r3, [r1, #12]
 80022e2:	0005      	movs	r5, r0
 80022e4:	000c      	movs	r4, r1
 80022e6:	0016      	movs	r6, r2
 80022e8:	05db      	lsls	r3, r3, #23
 80022ea:	d505      	bpl.n	80022f8 <__swrite+0x1c>
 80022ec:	230e      	movs	r3, #14
 80022ee:	5ec9      	ldrsh	r1, [r1, r3]
 80022f0:	2200      	movs	r2, #0
 80022f2:	2302      	movs	r3, #2
 80022f4:	f000 f874 	bl	80023e0 <_lseek_r>
 80022f8:	89a3      	ldrh	r3, [r4, #12]
 80022fa:	4a05      	ldr	r2, [pc, #20]	; (8002310 <__swrite+0x34>)
 80022fc:	0028      	movs	r0, r5
 80022fe:	4013      	ands	r3, r2
 8002300:	81a3      	strh	r3, [r4, #12]
 8002302:	0032      	movs	r2, r6
 8002304:	230e      	movs	r3, #14
 8002306:	5ee1      	ldrsh	r1, [r4, r3]
 8002308:	003b      	movs	r3, r7
 800230a:	f000 f81f 	bl	800234c <_write_r>
 800230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002310:	ffffefff 	.word	0xffffefff

08002314 <__sseek>:
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	000c      	movs	r4, r1
 8002318:	250e      	movs	r5, #14
 800231a:	5f49      	ldrsh	r1, [r1, r5]
 800231c:	f000 f860 	bl	80023e0 <_lseek_r>
 8002320:	89a3      	ldrh	r3, [r4, #12]
 8002322:	1c42      	adds	r2, r0, #1
 8002324:	d103      	bne.n	800232e <__sseek+0x1a>
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <__sseek+0x28>)
 8002328:	4013      	ands	r3, r2
 800232a:	81a3      	strh	r3, [r4, #12]
 800232c:	bd70      	pop	{r4, r5, r6, pc}
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	0152      	lsls	r2, r2, #5
 8002332:	4313      	orrs	r3, r2
 8002334:	81a3      	strh	r3, [r4, #12]
 8002336:	6560      	str	r0, [r4, #84]	; 0x54
 8002338:	e7f8      	b.n	800232c <__sseek+0x18>
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	ffffefff 	.word	0xffffefff

08002340 <__sclose>:
 8002340:	b510      	push	{r4, lr}
 8002342:	230e      	movs	r3, #14
 8002344:	5ec9      	ldrsh	r1, [r1, r3]
 8002346:	f000 f815 	bl	8002374 <_close_r>
 800234a:	bd10      	pop	{r4, pc}

0800234c <_write_r>:
 800234c:	b570      	push	{r4, r5, r6, lr}
 800234e:	0005      	movs	r5, r0
 8002350:	0008      	movs	r0, r1
 8002352:	0011      	movs	r1, r2
 8002354:	2200      	movs	r2, #0
 8002356:	4c06      	ldr	r4, [pc, #24]	; (8002370 <_write_r+0x24>)
 8002358:	6022      	str	r2, [r4, #0]
 800235a:	001a      	movs	r2, r3
 800235c:	f000 f927 	bl	80025ae <_write>
 8002360:	1c43      	adds	r3, r0, #1
 8002362:	d103      	bne.n	800236c <_write_r+0x20>
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d000      	beq.n	800236c <_write_r+0x20>
 800236a:	602b      	str	r3, [r5, #0]
 800236c:	bd70      	pop	{r4, r5, r6, pc}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	20000210 	.word	0x20000210

08002374 <_close_r>:
 8002374:	2300      	movs	r3, #0
 8002376:	b570      	push	{r4, r5, r6, lr}
 8002378:	4c06      	ldr	r4, [pc, #24]	; (8002394 <_close_r+0x20>)
 800237a:	0005      	movs	r5, r0
 800237c:	0008      	movs	r0, r1
 800237e:	6023      	str	r3, [r4, #0]
 8002380:	f000 f940 	bl	8002604 <_close>
 8002384:	1c43      	adds	r3, r0, #1
 8002386:	d103      	bne.n	8002390 <_close_r+0x1c>
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d000      	beq.n	8002390 <_close_r+0x1c>
 800238e:	602b      	str	r3, [r5, #0]
 8002390:	bd70      	pop	{r4, r5, r6, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	20000210 	.word	0x20000210

08002398 <_fstat_r>:
 8002398:	2300      	movs	r3, #0
 800239a:	b570      	push	{r4, r5, r6, lr}
 800239c:	4c06      	ldr	r4, [pc, #24]	; (80023b8 <_fstat_r+0x20>)
 800239e:	0005      	movs	r5, r0
 80023a0:	0008      	movs	r0, r1
 80023a2:	0011      	movs	r1, r2
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	f000 f975 	bl	8002694 <_fstat>
 80023aa:	1c43      	adds	r3, r0, #1
 80023ac:	d103      	bne.n	80023b6 <_fstat_r+0x1e>
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d000      	beq.n	80023b6 <_fstat_r+0x1e>
 80023b4:	602b      	str	r3, [r5, #0]
 80023b6:	bd70      	pop	{r4, r5, r6, pc}
 80023b8:	20000210 	.word	0x20000210

080023bc <_isatty_r>:
 80023bc:	2300      	movs	r3, #0
 80023be:	b570      	push	{r4, r5, r6, lr}
 80023c0:	4c06      	ldr	r4, [pc, #24]	; (80023dc <_isatty_r+0x20>)
 80023c2:	0005      	movs	r5, r0
 80023c4:	0008      	movs	r0, r1
 80023c6:	6023      	str	r3, [r4, #0]
 80023c8:	f000 fac4 	bl	8002954 <_isatty>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d103      	bne.n	80023d8 <_isatty_r+0x1c>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d000      	beq.n	80023d8 <_isatty_r+0x1c>
 80023d6:	602b      	str	r3, [r5, #0]
 80023d8:	bd70      	pop	{r4, r5, r6, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	20000210 	.word	0x20000210

080023e0 <_lseek_r>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	0005      	movs	r5, r0
 80023e4:	0008      	movs	r0, r1
 80023e6:	0011      	movs	r1, r2
 80023e8:	2200      	movs	r2, #0
 80023ea:	4c06      	ldr	r4, [pc, #24]	; (8002404 <_lseek_r+0x24>)
 80023ec:	6022      	str	r2, [r4, #0]
 80023ee:	001a      	movs	r2, r3
 80023f0:	f000 f8c9 	bl	8002586 <_lseek>
 80023f4:	1c43      	adds	r3, r0, #1
 80023f6:	d103      	bne.n	8002400 <_lseek_r+0x20>
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d000      	beq.n	8002400 <_lseek_r+0x20>
 80023fe:	602b      	str	r3, [r5, #0]
 8002400:	bd70      	pop	{r4, r5, r6, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	20000210 	.word	0x20000210

08002408 <memchr>:
 8002408:	b2c9      	uxtb	r1, r1
 800240a:	1882      	adds	r2, r0, r2
 800240c:	4290      	cmp	r0, r2
 800240e:	d101      	bne.n	8002414 <memchr+0xc>
 8002410:	2000      	movs	r0, #0
 8002412:	4770      	bx	lr
 8002414:	7803      	ldrb	r3, [r0, #0]
 8002416:	428b      	cmp	r3, r1
 8002418:	d0fb      	beq.n	8002412 <memchr+0xa>
 800241a:	3001      	adds	r0, #1
 800241c:	e7f6      	b.n	800240c <memchr+0x4>

0800241e <__malloc_lock>:
 800241e:	4770      	bx	lr

08002420 <__malloc_unlock>:
 8002420:	4770      	bx	lr
	...

08002424 <_read_r>:
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	0005      	movs	r5, r0
 8002428:	0008      	movs	r0, r1
 800242a:	0011      	movs	r1, r2
 800242c:	2200      	movs	r2, #0
 800242e:	4c06      	ldr	r4, [pc, #24]	; (8002448 <_read_r+0x24>)
 8002430:	6022      	str	r2, [r4, #0]
 8002432:	001a      	movs	r2, r3
 8002434:	f000 f852 	bl	80024dc <_read>
 8002438:	1c43      	adds	r3, r0, #1
 800243a:	d103      	bne.n	8002444 <_read_r+0x20>
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d000      	beq.n	8002444 <_read_r+0x20>
 8002442:	602b      	str	r3, [r5, #0]
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	20000210 	.word	0x20000210

0800244c <findslot>:
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <findslot+0x2c>)
 800244e:	b510      	push	{r4, lr}
 8002450:	0004      	movs	r4, r0
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	2800      	cmp	r0, #0
 8002456:	d004      	beq.n	8002462 <findslot+0x16>
 8002458:	6983      	ldr	r3, [r0, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <findslot+0x16>
 800245e:	f7ff fabb 	bl	80019d8 <__sinit>
 8002462:	2000      	movs	r0, #0
 8002464:	2c13      	cmp	r4, #19
 8002466:	d805      	bhi.n	8002474 <findslot+0x28>
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <findslot+0x30>)
 800246a:	00e4      	lsls	r4, r4, #3
 800246c:	58e2      	ldr	r2, [r4, r3]
 800246e:	3201      	adds	r2, #1
 8002470:	d000      	beq.n	8002474 <findslot+0x28>
 8002472:	18e0      	adds	r0, r4, r3
 8002474:	bd10      	pop	{r4, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	200000c4 	.word	0x200000c4
 800247c:	20000170 	.word	0x20000170

08002480 <checkerror>:
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	0005      	movs	r5, r0
 8002484:	1c43      	adds	r3, r0, #1
 8002486:	d109      	bne.n	800249c <checkerror+0x1c>
 8002488:	f7ff f82c 	bl	80014e4 <__errno>
 800248c:	2413      	movs	r4, #19
 800248e:	0006      	movs	r6, r0
 8002490:	2700      	movs	r7, #0
 8002492:	1c20      	adds	r0, r4, #0
 8002494:	1c39      	adds	r1, r7, #0
 8002496:	beab      	bkpt	0x00ab
 8002498:	1c04      	adds	r4, r0, #0
 800249a:	6034      	str	r4, [r6, #0]
 800249c:	0028      	movs	r0, r5
 800249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024a0 <error>:
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	0005      	movs	r5, r0
 80024a4:	f7ff f81e 	bl	80014e4 <__errno>
 80024a8:	2413      	movs	r4, #19
 80024aa:	0006      	movs	r6, r0
 80024ac:	2700      	movs	r7, #0
 80024ae:	1c20      	adds	r0, r4, #0
 80024b0:	1c39      	adds	r1, r7, #0
 80024b2:	beab      	bkpt	0x00ab
 80024b4:	1c04      	adds	r4, r0, #0
 80024b6:	0028      	movs	r0, r5
 80024b8:	6034      	str	r4, [r6, #0]
 80024ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024bc <_swiread>:
 80024bc:	b530      	push	{r4, r5, lr}
 80024be:	b085      	sub	sp, #20
 80024c0:	ad01      	add	r5, sp, #4
 80024c2:	9001      	str	r0, [sp, #4]
 80024c4:	9102      	str	r1, [sp, #8]
 80024c6:	9203      	str	r2, [sp, #12]
 80024c8:	2406      	movs	r4, #6
 80024ca:	1c20      	adds	r0, r4, #0
 80024cc:	1c29      	adds	r1, r5, #0
 80024ce:	beab      	bkpt	0x00ab
 80024d0:	1c04      	adds	r4, r0, #0
 80024d2:	0020      	movs	r0, r4
 80024d4:	f7ff ffd4 	bl	8002480 <checkerror>
 80024d8:	b005      	add	sp, #20
 80024da:	bd30      	pop	{r4, r5, pc}

080024dc <_read>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	000e      	movs	r6, r1
 80024e0:	0015      	movs	r5, r2
 80024e2:	f7ff ffb3 	bl	800244c <findslot>
 80024e6:	1e04      	subs	r4, r0, #0
 80024e8:	d106      	bne.n	80024f8 <_read+0x1c>
 80024ea:	f7fe fffb 	bl	80014e4 <__errno>
 80024ee:	2309      	movs	r3, #9
 80024f0:	6003      	str	r3, [r0, #0]
 80024f2:	2001      	movs	r0, #1
 80024f4:	4240      	negs	r0, r0
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	002a      	movs	r2, r5
 80024fa:	0031      	movs	r1, r6
 80024fc:	6800      	ldr	r0, [r0, #0]
 80024fe:	f7ff ffdd 	bl	80024bc <_swiread>
 8002502:	1c43      	adds	r3, r0, #1
 8002504:	d0f7      	beq.n	80024f6 <_read+0x1a>
 8002506:	6863      	ldr	r3, [r4, #4]
 8002508:	1a28      	subs	r0, r5, r0
 800250a:	181b      	adds	r3, r3, r0
 800250c:	6063      	str	r3, [r4, #4]
 800250e:	e7f2      	b.n	80024f6 <_read+0x1a>

08002510 <_swilseek>:
 8002510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002512:	000c      	movs	r4, r1
 8002514:	0016      	movs	r6, r2
 8002516:	f7ff ff99 	bl	800244c <findslot>
 800251a:	1e05      	subs	r5, r0, #0
 800251c:	d107      	bne.n	800252e <_swilseek+0x1e>
 800251e:	f7fe ffe1 	bl	80014e4 <__errno>
 8002522:	2309      	movs	r3, #9
 8002524:	6003      	str	r3, [r0, #0]
 8002526:	2401      	movs	r4, #1
 8002528:	4264      	negs	r4, r4
 800252a:	0020      	movs	r0, r4
 800252c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800252e:	2e02      	cmp	r6, #2
 8002530:	d903      	bls.n	800253a <_swilseek+0x2a>
 8002532:	f7fe ffd7 	bl	80014e4 <__errno>
 8002536:	2316      	movs	r3, #22
 8002538:	e7f4      	b.n	8002524 <_swilseek+0x14>
 800253a:	2e01      	cmp	r6, #1
 800253c:	d112      	bne.n	8002564 <_swilseek+0x54>
 800253e:	6843      	ldr	r3, [r0, #4]
 8002540:	18e4      	adds	r4, r4, r3
 8002542:	d4f6      	bmi.n	8002532 <_swilseek+0x22>
 8002544:	466f      	mov	r7, sp
 8002546:	682b      	ldr	r3, [r5, #0]
 8002548:	260a      	movs	r6, #10
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	607c      	str	r4, [r7, #4]
 800254e:	1c30      	adds	r0, r6, #0
 8002550:	1c39      	adds	r1, r7, #0
 8002552:	beab      	bkpt	0x00ab
 8002554:	1c06      	adds	r6, r0, #0
 8002556:	0030      	movs	r0, r6
 8002558:	f7ff ff92 	bl	8002480 <checkerror>
 800255c:	2800      	cmp	r0, #0
 800255e:	dbe2      	blt.n	8002526 <_swilseek+0x16>
 8002560:	606c      	str	r4, [r5, #4]
 8002562:	e7e2      	b.n	800252a <_swilseek+0x1a>
 8002564:	2e02      	cmp	r6, #2
 8002566:	d1ed      	bne.n	8002544 <_swilseek+0x34>
 8002568:	6803      	ldr	r3, [r0, #0]
 800256a:	466f      	mov	r7, sp
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	360a      	adds	r6, #10
 8002570:	1c30      	adds	r0, r6, #0
 8002572:	1c39      	adds	r1, r7, #0
 8002574:	beab      	bkpt	0x00ab
 8002576:	1c06      	adds	r6, r0, #0
 8002578:	0030      	movs	r0, r6
 800257a:	f7ff ff81 	bl	8002480 <checkerror>
 800257e:	1824      	adds	r4, r4, r0
 8002580:	1c43      	adds	r3, r0, #1
 8002582:	d1df      	bne.n	8002544 <_swilseek+0x34>
 8002584:	e7cf      	b.n	8002526 <_swilseek+0x16>

08002586 <_lseek>:
 8002586:	b510      	push	{r4, lr}
 8002588:	f7ff ffc2 	bl	8002510 <_swilseek>
 800258c:	bd10      	pop	{r4, pc}

0800258e <_swiwrite>:
 800258e:	b530      	push	{r4, r5, lr}
 8002590:	b085      	sub	sp, #20
 8002592:	ad01      	add	r5, sp, #4
 8002594:	9001      	str	r0, [sp, #4]
 8002596:	9102      	str	r1, [sp, #8]
 8002598:	9203      	str	r2, [sp, #12]
 800259a:	2405      	movs	r4, #5
 800259c:	1c20      	adds	r0, r4, #0
 800259e:	1c29      	adds	r1, r5, #0
 80025a0:	beab      	bkpt	0x00ab
 80025a2:	1c04      	adds	r4, r0, #0
 80025a4:	0020      	movs	r0, r4
 80025a6:	f7ff ff6b 	bl	8002480 <checkerror>
 80025aa:	b005      	add	sp, #20
 80025ac:	bd30      	pop	{r4, r5, pc}

080025ae <_write>:
 80025ae:	b570      	push	{r4, r5, r6, lr}
 80025b0:	000e      	movs	r6, r1
 80025b2:	0015      	movs	r5, r2
 80025b4:	f7ff ff4a 	bl	800244c <findslot>
 80025b8:	1e04      	subs	r4, r0, #0
 80025ba:	d106      	bne.n	80025ca <_write+0x1c>
 80025bc:	f7fe ff92 	bl	80014e4 <__errno>
 80025c0:	2309      	movs	r3, #9
 80025c2:	6003      	str	r3, [r0, #0]
 80025c4:	2001      	movs	r0, #1
 80025c6:	4240      	negs	r0, r0
 80025c8:	e00f      	b.n	80025ea <_write+0x3c>
 80025ca:	002a      	movs	r2, r5
 80025cc:	0031      	movs	r1, r6
 80025ce:	6800      	ldr	r0, [r0, #0]
 80025d0:	f7ff ffdd 	bl	800258e <_swiwrite>
 80025d4:	1e02      	subs	r2, r0, #0
 80025d6:	dbf5      	blt.n	80025c4 <_write+0x16>
 80025d8:	6863      	ldr	r3, [r4, #4]
 80025da:	1a28      	subs	r0, r5, r0
 80025dc:	1819      	adds	r1, r3, r0
 80025de:	6061      	str	r1, [r4, #4]
 80025e0:	42aa      	cmp	r2, r5
 80025e2:	d102      	bne.n	80025ea <_write+0x3c>
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7ff ff5b 	bl	80024a0 <error>
 80025ea:	bd70      	pop	{r4, r5, r6, pc}

080025ec <_swiclose>:
 80025ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025ee:	2402      	movs	r4, #2
 80025f0:	9001      	str	r0, [sp, #4]
 80025f2:	ad01      	add	r5, sp, #4
 80025f4:	1c20      	adds	r0, r4, #0
 80025f6:	1c29      	adds	r1, r5, #0
 80025f8:	beab      	bkpt	0x00ab
 80025fa:	1c04      	adds	r4, r0, #0
 80025fc:	0020      	movs	r0, r4
 80025fe:	f7ff ff3f 	bl	8002480 <checkerror>
 8002602:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08002604 <_close>:
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	0005      	movs	r5, r0
 8002608:	f7ff ff20 	bl	800244c <findslot>
 800260c:	1e04      	subs	r4, r0, #0
 800260e:	d106      	bne.n	800261e <_close+0x1a>
 8002610:	f7fe ff68 	bl	80014e4 <__errno>
 8002614:	2309      	movs	r3, #9
 8002616:	6003      	str	r3, [r0, #0]
 8002618:	2001      	movs	r0, #1
 800261a:	4240      	negs	r0, r0
 800261c:	bd70      	pop	{r4, r5, r6, pc}
 800261e:	3d01      	subs	r5, #1
 8002620:	2d01      	cmp	r5, #1
 8002622:	d809      	bhi.n	8002638 <_close+0x34>
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <_close+0x48>)
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	429a      	cmp	r2, r3
 800262c:	d104      	bne.n	8002638 <_close+0x34>
 800262e:	2301      	movs	r3, #1
 8002630:	425b      	negs	r3, r3
 8002632:	6003      	str	r3, [r0, #0]
 8002634:	2000      	movs	r0, #0
 8002636:	e7f1      	b.n	800261c <_close+0x18>
 8002638:	6820      	ldr	r0, [r4, #0]
 800263a:	f7ff ffd7 	bl	80025ec <_swiclose>
 800263e:	2800      	cmp	r0, #0
 8002640:	d1ec      	bne.n	800261c <_close+0x18>
 8002642:	2301      	movs	r3, #1
 8002644:	425b      	negs	r3, r3
 8002646:	6023      	str	r3, [r4, #0]
 8002648:	e7e8      	b.n	800261c <_close+0x18>
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	20000170 	.word	0x20000170

08002650 <_swistat>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	000c      	movs	r4, r1
 8002654:	f7ff fefa 	bl	800244c <findslot>
 8002658:	1e06      	subs	r6, r0, #0
 800265a:	d106      	bne.n	800266a <_swistat+0x1a>
 800265c:	f7fe ff42 	bl	80014e4 <__errno>
 8002660:	2309      	movs	r3, #9
 8002662:	6003      	str	r3, [r0, #0]
 8002664:	2001      	movs	r0, #1
 8002666:	4240      	negs	r0, r0
 8002668:	bd70      	pop	{r4, r5, r6, pc}
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	6862      	ldr	r2, [r4, #4]
 800266e:	019b      	lsls	r3, r3, #6
 8002670:	4313      	orrs	r3, r2
 8002672:	6063      	str	r3, [r4, #4]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	6463      	str	r3, [r4, #68]	; 0x44
 800267a:	250c      	movs	r5, #12
 800267c:	1c28      	adds	r0, r5, #0
 800267e:	1c31      	adds	r1, r6, #0
 8002680:	beab      	bkpt	0x00ab
 8002682:	1c05      	adds	r5, r0, #0
 8002684:	0028      	movs	r0, r5
 8002686:	f7ff fefb 	bl	8002480 <checkerror>
 800268a:	1c43      	adds	r3, r0, #1
 800268c:	d0ec      	beq.n	8002668 <_swistat+0x18>
 800268e:	6120      	str	r0, [r4, #16]
 8002690:	2000      	movs	r0, #0
 8002692:	e7e9      	b.n	8002668 <_swistat+0x18>

08002694 <_fstat>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	000c      	movs	r4, r1
 8002698:	0005      	movs	r5, r0
 800269a:	2258      	movs	r2, #88	; 0x58
 800269c:	2100      	movs	r1, #0
 800269e:	0020      	movs	r0, r4
 80026a0:	f7fe ff4a 	bl	8001538 <memset>
 80026a4:	0028      	movs	r0, r5
 80026a6:	0021      	movs	r1, r4
 80026a8:	f7ff ffd2 	bl	8002650 <_swistat>
 80026ac:	bd70      	pop	{r4, r5, r6, pc}

080026ae <_stat>:
 80026ae:	b570      	push	{r4, r5, r6, lr}
 80026b0:	000d      	movs	r5, r1
 80026b2:	0004      	movs	r4, r0
 80026b4:	2258      	movs	r2, #88	; 0x58
 80026b6:	2100      	movs	r1, #0
 80026b8:	0028      	movs	r0, r5
 80026ba:	f7fe ff3d 	bl	8001538 <memset>
 80026be:	0020      	movs	r0, r4
 80026c0:	2100      	movs	r1, #0
 80026c2:	f000 f813 	bl	80026ec <_swiopen>
 80026c6:	0004      	movs	r4, r0
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	d00c      	beq.n	80026e6 <_stat+0x38>
 80026cc:	2381      	movs	r3, #129	; 0x81
 80026ce:	686a      	ldr	r2, [r5, #4]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	4313      	orrs	r3, r2
 80026d4:	606b      	str	r3, [r5, #4]
 80026d6:	0029      	movs	r1, r5
 80026d8:	f7ff ffba 	bl	8002650 <_swistat>
 80026dc:	0005      	movs	r5, r0
 80026de:	0020      	movs	r0, r4
 80026e0:	f7ff ff90 	bl	8002604 <_close>
 80026e4:	002c      	movs	r4, r5
 80026e6:	0020      	movs	r0, r4
 80026e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080026ec <_swiopen>:
 80026ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ee:	000d      	movs	r5, r1
 80026f0:	2700      	movs	r7, #0
 80026f2:	b099      	sub	sp, #100	; 0x64
 80026f4:	9000      	str	r0, [sp, #0]
 80026f6:	00fb      	lsls	r3, r7, #3
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <_swiopen+0xb4>)
 80026fc:	00fa      	lsls	r2, r7, #3
 80026fe:	589c      	ldr	r4, [r3, r2]
 8002700:	1c63      	adds	r3, r4, #1
 8002702:	d038      	beq.n	8002776 <_swiopen+0x8a>
 8002704:	3701      	adds	r7, #1
 8002706:	2f14      	cmp	r7, #20
 8002708:	d1f5      	bne.n	80026f6 <_swiopen+0xa>
 800270a:	f7fe feeb 	bl	80014e4 <__errno>
 800270e:	2401      	movs	r4, #1
 8002710:	2318      	movs	r3, #24
 8002712:	4264      	negs	r4, r4
 8002714:	6003      	str	r3, [r0, #0]
 8002716:	e03f      	b.n	8002798 <_swiopen+0xac>
 8002718:	2302      	movs	r3, #2
 800271a:	03ec      	lsls	r4, r5, #15
 800271c:	0fe4      	lsrs	r4, r4, #31
 800271e:	421d      	tst	r5, r3
 8002720:	d000      	beq.n	8002724 <_swiopen+0x38>
 8002722:	431c      	orrs	r4, r3
 8002724:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <_swiopen+0xb8>)
 8002726:	421d      	tst	r5, r3
 8002728:	d001      	beq.n	800272e <_swiopen+0x42>
 800272a:	2304      	movs	r3, #4
 800272c:	431c      	orrs	r4, r3
 800272e:	2308      	movs	r3, #8
 8002730:	421d      	tst	r5, r3
 8002732:	d002      	beq.n	800273a <_swiopen+0x4e>
 8002734:	2204      	movs	r2, #4
 8002736:	4394      	bics	r4, r2
 8002738:	431c      	orrs	r4, r3
 800273a:	9b00      	ldr	r3, [sp, #0]
 800273c:	0018      	movs	r0, r3
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	f7fd fce2 	bl	8000108 <strlen>
 8002744:	6074      	str	r4, [r6, #4]
 8002746:	60b0      	str	r0, [r6, #8]
 8002748:	2401      	movs	r4, #1
 800274a:	1c20      	adds	r0, r4, #0
 800274c:	1c31      	adds	r1, r6, #0
 800274e:	beab      	bkpt	0x00ab
 8002750:	1c06      	adds	r6, r0, #0
 8002752:	2e00      	cmp	r6, #0
 8002754:	db0a      	blt.n	800276c <_swiopen+0x80>
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <_swiopen+0xb4>)
 8002758:	00fa      	lsls	r2, r7, #3
 800275a:	509e      	str	r6, [r3, r2]
 800275c:	0013      	movs	r3, r2
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <_swiopen+0xb4>)
 8002760:	003c      	movs	r4, r7
 8002762:	4694      	mov	ip, r2
 8002764:	2200      	movs	r2, #0
 8002766:	4463      	add	r3, ip
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	e015      	b.n	8002798 <_swiopen+0xac>
 800276c:	0030      	movs	r0, r6
 800276e:	f7ff fe97 	bl	80024a0 <error>
 8002772:	0004      	movs	r4, r0
 8002774:	e010      	b.n	8002798 <_swiopen+0xac>
 8002776:	23a0      	movs	r3, #160	; 0xa0
 8002778:	002a      	movs	r2, r5
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	401a      	ands	r2, r3
 800277e:	ae02      	add	r6, sp, #8
 8002780:	429a      	cmp	r2, r3
 8002782:	d1c9      	bne.n	8002718 <_swiopen+0x2c>
 8002784:	0031      	movs	r1, r6
 8002786:	9800      	ldr	r0, [sp, #0]
 8002788:	f7ff ff91 	bl	80026ae <_stat>
 800278c:	1c43      	adds	r3, r0, #1
 800278e:	d0c3      	beq.n	8002718 <_swiopen+0x2c>
 8002790:	f7fe fea8 	bl	80014e4 <__errno>
 8002794:	2311      	movs	r3, #17
 8002796:	6003      	str	r3, [r0, #0]
 8002798:	0020      	movs	r0, r4
 800279a:	b019      	add	sp, #100	; 0x64
 800279c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	20000170 	.word	0x20000170
 80027a4:	00000601 	.word	0x00000601

080027a8 <_get_semihosting_exts>:
 80027a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027aa:	b085      	sub	sp, #20
 80027ac:	9000      	str	r0, [sp, #0]
 80027ae:	9101      	str	r1, [sp, #4]
 80027b0:	4827      	ldr	r0, [pc, #156]	; (8002850 <_get_semihosting_exts+0xa8>)
 80027b2:	2100      	movs	r1, #0
 80027b4:	0015      	movs	r5, r2
 80027b6:	f7ff ff99 	bl	80026ec <_swiopen>
 80027ba:	0004      	movs	r4, r0
 80027bc:	002a      	movs	r2, r5
 80027be:	2100      	movs	r1, #0
 80027c0:	9800      	ldr	r0, [sp, #0]
 80027c2:	f7fe feb9 	bl	8001538 <memset>
 80027c6:	1c63      	adds	r3, r4, #1
 80027c8:	d015      	beq.n	80027f6 <_get_semihosting_exts+0x4e>
 80027ca:	0020      	movs	r0, r4
 80027cc:	f7ff fe3e 	bl	800244c <findslot>
 80027d0:	260c      	movs	r6, #12
 80027d2:	0007      	movs	r7, r0
 80027d4:	1c30      	adds	r0, r6, #0
 80027d6:	1c39      	adds	r1, r7, #0
 80027d8:	beab      	bkpt	0x00ab
 80027da:	1c06      	adds	r6, r0, #0
 80027dc:	0030      	movs	r0, r6
 80027de:	f7ff fe4f 	bl	8002480 <checkerror>
 80027e2:	2803      	cmp	r0, #3
 80027e4:	dd02      	ble.n	80027ec <_get_semihosting_exts+0x44>
 80027e6:	3803      	subs	r0, #3
 80027e8:	42a8      	cmp	r0, r5
 80027ea:	dc07      	bgt.n	80027fc <_get_semihosting_exts+0x54>
 80027ec:	0020      	movs	r0, r4
 80027ee:	2401      	movs	r4, #1
 80027f0:	f7ff ff08 	bl	8002604 <_close>
 80027f4:	4264      	negs	r4, r4
 80027f6:	0020      	movs	r0, r4
 80027f8:	b005      	add	sp, #20
 80027fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027fc:	ae03      	add	r6, sp, #12
 80027fe:	2204      	movs	r2, #4
 8002800:	0031      	movs	r1, r6
 8002802:	0020      	movs	r0, r4
 8002804:	f7ff fe6a 	bl	80024dc <_read>
 8002808:	2803      	cmp	r0, #3
 800280a:	ddef      	ble.n	80027ec <_get_semihosting_exts+0x44>
 800280c:	7833      	ldrb	r3, [r6, #0]
 800280e:	2b53      	cmp	r3, #83	; 0x53
 8002810:	d1ec      	bne.n	80027ec <_get_semihosting_exts+0x44>
 8002812:	7873      	ldrb	r3, [r6, #1]
 8002814:	2b48      	cmp	r3, #72	; 0x48
 8002816:	d1e9      	bne.n	80027ec <_get_semihosting_exts+0x44>
 8002818:	78b3      	ldrb	r3, [r6, #2]
 800281a:	2b46      	cmp	r3, #70	; 0x46
 800281c:	d1e6      	bne.n	80027ec <_get_semihosting_exts+0x44>
 800281e:	78f3      	ldrb	r3, [r6, #3]
 8002820:	2b42      	cmp	r3, #66	; 0x42
 8002822:	d1e3      	bne.n	80027ec <_get_semihosting_exts+0x44>
 8002824:	2201      	movs	r2, #1
 8002826:	9901      	ldr	r1, [sp, #4]
 8002828:	0020      	movs	r0, r4
 800282a:	f7ff fe71 	bl	8002510 <_swilseek>
 800282e:	2800      	cmp	r0, #0
 8002830:	dbdc      	blt.n	80027ec <_get_semihosting_exts+0x44>
 8002832:	002a      	movs	r2, r5
 8002834:	9900      	ldr	r1, [sp, #0]
 8002836:	0020      	movs	r0, r4
 8002838:	f7ff fe50 	bl	80024dc <_read>
 800283c:	0005      	movs	r5, r0
 800283e:	0020      	movs	r0, r4
 8002840:	f7ff fee0 	bl	8002604 <_close>
 8002844:	0028      	movs	r0, r5
 8002846:	f7ff fe1b 	bl	8002480 <checkerror>
 800284a:	0004      	movs	r4, r0
 800284c:	e7d3      	b.n	80027f6 <_get_semihosting_exts+0x4e>
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	0800325f 	.word	0x0800325f

08002854 <initialise_semihosting_exts>:
 8002854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002856:	2401      	movs	r4, #1
 8002858:	2100      	movs	r1, #0
 800285a:	4e09      	ldr	r6, [pc, #36]	; (8002880 <initialise_semihosting_exts+0x2c>)
 800285c:	4d09      	ldr	r5, [pc, #36]	; (8002884 <initialise_semihosting_exts+0x30>)
 800285e:	af01      	add	r7, sp, #4
 8002860:	0022      	movs	r2, r4
 8002862:	0038      	movs	r0, r7
 8002864:	6031      	str	r1, [r6, #0]
 8002866:	602c      	str	r4, [r5, #0]
 8002868:	f7ff ff9e 	bl	80027a8 <_get_semihosting_exts>
 800286c:	2800      	cmp	r0, #0
 800286e:	dd05      	ble.n	800287c <initialise_semihosting_exts+0x28>
 8002870:	2202      	movs	r2, #2
 8002872:	783b      	ldrb	r3, [r7, #0]
 8002874:	401c      	ands	r4, r3
 8002876:	4013      	ands	r3, r2
 8002878:	6034      	str	r4, [r6, #0]
 800287a:	602b      	str	r3, [r5, #0]
 800287c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	20000128 	.word	0x20000128
 8002884:	2000012c 	.word	0x2000012c

08002888 <_has_ext_stdout_stderr>:
 8002888:	b510      	push	{r4, lr}
 800288a:	4c04      	ldr	r4, [pc, #16]	; (800289c <_has_ext_stdout_stderr+0x14>)
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	da01      	bge.n	8002896 <_has_ext_stdout_stderr+0xe>
 8002892:	f7ff ffdf 	bl	8002854 <initialise_semihosting_exts>
 8002896:	6820      	ldr	r0, [r4, #0]
 8002898:	bd10      	pop	{r4, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	2000012c 	.word	0x2000012c

080028a0 <initialise_monitor_handles>:
 80028a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a2:	4b27      	ldr	r3, [pc, #156]	; (8002940 <initialise_monitor_handles+0xa0>)
 80028a4:	b085      	sub	sp, #20
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	2500      	movs	r5, #0
 80028aa:	2303      	movs	r3, #3
 80028ac:	ac01      	add	r4, sp, #4
 80028ae:	60a3      	str	r3, [r4, #8]
 80028b0:	2701      	movs	r7, #1
 80028b2:	6065      	str	r5, [r4, #4]
 80028b4:	1c38      	adds	r0, r7, #0
 80028b6:	1c21      	adds	r1, r4, #0
 80028b8:	beab      	bkpt	0x00ab
 80028ba:	1c07      	adds	r7, r0, #0
 80028bc:	2101      	movs	r1, #1
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <initialise_monitor_handles+0xa4>)
 80028c0:	4249      	negs	r1, r1
 80028c2:	601f      	str	r7, [r3, #0]
 80028c4:	002b      	movs	r3, r5
 80028c6:	4d20      	ldr	r5, [pc, #128]	; (8002948 <initialise_monitor_handles+0xa8>)
 80028c8:	00da      	lsls	r2, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	50a9      	str	r1, [r5, r2]
 80028ce:	2b14      	cmp	r3, #20
 80028d0:	d1fa      	bne.n	80028c8 <initialise_monitor_handles+0x28>
 80028d2:	f7ff ffd9 	bl	8002888 <_has_ext_stdout_stderr>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d018      	beq.n	800290c <initialise_monitor_handles+0x6c>
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <initialise_monitor_handles+0xa0>)
 80028dc:	2701      	movs	r7, #1
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	2303      	movs	r3, #3
 80028e2:	60a3      	str	r3, [r4, #8]
 80028e4:	3301      	adds	r3, #1
 80028e6:	6063      	str	r3, [r4, #4]
 80028e8:	1c38      	adds	r0, r7, #0
 80028ea:	1c21      	adds	r1, r4, #0
 80028ec:	beab      	bkpt	0x00ab
 80028ee:	1c06      	adds	r6, r0, #0
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <initialise_monitor_handles+0xac>)
 80028f2:	4a13      	ldr	r2, [pc, #76]	; (8002940 <initialise_monitor_handles+0xa0>)
 80028f4:	601e      	str	r6, [r3, #0]
 80028f6:	2303      	movs	r3, #3
 80028f8:	9201      	str	r2, [sp, #4]
 80028fa:	60a3      	str	r3, [r4, #8]
 80028fc:	3305      	adds	r3, #5
 80028fe:	6063      	str	r3, [r4, #4]
 8002900:	1c38      	adds	r0, r7, #0
 8002902:	1c21      	adds	r1, r4, #0
 8002904:	beab      	bkpt	0x00ab
 8002906:	1c04      	adds	r4, r0, #0
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <initialise_monitor_handles+0xb0>)
 800290a:	601c      	str	r4, [r3, #0]
 800290c:	4f10      	ldr	r7, [pc, #64]	; (8002950 <initialise_monitor_handles+0xb0>)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	d102      	bne.n	800291a <initialise_monitor_handles+0x7a>
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <initialise_monitor_handles+0xac>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	2400      	movs	r4, #0
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <initialise_monitor_handles+0xa4>)
 800291e:	606c      	str	r4, [r5, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	602b      	str	r3, [r5, #0]
 8002924:	f7ff ffb0 	bl	8002888 <_has_ext_stdout_stderr>
 8002928:	42a0      	cmp	r0, r4
 800292a:	d006      	beq.n	800293a <initialise_monitor_handles+0x9a>
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <initialise_monitor_handles+0xac>)
 800292e:	60ec      	str	r4, [r5, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	616c      	str	r4, [r5, #20]
 8002934:	60ab      	str	r3, [r5, #8]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	612b      	str	r3, [r5, #16]
 800293a:	b005      	add	sp, #20
 800293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	08003275 	.word	0x08003275
 8002944:	20000168 	.word	0x20000168
 8002948:	20000170 	.word	0x20000170
 800294c:	2000016c 	.word	0x2000016c
 8002950:	20000164 	.word	0x20000164

08002954 <_isatty>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	f7ff fd79 	bl	800244c <findslot>
 800295a:	2509      	movs	r5, #9
 800295c:	1e04      	subs	r4, r0, #0
 800295e:	d104      	bne.n	800296a <_isatty+0x16>
 8002960:	f7fe fdc0 	bl	80014e4 <__errno>
 8002964:	6005      	str	r5, [r0, #0]
 8002966:	0020      	movs	r0, r4
 8002968:	bd70      	pop	{r4, r5, r6, pc}
 800296a:	1c28      	adds	r0, r5, #0
 800296c:	1c21      	adds	r1, r4, #0
 800296e:	beab      	bkpt	0x00ab
 8002970:	1c04      	adds	r4, r0, #0
 8002972:	0020      	movs	r0, r4
 8002974:	2c01      	cmp	r4, #1
 8002976:	d0f7      	beq.n	8002968 <_isatty+0x14>
 8002978:	f7fe fdb4 	bl	80014e4 <__errno>
 800297c:	2400      	movs	r4, #0
 800297e:	0006      	movs	r6, r0
 8002980:	2513      	movs	r5, #19
 8002982:	1c28      	adds	r0, r5, #0
 8002984:	1c21      	adds	r1, r4, #0
 8002986:	beab      	bkpt	0x00ab
 8002988:	1c05      	adds	r5, r0, #0
 800298a:	6035      	str	r5, [r6, #0]
 800298c:	e7eb      	b.n	8002966 <_isatty+0x12>
	...

08002990 <_init>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002996:	bc08      	pop	{r3}
 8002998:	469e      	mov	lr, r3
 800299a:	4770      	bx	lr

0800299c <_fini>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr
